
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADD ALIAS AMPERSAND AMPERSAND_ASSIGN ARROW AS ASCENDING ASSIGN ASYNC AWAIT BANG BASE BOOL_TYPE BREAK BY BYTE CARET CARET_ASSIGN CASE CATCH CHAR CHAR_LITERAL CHECKED CLASS CLASS_NAME CLOSE_BRACE CLOSE_BRACKET CLOSE_PAREN COLON COMMA CONSOLE CONST CONTINUE CONVERT DECIMAL DECREMENT DEFAULT DELEGATE DESCENDING DICTIONARY DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE DOUBLE_AMPERSAND DOUBLE_COLON DOUBLE_PIPE DOUBLE_QUESTION DYNAMIC ELSE ENUM EQUAL EQUALS EVENT EXPLICIT EXTERN FALSE FINALLY FIXED FLOAT FLOAT_TYPE FOR FOREACH FROM GET GLOBAL GOTO GREATER_THAN GREATER_THAN_EQUAL GROUP IDENTIFIER IF IMPLICIT IN INCREMENT INTEGER INTERFACE INTERNAL INTO INT_TYPE IS JOIN LAMBDA_ARROW LEFT_SHIFT LEFT_SHIFT_ASSIGN LESS_THAN LESS_THAN_EQUAL LET LIST LOCK LONG MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN NAMEOF NAMESPACE NEW NOTNULL NOT_EQUAL NULL NULLABLE_OPERATOR OBJECT ON OPEN_BRACE OPEN_BRACKET OPEN_PAREN OPERATOR ORDERBY OUT OVERRIDE PARAMS PARTIAL PERCENT PERCENT_ASSIGN PIPE PIPE_ASSIGN PLUS PLUS_ASSIGN PRIVATE PROTECTED PUBLIC QUESTION READLINE READONLY REF REMOVE RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGN SBYTE SEALED SELECT SEMICOLON SET SHORT SIZEOF STACKALLOC STATIC STRING STRING_TYPE STRUCT SWITCH THIS THROW TILDE TOINT32 TRUE TRY TYPEOF UINT ULONG UNCHECKED UNMANAGED UNSAFE USHORT USING VALUE VAR VERBATIM_STRING VIRTUAL VOID VOLATILE WHEN WHERE WHILE WRITE WRITELINE YIELDprogram : statement_list\n| emptyempty :expression : expression PLUS termexpression : expression MINUS termexpression : termexpression : IDENTIFIERexpression : function_callterm : term MULTIPLY factorterm : term DIVIDE factorterm : factorfactor : INTEGERfactor : FLOATfactor : STRINGfactor : IDENTIFIERfactor : OPEN_PAREN expression CLOSE_PARENusing_statement : USING IDENTIFIER SEMICOLON\n| USING CLASS_NAME SEMICOLONfunction_call : IDENTIFIER OPEN_PAREN CLOSE_PAREN\n| IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN\n| CLASS_NAME OPEN_PAREN CLOSE_PAREN\n| CLASS_NAME OPEN_PAREN argument_list CLOSE_PARENfunction_call_statement : function_call SEMICOLONargument_list : expression\n| argument_list COMMA expressionprint_statement : CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON\n| CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLONinput_statement : CONSOLE DOT READLINE OPEN_PAREN CLOSE_PARENconvert_statement : CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PARENassignment : IDENTIFIER ASSIGN expression SEMICOLON\n| IDENTIFIER ASSIGN convert_statement SEMICOLON\n| INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON\n| INT_TYPE multiple_var_declaration SEMICOLON\n| FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON\n| BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLONmultiple_var_declaration : IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression\n| multiple_var_declaration COMMA IDENTIFIER ASSIGN expressioncondition : expression EQUAL expression\n| expression NOT_EQUAL expression\n| expression LESS_THAN expression\n| expression GREATER_THAN expression\n| expression LESS_THAN_EQUAL expression\n| expression GREATER_THAN_EQUAL expression\n| expression EQUAL STRING\n| STRING EQUAL expressionlogical_condition : condition\n| condition DOUBLE_AMPERSAND condition\n| condition DOUBLE_PIPE conditionarray_declaration : INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON\n| STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON\narray_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETarray_assignment : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLONif_statement : IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE\nbasic_function : VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACElist_declaration : LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n| LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\nlist_add : IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLONwhile_statement : WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEfor_statement : FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEfor_init : INT_TYPE IDENTIFIER ASSIGN expression\n| assignment_no_semicolonassignment_no_semicolon : IDENTIFIER ASSIGN expressionfor_update : IDENTIFIER INCREMENT\n| IDENTIFIER DECREMENT\n| INCREMENT IDENTIFIER\n| DECREMENT IDENTIFIERparam_function : VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nparameter_list : parameter\n| parameter_list COMMA parameterparameter : INT_TYPE IDENTIFIER\n| STRING_TYPE IDENTIFIER\n| FLOAT_TYPE IDENTIFIERdictionary_declaration : DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n| DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\ndictionary_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETdict_assignment : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLONswitch_statement : SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACEcase_list : case_statement\n| case_list case_statementcase_statement : CASE expression COLON statement_list BREAK SEMICOLON\n| DEFAULT COLON statement_list BREAK SEMICOLONreturn_function : INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n| STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n| FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\nreturn_statement : RETURN SEMICOLONexpression : expression OPEN_BRACKET expression CLOSE_BRACKETexpression : expression DOT IDENTIFIERarray_declaration : INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLONvalue_list : expression\n| value_list COMMA expressionexpression : NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACEstatic_method : STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nmain_method : STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nclass_definition : CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE\n| CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE\n| PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACEclass_body : class_member\n| class_body class_memberclass_member : property_definition\n| method_definition\n| main_method\n| static_methodproperty_definition : PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE\n| PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE\nmethod_definition : PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nstatement_list : statement\n| statement_list statementstatement : assignment\n| print_statement\n| array_declaration\n| if_statement\n| while_statement\n| for_statement\n| switch_statement\n| array_assignment\n| list_declaration\n| list_add\n| dictionary_declaration\n| dict_assignment\n| class_definition\n| basic_function\n| param_function\n| return_function\n| return_statement\n| using_statement\n| function_call_statement'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,214,216,217,221,244,251,292,297,298,303,308,309,310,311,316,332,338,371,403,405,406,431,432,434,435,476,477,482,491,492,],[-3,0,-1,-2,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,-35,-36,-37,-38,-110,-111,-112,-55,-62,-94,-26,-27,-56,-63,-83,-59,-73,-72,-88,-90,-89,-52,-53,-58,-64,-60,-61,-57,-79,-80,]),'IDENTIFIER':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,36,39,41,43,44,45,47,56,57,58,59,64,67,70,78,88,90,91,92,93,95,97,98,107,121,122,123,124,125,126,127,128,129,130,135,137,140,144,145,156,157,159,160,161,162,163,164,165,166,167,169,171,173,174,200,203,204,205,209,212,213,214,215,216,217,219,221,224,235,237,244,246,247,248,249,250,251,253,257,261,263,267,269,273,274,275,279,283,284,292,293,294,295,297,298,299,300,301,303,304,306,308,309,310,311,314,315,316,319,332,333,338,351,352,361,364,371,373,380,381,382,389,391,393,396,398,400,403,405,406,408,409,410,418,420,421,422,423,424,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[24,24,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,48,51,52,54,63,66,68,-124,71,71,71,71,71,108,71,71,-91,-23,71,71,-34,146,147,71,71,154,71,170,-17,-18,-30,191,191,71,194,-31,191,191,71,71,206,210,211,71,71,71,71,71,71,71,71,71,71,71,71,71,240,241,71,-32,260,-33,24,71,71,-35,24,-36,-37,24,-38,24,24,71,-110,285,286,287,288,290,-111,24,71,24,24,24,24,24,24,313,71,322,323,-112,24,24,71,-55,-62,71,24,71,-94,71,71,-26,-27,-56,-63,349,350,-83,24,-59,24,-73,24,24,210,210,-72,71,24,24,24,24,24,24,24,24,24,-88,-90,-89,71,24,24,24,24,445,24,24,448,24,24,24,24,24,24,-52,-53,-58,-64,24,24,24,24,24,24,24,24,-60,-61,24,24,-57,-79,-80,]),'INT_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,58,60,61,67,70,76,89,90,120,121,122,123,128,175,183,184,203,205,208,209,214,215,216,217,219,221,224,235,244,251,253,261,263,265,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,328,329,330,331,332,333,338,351,352,371,380,381,382,384,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,440,447,450,452,454,468,471,473,474,475,476,477,480,481,482,491,492,],[25,25,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,107,111,114,-91,-23,131,140,-34,140,-17,-18,-30,-31,242,246,250,-32,-33,140,25,-35,25,-36,-37,25,-38,25,25,-110,-111,25,25,25,302,25,25,25,25,-112,25,25,-55,-62,25,-94,-26,-27,-56,-63,-83,25,140,140,140,140,-59,25,-73,25,25,-72,25,25,25,413,25,25,25,25,25,25,-88,-90,-89,25,25,25,25,25,25,25,25,25,25,25,25,-52,-53,-58,-64,459,25,25,25,25,25,478,25,25,25,-60,-61,25,25,-57,-79,-80,]),'FLOAT_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,89,90,120,121,122,123,128,203,205,208,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,328,329,330,331,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[26,26,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,145,-34,145,-17,-18,-30,-31,-32,-33,145,26,-35,26,-36,-37,26,-38,26,26,-110,-111,26,26,26,26,26,26,26,-112,26,26,-55,-62,26,-94,-26,-27,-56,-63,-83,26,145,145,145,145,-59,26,-73,26,26,-72,26,26,26,26,26,26,26,26,26,-88,-90,-89,26,26,26,26,26,26,26,26,26,26,26,26,-52,-53,-58,-64,26,26,26,26,26,26,26,26,-60,-61,26,26,-57,-79,-80,]),'STRING_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,60,61,67,70,89,90,120,121,122,123,128,176,183,203,205,208,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,270,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,328,329,330,331,332,333,338,351,352,371,380,381,382,385,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,439,447,450,452,454,468,472,473,474,475,476,477,480,481,482,491,492,],[27,27,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,112,113,-91,-23,144,-34,144,-17,-18,-30,-31,243,247,-32,-33,144,27,-35,27,-36,-37,27,-38,27,27,-110,-111,27,27,27,27,27,307,27,27,-112,27,27,-55,-62,27,-94,-26,-27,-56,-63,-83,27,361,364,144,144,-59,27,-73,27,27,-72,27,27,27,414,27,27,27,27,27,27,-88,-90,-89,27,27,27,27,27,27,27,27,27,27,27,27,-52,-53,-58,-64,458,27,27,27,27,27,479,27,27,27,-60,-61,27,27,-57,-79,-80,]),'BOOL_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[28,28,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,28,-35,28,-36,-37,28,-38,28,28,-110,-111,28,28,28,28,28,28,28,-112,28,28,-55,-62,28,-94,-26,-27,-56,-63,-83,28,-59,28,-73,28,28,-72,28,28,28,28,28,28,28,28,28,-88,-90,-89,28,28,28,28,28,28,28,28,28,28,28,28,-52,-53,-58,-64,28,28,28,28,28,28,28,28,-60,-61,28,28,-57,-79,-80,]),'CONSOLE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,95,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[29,29,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,152,-17,-18,-30,-31,-32,-33,29,-35,29,-36,-37,29,-38,29,29,-110,-111,29,29,29,29,29,29,29,-112,29,29,-55,-62,29,-94,-26,-27,-56,-63,-83,29,-59,29,-73,29,29,-72,29,29,29,29,29,29,29,29,29,-88,-90,-89,29,29,29,29,29,29,29,29,29,29,29,29,-52,-53,-58,-64,29,29,29,29,29,29,29,29,-60,-61,29,29,-57,-79,-80,]),'IF':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,345,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[30,30,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,30,-35,30,-36,-37,30,-38,30,30,-110,-111,30,30,30,30,30,30,30,-112,30,30,-55,-62,30,-94,-26,-27,-56,-63,-83,30,-59,30,-73,379,30,30,-72,30,30,30,30,30,30,30,30,30,-88,-90,-89,30,30,30,30,30,30,30,30,30,30,30,30,-52,-53,-58,-64,30,30,30,30,30,30,30,30,-60,-61,30,30,-57,-79,-80,]),'WHILE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[31,31,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,31,-35,31,-36,-37,31,-38,31,31,-110,-111,31,31,31,31,31,31,31,-112,31,31,-55,-62,31,-94,-26,-27,-56,-63,-83,31,-59,31,-73,31,31,-72,31,31,31,31,31,31,31,31,31,-88,-90,-89,31,31,31,31,31,31,31,31,31,31,31,31,-52,-53,-58,-64,31,31,31,31,31,31,31,31,-60,-61,31,31,-57,-79,-80,]),'FOR':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[32,32,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,32,-35,32,-36,-37,32,-38,32,32,-110,-111,32,32,32,32,32,32,32,-112,32,32,-55,-62,32,-94,-26,-27,-56,-63,-83,32,-59,32,-73,32,32,-72,32,32,32,32,32,32,32,32,32,-88,-90,-89,32,32,32,32,32,32,32,32,32,32,32,32,-52,-53,-58,-64,32,32,32,32,32,32,32,32,-60,-61,32,32,-57,-79,-80,]),'SWITCH':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[33,33,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,33,-35,33,-36,-37,33,-38,33,33,-110,-111,33,33,33,33,33,33,33,-112,33,33,-55,-62,33,-94,-26,-27,-56,-63,-83,33,-59,33,-73,33,33,-72,33,33,33,33,33,33,33,33,33,-88,-90,-89,33,33,33,33,33,33,33,33,33,33,33,33,-52,-53,-58,-64,33,33,33,33,33,33,33,33,-60,-61,33,33,-57,-79,-80,]),'LIST':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,320,321,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[34,34,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,34,-35,34,-36,-37,34,-38,34,34,-110,-111,34,34,34,34,34,34,34,-112,34,34,-55,-62,34,-94,-26,-27,-56,-63,-83,34,353,354,-59,34,-73,34,34,-72,34,34,34,34,34,34,34,34,34,-88,-90,-89,34,34,34,34,34,34,34,34,34,34,34,34,-52,-53,-58,-64,34,34,34,34,34,34,34,34,-60,-61,34,34,-57,-79,-80,]),'DICTIONARY':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,386,387,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[35,35,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,35,-35,35,-36,-37,35,-38,35,35,-110,-111,35,35,35,35,35,35,35,-112,35,35,-55,-62,35,-94,-26,-27,-56,-63,-83,35,-59,35,-73,35,35,-72,35,35,35,415,416,35,35,35,35,35,35,-88,-90,-89,35,35,35,35,35,35,35,35,35,35,35,35,-52,-53,-58,-64,35,35,35,35,35,35,35,35,-60,-61,35,35,-57,-79,-80,]),'CLASS':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,38,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[36,36,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,65,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,36,-35,36,-36,-37,36,-38,36,36,-110,-111,36,36,36,36,36,36,36,-112,36,36,-55,-62,36,-94,-26,-27,-56,-63,-83,36,-59,36,-73,36,36,-72,36,36,36,36,36,36,36,36,36,-88,-90,-89,36,36,36,36,36,36,36,36,36,36,36,36,-52,-53,-58,-64,36,36,36,36,36,36,36,36,-60,-61,36,36,-57,-79,-80,]),'PUBLIC':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,115,116,121,122,123,128,177,178,179,180,181,182,185,187,203,205,209,214,215,216,217,219,221,224,235,244,245,251,252,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,442,444,446,447,449,450,451,452,453,454,460,461,463,465,466,467,468,473,474,475,476,477,480,481,482,485,486,491,492,],[38,38,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,183,183,-17,-18,-30,-31,183,-113,-115,-116,-117,-118,183,183,-32,-33,38,-35,38,-36,-37,38,-38,38,38,-110,-114,-111,183,38,38,38,38,38,38,38,-112,38,38,-55,-62,38,-94,-26,-27,-56,-63,-83,38,-59,38,-73,38,38,-72,38,38,38,38,38,38,38,38,38,-88,-90,-89,38,38,38,38,38,38,38,38,38,38,38,38,-52,-53,-58,-64,-122,-121,-98,38,-100,38,-102,38,-104,38,-119,-120,-99,-101,-103,-105,38,38,38,38,-60,-61,38,38,-57,-106,-108,-79,-80,]),'VOID':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,183,184,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[39,39,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,248,249,-32,-33,39,-35,39,-36,-37,39,-38,39,39,-110,-111,39,39,39,39,39,39,39,-112,39,39,-55,-62,39,-94,-26,-27,-56,-63,-83,39,-59,39,-73,39,39,-72,39,39,39,39,39,39,39,39,39,-88,-90,-89,39,39,39,39,39,39,39,39,39,39,39,39,-52,-53,-58,-64,39,39,39,39,39,39,39,39,-60,-61,39,39,-57,-79,-80,]),'RETURN':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[40,40,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,40,-35,40,-36,-37,40,-38,40,40,-110,-111,40,40,301,304,306,40,40,-112,40,40,-55,-62,40,-94,-26,-27,-56,-63,-83,40,-59,40,-73,40,40,-72,40,40,40,40,40,40,40,40,40,-88,-90,-89,40,40,40,40,40,40,40,40,40,40,40,40,-52,-53,-58,-64,40,40,40,40,40,40,40,40,-60,-61,40,40,-57,-79,-80,]),'USING':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,209,214,215,216,217,219,221,224,235,244,251,253,261,263,267,269,273,274,292,293,294,297,298,300,303,308,309,310,311,316,319,332,333,338,351,352,371,380,381,382,389,391,393,396,398,400,403,405,406,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[41,41,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,41,-35,41,-36,-37,41,-38,41,41,-110,-111,41,41,41,41,41,41,41,-112,41,41,-55,-62,41,-94,-26,-27,-56,-63,-83,41,-59,41,-73,41,41,-72,41,41,41,41,41,41,41,41,41,-88,-90,-89,41,41,41,41,41,41,41,41,41,41,41,41,-52,-53,-58,-64,41,41,41,41,41,41,41,41,-60,-61,41,41,-57,-79,-80,]),'CLASS_NAME':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,36,41,43,44,45,47,56,57,59,64,65,67,70,78,88,90,93,95,98,121,122,123,126,128,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,203,205,209,212,213,214,215,216,217,219,221,224,235,237,244,249,250,251,253,257,261,263,267,269,273,274,279,292,293,294,295,297,298,299,300,301,303,304,306,308,309,310,311,316,319,332,333,338,351,352,371,373,380,381,382,389,391,393,396,398,400,403,405,406,408,409,410,418,420,422,423,425,426,427,428,429,430,431,432,434,435,447,450,452,454,468,473,474,475,476,477,480,481,482,491,492,],[37,37,-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,62,69,-124,37,37,37,37,37,37,37,119,-91,-23,37,37,-34,37,37,37,-17,-18,-30,37,-31,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-32,-33,37,37,37,-35,37,-36,-37,37,-38,37,37,37,-110,289,291,-111,37,37,37,37,37,37,37,37,37,-112,37,37,37,-55,-62,37,37,37,-94,37,37,-26,-27,-56,-63,-83,37,-59,37,-73,37,37,-72,37,37,37,37,37,37,37,37,37,37,-88,-90,-89,37,37,37,37,37,37,37,37,37,37,37,37,37,-52,-53,-58,-64,37,37,37,37,37,37,37,37,-60,-61,37,37,-57,-79,-80,]),'CLOSE_BRACE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,71,74,75,79,80,81,82,85,90,117,121,122,123,128,136,177,178,179,180,181,182,185,186,190,191,192,194,195,196,199,203,205,214,216,217,221,244,245,251,252,255,273,274,277,278,292,293,297,298,300,303,308,309,310,311,316,317,332,333,334,335,338,371,372,374,376,377,402,403,405,406,409,410,412,418,420,422,425,427,429,431,432,434,435,436,441,442,443,444,446,447,449,450,451,452,453,454,460,461,463,465,466,467,475,476,477,480,481,482,485,486,491,492,],[-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-7,-6,-8,-11,-12,-13,-14,-19,-34,-21,-17,-18,-30,-31,-20,244,-113,-115,-116,-117,-118,251,-22,-4,-15,-5,-93,-9,-10,-16,-32,-33,-35,-36,-37,-38,-110,-114,-111,292,-92,310,311,316,-84,-112,332,-55,-62,338,-94,-26,-27,-56,-63,-83,-85,-59,371,372,-95,-73,-72,-97,403,405,406,-96,-88,-90,-89,434,435,-87,442,444,446,449,451,453,-52,-53,-58,-64,-86,460,-122,461,-121,-98,463,-100,465,-102,466,-104,467,-119,-120,-99,-101,-103,-105,482,-60,-61,485,486,-57,-106,-108,-79,-80,]),'BREAK':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,90,121,122,123,128,203,205,214,216,217,221,244,251,292,297,298,303,308,309,310,311,316,332,338,352,371,382,403,405,406,431,432,434,435,476,477,482,491,492,],[-123,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-124,-91,-23,-34,-17,-18,-30,-31,-32,-33,-35,-36,-37,-38,-110,-111,-112,-55,-62,-94,-26,-27,-56,-63,-83,-59,-73,383,-72,411,-88,-90,-89,-52,-53,-58,-64,-60,-61,-57,-79,-80,]),'ASSIGN':([24,48,51,52,54,108,134,146,147,154,170,240,241,260,322,323,],[44,88,93,95,98,171,200,212,213,220,237,281,282,299,355,356,]),'OPEN_BRACKET':([24,25,27,71,72,74,75,79,80,81,82,83,85,87,103,104,110,117,131,133,136,138,148,150,155,186,190,191,192,193,194,195,196,199,201,202,222,223,227,228,229,230,231,232,233,234,238,255,258,264,266,276,296,302,307,318,335,337,339,341,343,361,364,372,402,],[45,50,53,-7,126,-6,-8,-11,-12,-13,-14,126,-19,126,126,-14,126,-21,197,126,-20,126,126,126,126,-22,-4,-15,-5,126,-93,-9,-10,-16,126,126,126,126,126,-14,126,126,126,126,126,126,126,-92,126,126,126,126,126,340,344,126,126,126,126,126,126,392,395,-97,126,]),'DOT':([24,29,71,72,74,75,77,79,80,81,82,83,85,87,103,104,110,117,133,136,138,148,150,152,155,186,190,191,192,193,194,195,196,199,201,202,222,223,227,228,229,230,231,232,233,234,238,255,258,264,266,276,296,318,335,337,339,341,343,372,402,],[46,55,-7,127,-6,-8,132,-11,-12,-13,-14,127,-19,127,127,-14,127,-21,127,-20,127,127,127,218,127,-22,-4,-15,-5,127,-93,-9,-10,-16,127,127,127,127,127,-14,127,127,127,127,127,127,127,-92,127,127,127,127,127,127,127,127,127,127,127,-97,127,]),'OPEN_PAREN':([24,30,31,32,33,37,44,45,47,48,51,52,56,57,59,64,66,71,78,84,88,93,95,98,99,100,124,125,126,129,130,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,198,200,212,213,237,257,268,279,285,287,288,289,290,291,295,299,301,304,306,373,379,408,437,438,483,484,],[47,56,57,58,59,64,78,78,78,89,94,96,78,78,78,78,120,47,78,135,78,78,78,78,156,157,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,257,78,78,78,78,78,305,78,325,327,328,329,330,331,78,78,78,78,78,78,408,78,456,457,487,488,]),'LESS_THAN':([34,35,71,74,75,79,80,81,82,85,103,104,117,136,186,190,191,192,194,195,196,199,255,353,354,372,415,416,],[60,61,-7,-6,-8,-11,-12,-13,-14,-19,163,-14,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,-92,384,385,-97,439,440,]),'SEMICOLON':([40,42,49,68,69,71,72,73,74,75,79,80,81,82,85,102,106,109,117,136,138,139,148,150,151,155,186,190,191,192,194,195,196,199,225,226,227,228,229,230,231,232,233,234,236,238,255,258,259,264,266,271,272,276,301,304,306,336,337,339,341,342,343,357,359,372,383,404,407,411,417,419,469,470,489,490,],[67,70,90,121,122,-7,123,128,-6,-8,-11,-12,-13,-14,-19,-49,169,-66,-21,-20,203,205,214,216,217,221,-22,-4,-15,-5,-93,-9,-10,-16,-50,-51,-41,-14,-42,-43,-44,-45,-46,-48,275,-67,-92,297,298,-40,303,308,309,-65,67,67,67,-29,-39,374,376,-28,377,388,390,-97,412,431,432,436,441,443,476,477,491,492,]),'NEW':([44,45,47,56,57,59,64,78,88,93,95,98,126,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,212,213,220,237,257,279,281,282,295,299,301,304,306,355,356,373,408,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,265,270,76,76,76,320,321,76,76,76,76,76,386,387,76,76,]),'CONVERT':([44,88,],[77,77,]),'INTEGER':([44,45,47,56,57,59,64,78,88,93,95,98,124,125,126,129,130,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,212,213,237,257,279,295,299,301,304,306,340,344,373,408,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,375,378,80,80,]),'FLOAT':([44,45,47,56,57,59,64,78,88,93,95,98,124,125,126,129,130,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,212,213,237,257,279,295,299,301,304,306,373,408,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'STRING':([44,45,47,56,57,59,64,78,88,93,95,98,124,125,126,129,130,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,212,213,237,257,279,295,299,301,304,306,373,408,],[82,82,82,104,104,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,104,104,228,82,82,82,82,82,82,104,82,82,82,82,82,82,82,82,82,82,82,82,82,104,]),'ADD':([46,],[84,]),'CLOSE_PAREN':([47,64,71,74,75,79,80,81,82,85,86,87,89,94,96,101,102,105,110,117,118,120,133,136,141,143,186,189,190,191,192,194,195,196,199,201,202,206,210,211,222,223,225,226,227,228,229,230,231,232,233,234,255,262,296,305,312,325,327,328,329,330,331,347,348,349,350,363,366,368,370,372,433,445,448,456,457,487,488,],[85,117,-7,-6,-8,-11,-12,-13,-14,-19,136,-24,142,149,153,158,-49,168,172,-21,186,188,199,-20,207,-74,-22,254,-4,-15,-5,-93,-9,-10,-16,259,-25,-76,-77,-78,271,272,-50,-51,-41,-14,-42,-43,-44,-45,-46,-48,-92,-75,336,342,346,358,360,362,365,367,369,-68,-69,-70,-71,394,397,399,401,-97,455,462,464,469,470,489,490,]),'COMMA':([49,71,74,75,79,80,81,82,85,86,87,113,114,117,118,136,138,141,143,186,189,190,191,192,194,195,196,199,202,206,210,211,255,262,264,334,335,337,363,366,368,370,372,402,458,459,],[91,-7,-6,-8,-11,-12,-13,-14,-19,137,-24,175,176,-21,137,-20,204,208,-74,-22,208,-4,-15,-5,-93,-9,-10,-16,-25,-76,-77,-78,-92,-75,-40,373,-95,-39,208,208,208,208,-97,-96,471,472,]),'CLOSE_BRACKET':([50,53,71,74,75,79,80,81,82,83,85,117,136,186,190,191,192,193,194,195,196,197,199,255,340,372,375,378,392,395,],[92,97,-7,-6,-8,-11,-12,-13,-14,134,-19,-21,-20,-22,-4,-15,-5,255,-93,-9,-10,256,-16,-92,256,-97,404,407,421,424,]),'WRITELINE':([55,],[99,]),'WRITE':([55,],[100,]),'OPEN_BRACE':([62,63,119,142,149,153,158,168,172,188,207,254,256,285,286,345,346,358,360,362,365,367,369,394,397,399,401,455,462,464,],[115,116,187,209,215,219,224,235,239,253,261,294,295,324,326,380,381,389,391,393,396,398,400,423,426,428,430,468,473,474,]),'PLUS':([71,72,74,75,79,80,81,82,83,85,87,103,104,110,117,133,136,138,148,150,155,186,190,191,192,193,194,195,196,199,201,202,222,223,227,228,229,230,231,232,233,234,238,255,258,264,266,276,296,318,335,337,339,341,343,372,402,],[-7,124,-6,-8,-11,-12,-13,-14,124,-19,124,124,-14,124,-21,124,-20,124,124,124,124,-22,-4,-15,-5,124,-93,-9,-10,-16,124,124,124,124,124,-14,124,124,124,124,124,124,124,-92,124,124,124,124,124,124,124,124,124,124,124,-97,124,]),'MINUS':([71,72,74,75,79,80,81,82,83,85,87,103,104,110,117,133,136,138,148,150,155,186,190,191,192,193,194,195,196,199,201,202,222,223,227,228,229,230,231,232,233,234,238,255,258,264,266,276,296,318,335,337,339,341,343,372,402,],[-7,125,-6,-8,-11,-12,-13,-14,125,-19,125,125,-14,125,-21,125,-20,125,125,125,125,-22,-4,-15,-5,125,-93,-9,-10,-16,125,125,125,125,125,-14,125,125,125,125,125,125,125,-92,125,125,125,125,125,125,125,125,125,125,125,-97,125,]),'EQUAL':([71,74,75,79,80,81,82,85,103,104,117,136,186,190,191,192,194,195,196,199,255,372,],[-7,-6,-8,-11,-12,-13,-14,-19,161,167,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,-92,-97,]),'NOT_EQUAL':([71,74,75,79,80,81,82,85,103,104,117,136,186,190,191,192,194,195,196,199,255,372,],[-7,-6,-8,-11,-12,-13,-14,-19,162,-14,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,-92,-97,]),'GREATER_THAN':([71,74,75,79,80,81,82,85,103,104,111,112,117,136,186,190,191,192,194,195,196,199,242,243,255,372,413,414,478,479,],[-7,-6,-8,-11,-12,-13,-14,-19,164,-14,173,174,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,283,284,-92,-97,437,438,483,484,]),'LESS_THAN_EQUAL':([71,74,75,79,80,81,82,85,103,104,117,136,186,190,191,192,194,195,196,199,255,372,],[-7,-6,-8,-11,-12,-13,-14,-19,165,-14,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,-92,-97,]),'GREATER_THAN_EQUAL':([71,74,75,79,80,81,82,85,103,104,117,136,186,190,191,192,194,195,196,199,255,372,],[-7,-6,-8,-11,-12,-13,-14,-19,166,-14,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,-92,-97,]),'DOUBLE_AMPERSAND':([71,74,75,79,80,81,82,85,102,117,136,186,190,191,192,194,195,196,199,227,228,229,230,231,232,233,234,255,372,],[-7,-6,-8,-11,-12,-13,-14,-19,159,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,-41,-14,-42,-43,-44,-45,-46,-48,-92,-97,]),'DOUBLE_PIPE':([71,74,75,79,80,81,82,85,102,117,136,186,190,191,192,194,195,196,199,227,228,229,230,231,232,233,234,255,372,],[-7,-6,-8,-11,-12,-13,-14,-19,160,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,-41,-14,-42,-43,-44,-45,-46,-48,-92,-97,]),'COLON':([71,74,75,79,80,81,82,85,117,136,186,190,191,192,194,195,196,199,255,280,318,372,],[-7,-6,-8,-11,-12,-13,-14,-19,-21,-20,-22,-4,-15,-5,-93,-9,-10,-16,-92,319,351,-97,]),'MULTIPLY':([71,74,79,80,81,82,104,190,191,192,195,196,199,228,],[-15,129,-11,-12,-13,-14,-14,129,-15,129,-9,-10,-16,-14,]),'DIVIDE':([71,74,79,80,81,82,104,190,191,192,195,196,199,228,],[-15,130,-11,-12,-13,-14,-14,130,-15,130,-9,-10,-16,-14,]),'STATIC':([115,116,177,178,179,180,181,182,185,187,245,252,442,444,446,449,451,453,460,461,463,465,466,467,485,486,],[184,184,184,-113,-115,-116,-117,-118,184,184,-114,184,-122,-121,-98,-100,-102,-104,-119,-120,-99,-101,-103,-105,-106,-108,]),'TOINT32':([132,],[198,]),'READLINE':([218,],[268,]),'CASE':([239,277,278,317,412,436,],[279,279,-84,-85,-87,-86,]),'DEFAULT':([239,277,278,317,412,436,],[280,280,-84,-85,-87,-86,]),'INCREMENT':([275,313,],[314,347,]),'DECREMENT':([275,313,],[315,348,]),'ELSE':([310,],[345,]),'GET':([324,326,],[357,359,]),'SET':([388,390,],[417,419,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,209,215,219,224,235,253,261,294,319,351,380,381,389,391,393,396,398,400,423,426,428,430,468,473,474,],[2,263,267,269,273,274,293,300,333,352,382,409,410,418,420,422,425,427,429,447,450,452,454,475,480,481,]),'empty':([0,],[3,]),'statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[4,43,4,4,4,4,4,4,4,43,43,43,43,43,43,4,43,4,43,4,43,4,4,43,4,4,4,4,4,4,43,43,43,43,43,4,43,4,43,4,43,4,43,43,43,43,4,4,4,43,43,43,]),'assignment':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'print_statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'array_declaration':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'if_statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'while_statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'switch_statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'array_assignment':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'list_declaration':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'list_add':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'dictionary_declaration':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'dict_assignment':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'class_definition':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'basic_function':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'param_function':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'return_function':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'return_statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'using_statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'function_call_statement':([0,2,209,215,219,224,235,253,261,263,267,269,273,274,293,294,300,319,333,351,352,380,381,382,389,391,393,396,398,400,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'function_call':([0,2,44,45,47,56,57,59,64,78,88,93,95,98,126,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,209,212,213,215,219,224,235,237,253,257,261,263,267,269,273,274,279,293,294,295,299,300,301,304,306,319,333,351,352,373,380,381,382,389,391,393,396,398,400,408,409,410,418,420,422,423,425,426,427,428,429,430,447,450,452,454,468,473,474,475,480,481,],[42,42,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,42,75,75,42,42,42,42,75,42,75,42,42,42,42,42,42,75,42,42,75,75,42,75,75,75,42,42,42,42,75,42,42,42,42,42,42,42,42,42,75,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'multiple_var_declaration':([25,],[49,]),'expression':([44,45,47,56,57,59,64,78,88,93,95,98,126,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,212,213,237,257,279,295,299,301,304,306,373,408,],[72,83,87,103,103,110,87,133,138,148,150,155,193,201,202,222,223,103,103,227,229,230,231,232,233,234,103,238,258,264,266,276,296,318,335,337,339,341,343,402,103,]),'convert_statement':([44,88,],[73,139,]),'term':([44,45,47,56,57,59,64,78,88,93,95,98,124,125,126,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,212,213,237,257,279,295,299,301,304,306,373,408,],[74,74,74,74,74,74,74,74,74,74,74,74,190,192,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'factor':([44,45,47,56,57,59,64,78,88,93,95,98,124,125,126,129,130,135,137,156,157,159,160,161,162,163,164,165,166,167,169,171,200,212,213,237,257,279,295,299,301,304,306,373,408,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,195,196,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'argument_list':([47,64,],[86,118,]),'logical_condition':([56,57,169,408,],[101,105,236,433,]),'condition':([56,57,159,160,169,408,],[102,102,225,226,102,102,]),'for_init':([58,],[106,]),'assignment_no_semicolon':([58,],[109,]),'parameter_list':([89,120,328,329,330,331,],[141,189,363,366,368,370,]),'parameter':([89,120,208,328,329,330,331,],[143,143,262,143,143,143,143,]),'input_statement':([95,],[151,]),'class_body':([115,116,187,],[177,185,252,]),'class_member':([115,116,177,185,187,252,],[178,178,245,245,178,245,]),'property_definition':([115,116,177,185,187,252,],[179,179,179,179,179,179,]),'method_definition':([115,116,177,185,187,252,],[180,180,180,180,180,180,]),'main_method':([115,116,177,185,187,252,],[181,181,181,181,181,181,]),'static_method':([115,116,177,185,187,252,],[182,182,182,182,182,182,]),'case_list':([239,],[277,]),'case_statement':([239,277,],[278,317,]),'for_update':([275,],[312,]),'value_list':([295,],[334,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','yacc.py',13),
  ('program -> empty','program',1,'p_program','yacc.py',14),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',19),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','yacc.py',24),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','yacc.py',33),
  ('expression -> term','expression',1,'p_expression_term','yacc.py',42),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','yacc.py',47),
  ('expression -> function_call','expression',1,'p_expression_function_call','yacc.py',52),
  ('term -> term MULTIPLY factor','term',3,'p_term_times','yacc.py',57),
  ('term -> term DIVIDE factor','term',3,'p_term_div','yacc.py',65),
  ('term -> factor','term',1,'p_term_factor','yacc.py',73),
  ('factor -> INTEGER','factor',1,'p_factor_int','yacc.py',78),
  ('factor -> FLOAT','factor',1,'p_factor_float','yacc.py',83),
  ('factor -> STRING','factor',1,'p_factor_string','yacc.py',88),
  ('factor -> IDENTIFIER','factor',1,'p_factor_identifier','yacc.py',93),
  ('factor -> OPEN_PAREN expression CLOSE_PAREN','factor',3,'p_factor_expr','yacc.py',98),
  ('using_statement -> USING IDENTIFIER SEMICOLON','using_statement',3,'p_using_statement','yacc.py',107),
  ('using_statement -> USING CLASS_NAME SEMICOLON','using_statement',3,'p_using_statement','yacc.py',108),
  ('function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN','function_call',3,'p_function_call','yacc.py',114),
  ('function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',115),
  ('function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN','function_call',3,'p_function_call','yacc.py',116),
  ('function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',117),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','yacc.py',125),
  ('argument_list -> expression','argument_list',1,'p_argument_list','yacc.py',130),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','yacc.py',131),
  ('print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',140),
  ('print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',141),
  ('input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN','input_statement',5,'p_input_statement','yacc.py',147),
  ('convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN','convert_statement',6,'p_convert_statement','yacc.py',153),
  ('assignment -> IDENTIFIER ASSIGN expression SEMICOLON','assignment',4,'p_assignment','yacc.py',159),
  ('assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON','assignment',4,'p_assignment','yacc.py',160),
  ('assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',161),
  ('assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON','assignment',5,'p_assignment','yacc.py',162),
  ('assignment -> INT_TYPE multiple_var_declaration SEMICOLON','assignment',3,'p_assignment','yacc.py',163),
  ('assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',164),
  ('assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',165),
  ('assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON','assignment',5,'p_assignment','yacc.py',166),
  ('assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',167),
  ('multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression','multiple_var_declaration',7,'p_multiple_var_declaration','yacc.py',177),
  ('multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression','multiple_var_declaration',5,'p_multiple_var_declaration','yacc.py',178),
  ('condition -> expression EQUAL expression','condition',3,'p_condition','yacc.py',187),
  ('condition -> expression NOT_EQUAL expression','condition',3,'p_condition','yacc.py',188),
  ('condition -> expression LESS_THAN expression','condition',3,'p_condition','yacc.py',189),
  ('condition -> expression GREATER_THAN expression','condition',3,'p_condition','yacc.py',190),
  ('condition -> expression LESS_THAN_EQUAL expression','condition',3,'p_condition','yacc.py',191),
  ('condition -> expression GREATER_THAN_EQUAL expression','condition',3,'p_condition','yacc.py',192),
  ('condition -> expression EQUAL STRING','condition',3,'p_condition','yacc.py',193),
  ('condition -> STRING EQUAL expression','condition',3,'p_condition','yacc.py',194),
  ('logical_condition -> condition','logical_condition',1,'p_logical_condition','yacc.py',199),
  ('logical_condition -> condition DOUBLE_AMPERSAND condition','logical_condition',3,'p_logical_condition','yacc.py',200),
  ('logical_condition -> condition DOUBLE_PIPE condition','logical_condition',3,'p_logical_condition','yacc.py',201),
  ('array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON','array_declaration',11,'p_array_declaration','yacc.py',214),
  ('array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON','array_declaration',11,'p_array_declaration','yacc.py',215),
  ('array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','array_access',4,'p_array_access','yacc.py',221),
  ('array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','array_assignment',7,'p_array_assignment','yacc.py',226),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','if_statement',7,'p_if_statement','yacc.py',232),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','if_statement',15,'p_if_statement','yacc.py',233),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE','if_statement',11,'p_if_statement','yacc.py',234),
  ('basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','basic_function',7,'p_basic_function','yacc.py',246),
  ('list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','list_declaration',14,'p_list_declaration','yacc.py',256),
  ('list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','list_declaration',14,'p_list_declaration','yacc.py',257),
  ('list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON','list_add',7,'p_list_add','yacc.py',263),
  ('while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','while_statement',7,'p_while_statement','yacc.py',269),
  ('for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','for_statement',11,'p_for_statement','yacc.py',275),
  ('for_init -> INT_TYPE IDENTIFIER ASSIGN expression','for_init',4,'p_for_init','yacc.py',280),
  ('for_init -> assignment_no_semicolon','for_init',1,'p_for_init','yacc.py',281),
  ('assignment_no_semicolon -> IDENTIFIER ASSIGN expression','assignment_no_semicolon',3,'p_assignment_no_semicolon','yacc.py',289),
  ('for_update -> IDENTIFIER INCREMENT','for_update',2,'p_for_update','yacc.py',294),
  ('for_update -> IDENTIFIER DECREMENT','for_update',2,'p_for_update','yacc.py',295),
  ('for_update -> INCREMENT IDENTIFIER','for_update',2,'p_for_update','yacc.py',296),
  ('for_update -> DECREMENT IDENTIFIER','for_update',2,'p_for_update','yacc.py',297),
  ('param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','param_function',8,'p_param_function','yacc.py',306),
  ('param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','param_function',8,'p_param_function','yacc.py',307),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','yacc.py',313),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','yacc.py',314),
  ('parameter -> INT_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',322),
  ('parameter -> STRING_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',323),
  ('parameter -> FLOAT_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',324),
  ('dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','dictionary_declaration',18,'p_dictionary_declaration','yacc.py',334),
  ('dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','dictionary_declaration',18,'p_dictionary_declaration','yacc.py',335),
  ('dictionary_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','dictionary_access',4,'p_dictionary_access','yacc.py',341),
  ('dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','dict_assignment',7,'p_dict_assignment','yacc.py',347),
  ('switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE','switch_statement',7,'p_switch_statement','yacc.py',353),
  ('case_list -> case_statement','case_list',1,'p_case_list','yacc.py',358),
  ('case_list -> case_list case_statement','case_list',2,'p_case_list','yacc.py',359),
  ('case_statement -> CASE expression COLON statement_list BREAK SEMICOLON','case_statement',6,'p_case_statement','yacc.py',367),
  ('case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON','case_statement',5,'p_case_statement','yacc.py',368),
  ('return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',377),
  ('return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',378),
  ('return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',379),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','yacc.py',385),
  ('expression -> expression OPEN_BRACKET expression CLOSE_BRACKET','expression',4,'p_expression_array_access','yacc.py',389),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_dot','yacc.py',393),
  ('array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON','array_declaration',7,'p_array_declaration_with_values','yacc.py',397),
  ('value_list -> expression','value_list',1,'p_value_list','yacc.py',402),
  ('value_list -> value_list COMMA expression','value_list',3,'p_value_list','yacc.py',403),
  ('expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE','expression',7,'p_expression_new_array_with_values','yacc.py',410),
  ('static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',419),
  ('static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',420),
  ('static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',421),
  ('static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',422),
  ('static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',423),
  ('static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',424),
  ('static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',425),
  ('static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',426),
  ('main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',12,'p_main_method','yacc.py',436),
  ('main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',8,'p_main_method','yacc.py',437),
  ('main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',12,'p_main_method','yacc.py',438),
  ('main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',8,'p_main_method','yacc.py',439),
  ('class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE','class_definition',5,'p_class_definition','yacc.py',451),
  ('class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE','class_definition',5,'p_class_definition','yacc.py',452),
  ('class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE','class_definition',6,'p_class_definition','yacc.py',453),
  ('class_body -> class_member','class_body',1,'p_class_body','yacc.py',461),
  ('class_body -> class_body class_member','class_body',2,'p_class_body','yacc.py',462),
  ('class_member -> property_definition','class_member',1,'p_class_member','yacc.py',470),
  ('class_member -> method_definition','class_member',1,'p_class_member','yacc.py',471),
  ('class_member -> main_method','class_member',1,'p_class_member','yacc.py',472),
  ('class_member -> static_method','class_member',1,'p_class_member','yacc.py',473),
  ('property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE','property_definition',9,'p_property_definition','yacc.py',479),
  ('property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE','property_definition',9,'p_property_definition','yacc.py',480),
  ('method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_definition',8,'p_method_definition','yacc.py',487),
  ('method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_definition',8,'p_method_definition','yacc.py',488),
  ('statement_list -> statement','statement_list',1,'p_statement_list','yacc.py',495),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','yacc.py',496),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',504),
  ('statement -> print_statement','statement',1,'p_statement','yacc.py',505),
  ('statement -> array_declaration','statement',1,'p_statement','yacc.py',506),
  ('statement -> if_statement','statement',1,'p_statement','yacc.py',507),
  ('statement -> while_statement','statement',1,'p_statement','yacc.py',508),
  ('statement -> for_statement','statement',1,'p_statement','yacc.py',509),
  ('statement -> switch_statement','statement',1,'p_statement','yacc.py',510),
  ('statement -> array_assignment','statement',1,'p_statement','yacc.py',511),
  ('statement -> list_declaration','statement',1,'p_statement','yacc.py',512),
  ('statement -> list_add','statement',1,'p_statement','yacc.py',513),
  ('statement -> dictionary_declaration','statement',1,'p_statement','yacc.py',514),
  ('statement -> dict_assignment','statement',1,'p_statement','yacc.py',515),
  ('statement -> class_definition','statement',1,'p_statement','yacc.py',516),
  ('statement -> basic_function','statement',1,'p_statement','yacc.py',517),
  ('statement -> param_function','statement',1,'p_statement','yacc.py',518),
  ('statement -> return_function','statement',1,'p_statement','yacc.py',519),
  ('statement -> return_statement','statement',1,'p_statement','yacc.py',520),
  ('statement -> using_statement','statement',1,'p_statement','yacc.py',521),
  ('statement -> function_call_statement','statement',1,'p_statement','yacc.py',522),
]
