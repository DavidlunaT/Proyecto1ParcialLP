
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDOUBLE_PIPEleftDOUBLE_AMPERSANDleftEQUALNOT_EQUALleftLESS_THANGREATER_THANLESS_THAN_EQUALGREATER_THAN_EQUALleftPLUSMINUSleftMULTIPLYDIVIDEPERCENTrightUMINUSrightBANGABSTRACT ADD ALIAS AMPERSAND AMPERSAND_ASSIGN ARROW AS ASCENDING ASSIGN ASYNC AWAIT BANG BASE BOOL_TYPE BREAK BY BYTE CAPACITY CARET CARET_ASSIGN CASE CATCH CHAR CHAR_LITERAL CHECKED CLASS CLASS_NAME CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PAREN COLON COMMA CONSOLE CONST CONTAINS CONTINUE CONVERT COUNT DECIMAL DECREMENT DEFAULT DELEGATE DESCENDING DICTIONARY DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE DOUBLE_AMPERSAND DOUBLE_COLON DOUBLE_PIPE DOUBLE_QUESTION DYNAMIC ELSE ENUM EQUAL EQUALS EVENT EXPLICIT EXTERN FALSE FINALLY FIXED FLOAT FLOAT_TYPE FOR FOREACH FROM GET GLOBAL GOTO GREATER_THAN GREATER_THAN_EQUAL GROUP IDENTIFIER IF IMPLICIT IN INCREMENT INDEXOF INSERT INTEGER INTERFACE INTERNAL INTO INT_TYPE IS JOIN LAMBDA_ARROW LEFT_SHIFT LEFT_SHIFT_ASSIGN LESS_THAN LESS_THAN_EQUAL LET LIST LOCK LONG MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN NAMEOF NAMESPACE NEW NOTNULL NOT_EQUAL NULL NULLABLE_OPERATOR OBJECT ON OPEN_BRACE OPEN_BRACKET OPEN_PAREN OPERATOR ORDERBY OUT OVERRIDE PARAMS PARTIAL PERCENT PERCENT_ASSIGN PIPE PIPE_ASSIGN PLUS PLUS_ASSIGN PRIVATE PROTECTED PUBLIC QUESTION READLINE READONLY REF REMOVE REMOVEAT RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGN SBYTE SEALED SELECT SEMICOLON SET SHORT SIZEOF STACKALLOC STATIC STRING STRING_TYPE STRUCT SWITCH THIS THROW TILDE TOINT32 TRUE TRY TYPEOF UINT ULONG UNCHECKED UNMANAGED UNSAFE USHORT USING VALUE VAR VERBATIM_STRING VIRTUAL VOID VOLATILE WHEN WHERE WHILE WRITE WRITELINE YIELDprogram : using_statements class_declarationsusing_statements : using_statements using_statement\n    | using_statement\n    | emptyusing_statement : USING IDENTIFIER SEMICOLON\n    | USING IDENTIFIER DOT IDENTIFIER SEMICOLONclass_declarations : class_declarations class_declaration\n    | class_declarationclass_declaration : access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE\n    | CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACEaccess_modifier : PUBLIC\n    | PRIVATE\n    | PROTECTED\n    | INTERNALclass_body : class_body class_member\n    | class_member\n    | emptyclass_member : field_declaration\n    | method_declaration\n    | property_declarationproperty_declaration : access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACEproperty_accessors : GET SEMICOLON SET SEMICOLON\n    | GET SEMICOLON\n    | SET SEMICOLONfield_declaration : access_modifier type_specifier IDENTIFIER SEMICOLON\n    | access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON\n    | type_specifier IDENTIFIER SEMICOLON\n    | type_specifier IDENTIFIER ASSIGN expression SEMICOLONmethod_declaration : access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    parameter_list : parameter_list COMMA parameter\n    | parameter\n    | emptyparameter : type_specifier IDENTIFIERtype_specifier : INT_TYPE\n    | FLOAT_TYPE\n    | DOUBLE\n    | STRING_TYPE\n    | BOOL_TYPE\n    | CHAR\n    | VOID\n    | IDENTIFIER\n    | array_type\n    | generic_typearray_type : type_specifier OPEN_BRACKET CLOSE_BRACKETgeneric_type : LIST LESS_THAN type_specifier GREATER_THAN\n    | DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THANstatement_list : statement_list statement\n    | statement\n    | emptystatement : expression_statement\n    | declaration_statement\n    | assignment_statement\n    | if_statement\n    | while_statement\n    | for_statement\n    | foreach_statement\n    | return_statement\n    | block_statement\n    | print_statement\n    | input_statementblock_statement : OPEN_BRACE statement_list CLOSE_BRACEexpression_statement : expression SEMICOLONdeclaration_statement : type_specifier variable_declarator_list SEMICOLON\n    | VAR IDENTIFIER ASSIGN expression SEMICOLONvariable_declarator_list : variable_declarator_list COMMA variable_declarator\n    | variable_declaratorvariable_declarator : IDENTIFIER\n    | IDENTIFIER ASSIGN expressionassignment_statement : IDENTIFIER ASSIGN expression SEMICOLON\n    | IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON\n    | IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLONif_statement : IF OPEN_PAREN boolean_expression CLOSE_PAREN statement\n    | IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statementwhile_statement : WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statementfor_statement : FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statementfor_init : type_specifier IDENTIFIER ASSIGN expression\n    | assignment_statement\n    | emptyfor_update : assignment_statement\n    | IDENTIFIER INCREMENT\n    | IDENTIFIER DECREMENT\n    | emptyforeach_statement : FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statementreturn_statement : RETURN expression SEMICOLON\n    | RETURN SEMICOLONprint_statement : CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON\n    | CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON\n    | CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLONinput_statement : CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN\n    | CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN\n    expression : primary_expression\n    | arithmetic_expression\n    | boolean_expressionprimary_expression : literal\n    | IDENTIFIER\n    | function_call\n    | array_access\n    | member_access\n    | array_initialization\n    | input_statement\n    | TRUE\n    | FALSE\n    | OPEN_PAREN expression CLOSE_PARENarithmetic_expression : expression PLUS expression\n    | expression MINUS expression\n    | expression MULTIPLY expression\n    | expression DIVIDE expression\n    | expression PERCENT expression\n    | MINUS expression %prec UMINUSboolean_expression : expression EQUAL expression\n    | expression NOT_EQUAL expression\n    | expression LESS_THAN expression\n    | expression GREATER_THAN expression\n    | expression LESS_THAN_EQUAL expression\n    | expression GREATER_THAN_EQUAL expression\n    | boolean_expression DOUBLE_AMPERSAND boolean_expression\n    | boolean_expression DOUBLE_PIPE boolean_expression\n    | BANG boolean_expressionarray_initialization : OPEN_BRACE expression_list CLOSE_BRACE\n    | NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET\n    | NEW LIST LESS_THAN type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN\n    | NEW LIST LESS_THAN type_specifier GREATER_THAN OPEN_BRACE expression_list CLOSE_BRACEarray_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETmember_access : IDENTIFIER DOT IDENTIFIERfunction_call : IDENTIFIER OPEN_PAREN argument_list CLOSE_PARENargument_list : argument_list COMMA expression\n    | expression\n    | emptyexpression_list : expression_list COMMA expression\n    | expression\n    | emptydictionary_initializer_list : dictionary_initializer_list COMMA dictionary_initializer\n    | dictionary_initializer\n    | emptydictionary_initializer : OPEN_BRACE expression COMMA expression CLOSE_BRACEliteral : INTEGER\n    | FLOAT\n    | STRING\n    | CHAR_LITERAL\n    | NULLempty :'
    
_lr_action_items = {'USING':([0,2,3,4,7,19,46,],[5,5,-3,-4,-2,-5,-6,]),'CLASS':([0,2,3,4,6,7,8,9,11,12,13,14,16,19,46,48,57,],[-143,10,-3,-4,10,-2,-8,17,-11,-12,-13,-14,-7,-5,-6,-10,-9,]),'PUBLIC':([0,2,3,4,6,7,8,16,19,22,24,26,27,28,29,30,31,46,47,48,49,57,60,66,111,138,142,229,244,264,],[-143,11,-3,-4,11,-2,-8,-7,-5,11,11,11,-16,-17,-18,-19,-20,-6,11,-10,-15,-9,-27,-25,-28,-26,-21,-30,-31,-29,]),'PRIVATE':([0,2,3,4,6,7,8,16,19,22,24,26,27,28,29,30,31,46,47,48,49,57,60,66,111,138,142,229,244,264,],[-143,12,-3,-4,12,-2,-8,-7,-5,12,12,12,-16,-17,-18,-19,-20,-6,12,-10,-15,-9,-27,-25,-28,-26,-21,-30,-31,-29,]),'PROTECTED':([0,2,3,4,6,7,8,16,19,22,24,26,27,28,29,30,31,46,47,48,49,57,60,66,111,138,142,229,244,264,],[-143,13,-3,-4,13,-2,-8,-7,-5,13,13,13,-16,-17,-18,-19,-20,-6,13,-10,-15,-9,-27,-25,-28,-26,-21,-30,-31,-29,]),'INTERNAL':([0,2,3,4,6,7,8,16,19,22,24,26,27,28,29,30,31,46,47,48,49,57,60,66,111,138,142,229,244,264,],[-143,14,-3,-4,14,-2,-8,-7,-5,14,14,14,-16,-17,-18,-19,-20,-6,14,-10,-15,-9,-27,-25,-28,-26,-21,-30,-31,-29,]),'$end':([1,6,8,16,48,57,],[0,-1,-8,-7,-10,-9,]),'IDENTIFIER':([5,10,11,12,13,14,17,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47,49,50,51,54,55,56,59,60,61,62,66,67,68,84,85,86,92,93,96,97,98,100,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,138,141,142,166,167,168,172,173,178,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,209,212,216,218,222,223,224,225,226,228,229,230,231,233,234,235,236,238,240,242,244,245,246,247,251,252,256,257,260,261,264,270,272,274,275,276,278,279,281,282,285,287,288,289,291,294,300,301,302,307,309,310,311,316,317,318,319,322,323,],[15,18,-11,-12,-13,-14,21,23,25,25,-43,25,-16,-17,-18,-19,-20,25,52,25,-36,-37,-38,-39,-40,-41,-42,-44,-45,25,-15,58,25,63,25,25,70,-27,71,-46,-25,71,25,71,71,71,71,25,25,-47,25,139,25,71,71,150,-28,71,71,71,71,71,71,71,71,71,71,71,71,71,-26,25,-21,71,71,25,-48,187,71,187,221,-43,228,187,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,232,71,187,-91,187,71,71,250,187,-51,-43,-30,-49,-64,71,71,257,25,-87,187,71,-31,-65,221,71,-63,71,277,-43,280,-86,-29,-71,71,187,187,71,71,293,71,71,71,-66,-74,-76,71,71,-73,187,314,-90,-92,-72,-75,187,-88,-89,187,-85,-77,]),'STATIC':([11,12,13,14,22,24,26,27,28,29,30,31,32,47,49,60,66,111,138,142,229,244,264,],[-11,-12,-13,-14,34,34,34,-16,-17,-18,-19,-20,51,34,-15,-27,-25,-28,-26,-21,-30,-31,-29,]),'INT_TYPE':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,35,35,35,-16,-17,-18,-19,-20,35,35,35,-15,35,35,35,-27,-25,35,35,35,35,35,-28,-26,35,-21,35,35,35,35,35,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,35,-91,35,35,-51,-30,-49,-64,35,35,-87,35,-31,-65,-63,-86,-29,-71,35,35,-66,-74,-76,-73,35,-90,-92,-72,-75,35,-88,-89,35,-85,-77,]),'FLOAT_TYPE':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,36,36,36,-16,-17,-18,-19,-20,36,36,36,-15,36,36,36,-27,-25,36,36,36,36,36,-28,-26,36,-21,36,36,36,36,36,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,36,-91,36,36,-51,-30,-49,-64,36,36,-87,36,-31,-65,-63,-86,-29,-71,36,36,-66,-74,-76,-73,36,-90,-92,-72,-75,36,-88,-89,36,-85,-77,]),'DOUBLE':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,37,37,37,-16,-17,-18,-19,-20,37,37,37,-15,37,37,37,-27,-25,37,37,37,37,37,-28,-26,37,-21,37,37,37,37,37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,37,-91,37,37,-51,-30,-49,-64,37,37,-87,37,-31,-65,-63,-86,-29,-71,37,37,-66,-74,-76,-73,37,-90,-92,-72,-75,37,-88,-89,37,-85,-77,]),'STRING_TYPE':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,38,38,38,-16,-17,-18,-19,-20,38,38,38,-15,38,38,38,-27,-25,38,38,38,38,38,-28,-26,38,-21,38,38,38,38,38,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,38,-91,38,38,-51,-30,-49,-64,38,38,-87,38,-31,-65,-63,-86,-29,-71,38,38,-66,-74,-76,-73,38,-90,-92,-72,-75,38,-88,-89,38,-85,-77,]),'BOOL_TYPE':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,39,39,39,-16,-17,-18,-19,-20,39,39,39,-15,39,39,39,-27,-25,39,39,39,39,39,-28,-26,39,-21,39,39,39,39,39,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,39,-91,39,39,-51,-30,-49,-64,39,39,-87,39,-31,-65,-63,-86,-29,-71,39,39,-66,-74,-76,-73,39,-90,-92,-72,-75,39,-88,-89,39,-85,-77,]),'CHAR':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,40,40,40,-16,-17,-18,-19,-20,40,40,40,-15,40,40,40,-27,-25,40,40,40,40,40,-28,-26,40,-21,40,40,40,40,40,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,40,-91,40,40,-51,-30,-49,-64,40,40,-87,40,-31,-65,-63,-86,-29,-71,40,40,-66,-74,-76,-73,40,-90,-92,-72,-75,40,-88,-89,40,-85,-77,]),'VOID':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,41,41,41,-16,-17,-18,-19,-20,41,41,41,-15,41,41,41,-27,-25,41,41,41,41,41,-28,-26,41,-21,41,41,41,41,41,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,41,-91,41,41,-51,-30,-49,-64,41,41,-87,41,-31,-65,-63,-86,-29,-71,41,41,-66,-74,-76,-73,41,-90,-92,-72,-75,41,-88,-89,41,-85,-77,]),'LIST':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,44,44,44,-16,-17,-18,-19,-20,44,44,44,-15,44,44,44,-27,-25,44,133,44,44,44,-28,-26,44,-21,44,44,44,44,44,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,44,-91,44,44,-51,-30,-49,-64,44,44,-87,44,-31,-65,-63,-86,-29,-71,44,44,-66,-74,-76,-73,44,-90,-92,-72,-75,44,-88,-89,44,-85,-77,]),'DICTIONARY':([11,12,13,14,22,24,26,27,28,29,30,31,32,34,47,49,51,55,56,60,66,68,93,96,98,107,111,138,141,142,168,173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,229,230,231,235,236,238,240,244,245,251,261,264,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[-11,-12,-13,-14,45,45,45,-16,-17,-18,-19,-20,45,45,45,-15,45,45,45,-27,-25,45,45,45,45,45,-28,-26,45,-21,45,45,45,45,45,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,45,-91,45,45,-51,-30,-49,-64,45,45,-87,45,-31,-65,-63,-86,-29,-71,45,45,-66,-74,-76,-73,45,-90,-92,-72,-75,45,-88,-89,45,-85,-77,]),'SEMICOLON':([15,23,52,58,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,105,106,126,127,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,175,177,179,187,202,203,209,214,216,219,220,221,227,228,235,237,248,250,255,258,259,265,268,269,270,271,273,283,286,290,296,299,300,303,306,308,309,310,],[19,46,60,66,-97,111,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,138,143,144,-111,-120,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-118,-119,-105,-121,211,-127,-125,-97,-102,231,238,-122,-91,245,-68,-69,231,-97,-143,261,270,-126,276,-79,-80,-123,-67,-70,-71,-125,287,-124,300,302,307,310,-73,-78,317,318,-92,-72,]),'DOT':([15,71,94,95,187,210,217,228,257,314,],[20,110,134,135,224,239,243,224,279,279,]),'OPEN_BRACE':([18,21,58,61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,140,166,167,171,173,176,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,215,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[22,24,69,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,173,92,92,185,188,212,92,188,188,188,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,92,188,242,-91,188,92,92,188,-51,-49,-64,92,92,-87,188,92,-65,92,-63,92,-86,-71,92,188,188,92,92,92,92,92,-66,-74,-76,92,92,-73,188,-90,-92,-72,-75,188,-88,-89,188,-85,-77,]),'CLOSE_BRACE':([22,24,26,27,28,29,30,31,47,49,60,66,71,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,104,111,126,127,129,130,131,138,142,143,144,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,173,177,179,180,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,211,212,214,216,218,225,226,227,228,229,230,231,238,240,242,244,245,250,251,261,264,265,266,270,271,283,287,288,289,300,307,309,310,311,317,318,322,323,],[-143,-143,48,-16,-17,-18,-19,-20,57,-15,-27,-25,-97,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,-143,142,-28,-111,-120,165,-132,-133,-26,-21,-23,-24,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-118,-119,-105,-121,-143,-127,-125,-131,-143,-143,229,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-22,-143,-122,-91,244,251,-51,-132,-97,-30,-49,-64,-87,264,-143,-31,-65,-126,-63,-86,-29,-123,283,-71,-125,-124,-66,-74,-76,-73,-90,-92,-72,-75,-88,-89,-85,-77,]),'OPEN_BRACKET':([25,33,35,36,37,38,39,40,41,42,43,50,54,59,62,64,65,71,97,100,132,137,172,182,186,187,215,228,256,257,260,314,],[-43,53,-36,-37,-38,-39,-40,-41,-42,-44,-45,53,53,53,-46,53,53,109,-47,53,167,53,-48,53,53,223,-47,223,53,278,53,278,]),'GREATER_THAN':([25,35,36,37,38,39,40,41,42,43,62,64,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,97,99,125,126,127,128,130,137,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,172,177,179,180,181,182,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-43,-36,-37,-38,-39,-40,-41,-42,-44,-45,-46,97,-97,120,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,-47,120,120,-111,-95,120,120,172,120,120,-126,-106,-107,-108,-109,-110,120,120,-114,-115,-116,-117,-95,-95,-105,-121,-48,-127,-125,120,120,215,-97,-102,120,120,-122,-91,120,-97,120,120,120,-126,-95,-95,-123,120,-125,120,-124,120,-95,120,120,120,120,120,120,-92,]),'COMMA':([25,35,36,37,38,39,40,41,42,43,62,65,68,71,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,96,97,101,102,103,107,108,126,127,129,130,131,136,139,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,172,174,177,179,180,188,202,213,214,216,219,220,221,226,227,228,242,250,265,266,268,269,271,283,309,],[-43,-36,-37,-38,-39,-40,-41,-42,-44,-45,-46,98,-143,-97,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,-143,-143,-47,141,-33,-34,-143,-143,-111,-120,166,-132,-133,141,-35,141,178,-129,-130,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-118,-119,-105,-121,-48,-32,-127,-125,-131,-143,-102,-128,-122,-91,246,-68,-69,-133,-132,-97,-143,-126,-123,166,-67,-70,-125,-124,-92,]),'LESS_THAN':([44,45,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,133,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[55,56,-97,119,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,119,119,-111,-95,119,119,168,119,119,-126,-106,-107,-108,-109,-110,119,119,-114,-115,-116,-117,-95,-95,-105,-121,-127,-125,119,119,-97,-102,119,119,-122,-91,119,-97,119,119,119,-126,-95,-95,-123,119,-125,119,-124,119,-95,119,119,119,119,119,119,-92,]),'ASSIGN':([52,58,187,221,228,232,250,257,271,277,293,304,314,],[61,67,222,247,222,252,272,222,285,291,272,285,222,]),'CLOSE_BRACKET':([53,71,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,126,127,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,177,179,181,214,216,249,265,283,292,309,],[62,-97,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,-111,-120,179,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-118,-119,-105,-121,62,-127,-125,214,-122,-91,271,-123,-124,304,-92,]),'OPEN_PAREN':([58,61,63,67,70,71,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,169,170,173,178,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,207,208,209,212,215,216,218,222,223,225,226,228,230,231,233,234,238,240,242,245,247,251,252,261,262,263,267,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[68,84,96,84,107,108,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,183,184,84,84,84,108,84,84,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,233,234,235,236,84,84,241,-91,84,84,84,84,-51,108,-49,-64,84,84,-87,84,84,-65,84,-63,84,-86,281,282,284,-71,84,84,84,84,84,84,84,84,-66,-74,-76,84,84,-73,84,-90,-92,-72,-75,84,-88,-89,84,-85,-77,]),'TRUE':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,82,82,-91,82,82,82,82,-51,-49,-64,82,82,-87,82,82,-65,82,-63,82,-86,-71,82,82,82,82,82,82,82,82,-66,-74,-76,82,82,-73,82,-90,-92,-72,-75,82,-88,-89,82,-85,-77,]),'FALSE':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,83,83,-91,83,83,83,83,-51,-49,-64,83,83,-87,83,83,-65,83,-63,83,-86,-71,83,83,83,83,83,83,83,83,-66,-74,-76,83,83,-73,83,-90,-92,-72,-75,83,-88,-89,83,-85,-77,]),'MINUS':([61,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,173,177,178,179,180,181,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,209,212,213,214,216,218,222,223,225,226,227,228,230,231,233,234,237,238,240,242,245,247,248,249,250,251,252,253,254,261,265,269,270,271,272,273,274,275,276,278,281,282,283,285,286,287,288,289,290,291,292,294,295,297,299,300,301,303,305,307,309,310,311,316,317,318,319,322,323,],[85,85,-97,113,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,85,85,85,-138,-139,-140,-141,-142,85,113,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,113,-111,-95,113,113,113,113,-126,-106,-107,-108,-109,-110,113,113,113,113,113,113,-95,-95,-105,-121,85,85,85,-127,85,-125,113,113,85,-97,85,85,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,113,85,85,113,-122,-91,85,85,85,85,-51,113,-97,-49,-64,85,85,113,-87,85,85,-65,85,113,113,-126,-63,85,-95,-95,-86,-123,113,-71,-125,85,113,85,85,85,85,85,85,-124,85,113,-66,-74,-76,-95,85,113,85,113,113,113,-73,85,113,113,-90,-92,-72,-75,85,-88,-89,85,-85,-77,]),'BANG':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,86,86,-91,86,86,86,86,-51,-49,-64,86,86,-87,86,86,-65,86,-63,86,-86,-71,86,86,86,86,86,86,86,86,-66,-74,-76,86,86,-73,86,-90,-92,-72,-75,86,-88,-89,86,-85,-77,]),'INTEGER':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,87,87,-91,87,87,87,87,-51,-49,-64,87,87,-87,87,87,-65,87,-63,87,-86,-71,87,87,87,87,87,87,87,87,-66,-74,-76,87,87,-73,87,-90,-92,-72,-75,87,-88,-89,87,-85,-77,]),'FLOAT':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,88,88,-91,88,88,88,88,-51,-49,-64,88,88,-87,88,88,-65,88,-63,88,-86,-71,88,88,88,88,88,88,88,88,-66,-74,-76,88,88,-73,88,-90,-92,-72,-75,88,-88,-89,88,-85,-77,]),'STRING':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,89,89,-91,89,89,89,89,-51,-49,-64,89,89,-87,89,89,-65,89,-63,89,-86,-71,89,89,89,89,89,89,89,89,-66,-74,-76,89,89,-73,89,-90,-92,-72,-75,89,-88,-89,89,-85,-77,]),'CHAR_LITERAL':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,90,90,-91,90,90,90,90,-51,-49,-64,90,90,-87,90,90,-65,90,-63,90,-86,-71,90,90,90,90,90,90,90,90,-66,-74,-76,90,90,-73,90,-90,-92,-72,-75,90,-88,-89,90,-85,-77,]),'NULL':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,91,91,-91,91,91,91,91,-51,-49,-64,91,91,-87,91,91,-65,91,-63,91,-86,-71,91,91,91,91,91,91,91,91,-66,-74,-76,91,91,-73,91,-90,-92,-72,-75,91,-88,-89,91,-85,-77,]),'NEW':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,93,93,-91,93,93,93,93,-51,-49,-64,93,93,-87,93,93,-65,93,-63,93,-86,-71,93,93,93,93,93,93,93,93,-66,-74,-76,93,93,-73,93,-90,-92,-72,-75,93,-88,-89,93,-85,-77,]),'CONSOLE':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,184,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,210,94,217,210,210,210,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,94,210,-91,210,94,94,210,-51,-49,-64,94,94,-87,210,94,-65,94,-63,94,-86,-71,94,210,210,94,94,94,94,94,-66,-74,-76,94,94,-73,210,-90,-92,-72,-75,210,-88,-89,210,-85,-77,]),'CONVERT':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,209,212,216,218,222,223,225,226,230,231,233,234,238,240,242,245,247,251,252,261,270,272,274,275,276,278,281,282,285,287,288,289,291,294,300,301,307,309,310,311,316,317,318,319,322,323,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,95,95,-91,95,95,95,95,-51,-49,-64,95,95,-87,95,95,-65,95,-63,95,-86,-71,95,95,95,95,95,95,95,95,-66,-74,-76,95,95,-73,95,-90,-92,-72,-75,95,-88,-89,95,-85,-77,]),'CLOSE_PAREN':([68,71,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,96,101,102,103,107,108,125,126,127,136,139,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,174,177,179,183,213,214,216,241,253,254,265,270,281,283,284,295,297,298,300,302,305,309,310,312,313,315,320,321,],[-143,-97,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,-143,140,-33,-34,-143,-143,164,-111,-120,171,-35,176,177,-129,-130,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-118,-119,-105,-121,-32,-127,-125,216,-128,-122,-91,265,274,275,-123,-71,296,-124,298,306,308,309,-73,-143,316,-92,-72,319,-81,-84,-82,-83,]),'GET':([69,],[105,]),'SET':([69,143,],[106,175,]),'PLUS':([71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-97,112,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,112,112,-111,-95,112,112,112,112,-126,-106,-107,-108,-109,-110,112,112,112,112,112,112,-95,-95,-105,-121,-127,-125,112,112,-97,-102,112,112,-122,-91,112,-97,112,112,112,-126,-95,-95,-123,112,-125,112,-124,112,-95,112,112,112,112,112,112,-92,]),'MULTIPLY':([71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-97,114,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,114,114,-111,-95,114,114,114,114,-126,114,114,-108,-109,-110,114,114,114,114,114,114,-95,-95,-105,-121,-127,-125,114,114,-97,-102,114,114,-122,-91,114,-97,114,114,114,-126,-95,-95,-123,114,-125,114,-124,114,-95,114,114,114,114,114,114,-92,]),'DIVIDE':([71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-97,115,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,115,115,-111,-95,115,115,115,115,-126,115,115,-108,-109,-110,115,115,115,115,115,115,-95,-95,-105,-121,-127,-125,115,115,-97,-102,115,115,-122,-91,115,-97,115,115,115,-126,-95,-95,-123,115,-125,115,-124,115,-95,115,115,115,115,115,115,-92,]),'PERCENT':([71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-97,116,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,116,116,-111,-95,116,116,116,116,-126,116,116,-108,-109,-110,116,116,116,116,116,116,-95,-95,-105,-121,-127,-125,116,116,-97,-102,116,116,-122,-91,116,-97,116,116,116,-126,-95,-95,-123,116,-125,116,-124,116,-95,116,116,116,116,116,116,-92,]),'EQUAL':([71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-97,117,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,117,117,-111,-95,117,117,117,117,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-95,-95,-105,-121,-127,-125,117,117,-97,-102,117,117,-122,-91,117,-97,117,117,117,-126,-95,-95,-123,117,-125,117,-124,117,-95,117,117,117,117,117,117,-92,]),'NOT_EQUAL':([71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-97,118,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,118,118,-111,-95,118,118,118,118,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-95,-95,-105,-121,-127,-125,118,118,-97,-102,118,118,-122,-91,118,-97,118,118,118,-126,-95,-95,-123,118,-125,118,-124,118,-95,118,118,118,118,118,118,-92,]),'LESS_THAN_EQUAL':([71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-97,121,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,121,121,-111,-95,121,121,121,121,-126,-106,-107,-108,-109,-110,121,121,-114,-115,-116,-117,-95,-95,-105,-121,-127,-125,121,121,-97,-102,121,121,-122,-91,121,-97,121,121,121,-126,-95,-95,-123,121,-125,121,-124,121,-95,121,121,121,121,121,121,-92,]),'GREATER_THAN_EQUAL':([71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,99,125,126,127,128,130,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,180,181,187,202,203,213,214,216,227,228,237,248,249,250,253,254,265,269,271,273,283,286,290,292,295,297,299,303,305,309,],[-97,122,-93,-94,-95,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,122,122,-111,-95,122,122,122,122,-126,-106,-107,-108,-109,-110,122,122,-114,-115,-116,-117,-95,-95,-105,-121,-127,-125,122,122,-97,-102,122,122,-122,-91,122,-97,122,122,122,-126,-95,-95,-123,122,-125,122,-124,122,-95,122,122,122,122,122,122,-92,]),'DOUBLE_AMPERSAND':([71,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,126,127,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,214,216,253,254,265,283,290,309,],[-97,-93,-94,123,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,-111,-120,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-118,123,-105,-121,-127,-125,-122,-91,123,123,-123,-124,123,-92,]),'DOUBLE_PIPE':([71,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,126,127,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,177,179,214,216,253,254,265,283,290,309,],[-97,-93,-94,124,-96,-98,-99,-100,-101,-102,-103,-104,-138,-139,-140,-141,-142,-111,-120,-126,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-118,-119,-105,-121,-127,-125,-122,-91,124,124,-123,-124,124,-92,]),'READLINE':([134,239,243,],[169,169,267,]),'TOINT32':([135,],[170,]),'VAR':([173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,230,231,238,240,245,251,261,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[204,204,204,204,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,204,-91,204,204,-51,-49,-64,-87,204,-65,-63,-86,-71,204,204,-66,-74,-76,-73,204,-90,-92,-72,-75,204,-88,-89,204,-85,-77,]),'IF':([173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,230,231,238,240,245,251,261,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[205,205,205,205,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,205,-91,205,205,-51,-49,-64,-87,205,-65,-63,-86,-71,205,205,-66,-74,-76,-73,205,-90,-92,-72,-75,205,-88,-89,205,-85,-77,]),'WHILE':([173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,230,231,238,240,245,251,261,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[206,206,206,206,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,206,-91,206,206,-51,-49,-64,-87,206,-65,-63,-86,-71,206,206,-66,-74,-76,-73,206,-90,-92,-72,-75,206,-88,-89,206,-85,-77,]),'FOR':([173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,230,231,238,240,245,251,261,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[207,207,207,207,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,207,-91,207,207,-51,-49,-64,-87,207,-65,-63,-86,-71,207,207,-66,-74,-76,-73,207,-90,-92,-72,-75,207,-88,-89,207,-85,-77,]),'FOREACH':([173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,230,231,238,240,245,251,261,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[208,208,208,208,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,208,-91,208,208,-51,-49,-64,-87,208,-65,-63,-86,-71,208,208,-66,-74,-76,-73,208,-90,-92,-72,-75,208,-88,-89,208,-85,-77,]),'RETURN':([173,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,212,216,218,225,226,230,231,238,240,245,251,261,270,274,275,287,288,289,300,301,307,309,310,311,316,317,318,319,322,323,],[209,209,209,209,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,209,-91,209,209,-51,-49,-64,-87,209,-65,-63,-86,-71,209,209,-66,-74,-76,-73,209,-90,-92,-72,-75,209,-88,-89,209,-85,-77,]),'ELSE':([192,193,194,195,196,197,198,199,200,201,202,216,231,238,245,251,261,270,287,288,289,300,307,309,310,311,317,318,322,323,],[-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-91,-64,-87,-65,-63,-86,-71,-66,301,-76,-73,-90,-92,-72,-75,-88,-89,-85,-77,]),'WRITELINE':([239,],[262,]),'WRITE':([239,],[263,]),'IN':([280,],[294,]),'INCREMENT':([314,],[320,]),'DECREMENT':([314,],[321,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'using_statements':([0,],[2,]),'using_statement':([0,2,],[3,7,]),'empty':([0,22,24,68,92,96,107,108,173,185,188,212,235,242,302,],[4,28,28,103,131,103,103,148,191,191,226,191,259,131,315,]),'class_declarations':([2,],[6,]),'class_declaration':([2,6,],[8,16,]),'access_modifier':([2,6,22,24,26,47,],[9,9,32,32,32,32,]),'class_body':([22,24,],[26,47,]),'class_member':([22,24,26,47,],[27,27,49,49,]),'field_declaration':([22,24,26,47,],[29,29,29,29,]),'method_declaration':([22,24,26,47,],[30,30,30,30,]),'property_declaration':([22,24,26,47,],[31,31,31,31,]),'type_specifier':([22,24,26,32,34,47,51,55,56,68,93,96,98,107,141,168,173,185,188,189,212,218,225,235,236,240,274,275,301,316,319,],[33,33,33,50,54,33,59,64,65,100,132,100,137,100,100,182,186,186,186,186,186,186,186,256,260,186,186,186,186,186,186,]),'array_type':([22,24,26,32,34,47,51,55,56,68,93,96,98,107,141,168,173,185,188,189,212,218,225,235,236,240,274,275,301,316,319,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'generic_type':([22,24,26,32,34,47,51,55,56,68,93,96,98,107,141,168,173,185,188,189,212,218,225,235,236,240,274,275,301,316,319,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'expression':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[72,99,125,126,128,130,147,149,151,152,153,154,155,156,157,158,159,160,161,128,128,180,181,203,213,203,227,203,237,203,203,248,249,203,128,128,203,130,269,273,286,203,203,128,292,295,297,299,303,305,203,203,203,]),'primary_expression':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'arithmetic_expression':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'boolean_expression':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[75,75,75,75,127,75,75,75,75,75,75,75,75,75,75,75,75,75,75,162,163,75,75,75,75,75,75,75,75,75,75,75,75,75,253,254,75,75,75,75,75,75,75,290,75,75,75,75,75,75,75,75,75,]),'literal':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'function_call':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'array_access':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'member_access':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'array_initialization':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'input_statement':([61,67,84,85,86,92,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,166,167,173,178,185,188,189,209,212,218,222,223,225,233,234,240,242,247,252,272,274,275,276,278,281,282,285,291,294,301,316,319,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,202,81,202,202,202,81,202,202,81,81,202,81,81,202,81,81,81,81,202,202,81,81,81,81,81,81,81,202,202,202,]),'parameter_list':([68,96,107,],[101,136,145,]),'parameter':([68,96,107,141,],[102,102,102,174,]),'property_accessors':([69,],[104,]),'expression_list':([92,188,242,],[129,129,266,]),'argument_list':([108,],[146,]),'statement_list':([173,185,188,212,],[189,218,225,240,]),'statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[190,190,190,230,190,230,230,230,288,289,311,322,323,]),'expression_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[192,192,192,192,192,192,192,192,192,192,192,192,192,]),'declaration_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[193,193,193,193,193,193,193,193,193,193,193,193,193,]),'assignment_statement':([173,185,188,189,212,218,225,235,240,274,275,301,302,316,319,],[194,194,194,194,194,194,194,258,194,194,194,194,313,194,194,]),'if_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[195,195,195,195,195,195,195,195,195,195,195,195,195,]),'while_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[196,196,196,196,196,196,196,196,196,196,196,196,196,]),'for_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[197,197,197,197,197,197,197,197,197,197,197,197,197,]),'foreach_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[198,198,198,198,198,198,198,198,198,198,198,198,198,]),'return_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[199,199,199,199,199,199,199,199,199,199,199,199,199,]),'block_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[200,200,200,200,200,200,200,200,200,200,200,200,200,]),'print_statement':([173,185,188,189,212,218,225,240,274,275,301,316,319,],[201,201,201,201,201,201,201,201,201,201,201,201,201,]),'variable_declarator_list':([186,],[219,]),'variable_declarator':([186,246,],[220,268,]),'for_init':([235,],[255,]),'for_update':([302,],[312,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> using_statements class_declarations','program',2,'p_program','yacc.py',19),
  ('using_statements -> using_statements using_statement','using_statements',2,'p_using_statements','yacc.py',24),
  ('using_statements -> using_statement','using_statements',1,'p_using_statements','yacc.py',25),
  ('using_statements -> empty','using_statements',1,'p_using_statements','yacc.py',26),
  ('using_statement -> USING IDENTIFIER SEMICOLON','using_statement',3,'p_using_statement','yacc.py',34),
  ('using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON','using_statement',5,'p_using_statement','yacc.py',35),
  ('class_declarations -> class_declarations class_declaration','class_declarations',2,'p_class_declarations','yacc.py',46),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','yacc.py',47),
  ('class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE','class_declaration',6,'p_class_declaration','yacc.py',55),
  ('class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE','class_declaration',5,'p_class_declaration','yacc.py',56),
  ('access_modifier -> PUBLIC','access_modifier',1,'p_access_modifier','yacc.py',64),
  ('access_modifier -> PRIVATE','access_modifier',1,'p_access_modifier','yacc.py',65),
  ('access_modifier -> PROTECTED','access_modifier',1,'p_access_modifier','yacc.py',66),
  ('access_modifier -> INTERNAL','access_modifier',1,'p_access_modifier','yacc.py',67),
  ('class_body -> class_body class_member','class_body',2,'p_class_body','yacc.py',72),
  ('class_body -> class_member','class_body',1,'p_class_body','yacc.py',73),
  ('class_body -> empty','class_body',1,'p_class_body','yacc.py',74),
  ('class_member -> field_declaration','class_member',1,'p_class_member','yacc.py',82),
  ('class_member -> method_declaration','class_member',1,'p_class_member','yacc.py',83),
  ('class_member -> property_declaration','class_member',1,'p_class_member','yacc.py',84),
  ('property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE','property_declaration',6,'p_property_declaration','yacc.py',92),
  ('property_accessors -> GET SEMICOLON SET SEMICOLON','property_accessors',4,'p_property_accessors','yacc.py',97),
  ('property_accessors -> GET SEMICOLON','property_accessors',2,'p_property_accessors','yacc.py',98),
  ('property_accessors -> SET SEMICOLON','property_accessors',2,'p_property_accessors','yacc.py',99),
  ('field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON','field_declaration',4,'p_field_declaration','yacc.py',112),
  ('field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON','field_declaration',6,'p_field_declaration','yacc.py',113),
  ('field_declaration -> type_specifier IDENTIFIER SEMICOLON','field_declaration',3,'p_field_declaration','yacc.py',114),
  ('field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','field_declaration',5,'p_field_declaration','yacc.py',115),
  ('method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_declaration',10,'p_method_declaration','yacc.py',132),
  ('method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_declaration',9,'p_method_declaration','yacc.py',133),
  ('method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_declaration',9,'p_method_declaration','yacc.py',134),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','yacc.py',145),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','yacc.py',146),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','yacc.py',147),
  ('parameter -> type_specifier IDENTIFIER','parameter',2,'p_parameter','yacc.py',155),
  ('type_specifier -> INT_TYPE','type_specifier',1,'p_type_specifier','yacc.py',163),
  ('type_specifier -> FLOAT_TYPE','type_specifier',1,'p_type_specifier','yacc.py',164),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','yacc.py',165),
  ('type_specifier -> STRING_TYPE','type_specifier',1,'p_type_specifier','yacc.py',166),
  ('type_specifier -> BOOL_TYPE','type_specifier',1,'p_type_specifier','yacc.py',167),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','yacc.py',168),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','yacc.py',169),
  ('type_specifier -> IDENTIFIER','type_specifier',1,'p_type_specifier','yacc.py',170),
  ('type_specifier -> array_type','type_specifier',1,'p_type_specifier','yacc.py',171),
  ('type_specifier -> generic_type','type_specifier',1,'p_type_specifier','yacc.py',172),
  ('array_type -> type_specifier OPEN_BRACKET CLOSE_BRACKET','array_type',3,'p_array_type','yacc.py',177),
  ('generic_type -> LIST LESS_THAN type_specifier GREATER_THAN','generic_type',4,'p_generic_type','yacc.py',182),
  ('generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN','generic_type',6,'p_generic_type','yacc.py',183),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','yacc.py',194),
  ('statement_list -> statement','statement_list',1,'p_statement_list','yacc.py',195),
  ('statement_list -> empty','statement_list',1,'p_statement_list','yacc.py',196),
  ('statement -> expression_statement','statement',1,'p_statement','yacc.py',204),
  ('statement -> declaration_statement','statement',1,'p_statement','yacc.py',205),
  ('statement -> assignment_statement','statement',1,'p_statement','yacc.py',206),
  ('statement -> if_statement','statement',1,'p_statement','yacc.py',207),
  ('statement -> while_statement','statement',1,'p_statement','yacc.py',208),
  ('statement -> for_statement','statement',1,'p_statement','yacc.py',209),
  ('statement -> foreach_statement','statement',1,'p_statement','yacc.py',210),
  ('statement -> return_statement','statement',1,'p_statement','yacc.py',211),
  ('statement -> block_statement','statement',1,'p_statement','yacc.py',212),
  ('statement -> print_statement','statement',1,'p_statement','yacc.py',213),
  ('statement -> input_statement','statement',1,'p_statement','yacc.py',214),
  ('block_statement -> OPEN_BRACE statement_list CLOSE_BRACE','block_statement',3,'p_block_statement','yacc.py',219),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','yacc.py',224),
  ('declaration_statement -> type_specifier variable_declarator_list SEMICOLON','declaration_statement',3,'p_declaration_statement','yacc.py',232),
  ('declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON','declaration_statement',5,'p_declaration_statement','yacc.py',233),
  ('variable_declarator_list -> variable_declarator_list COMMA variable_declarator','variable_declarator_list',3,'p_variable_declarator_list','yacc.py',241),
  ('variable_declarator_list -> variable_declarator','variable_declarator_list',1,'p_variable_declarator_list','yacc.py',242),
  ('variable_declarator -> IDENTIFIER','variable_declarator',1,'p_variable_declarator','yacc.py',250),
  ('variable_declarator -> IDENTIFIER ASSIGN expression','variable_declarator',3,'p_variable_declarator','yacc.py',251),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','yacc.py',259),
  ('assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','assignment_statement',7,'p_assignment_statement','yacc.py',260),
  ('assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',6,'p_assignment_statement','yacc.py',261),
  ('if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement','if_statement',5,'p_if_statement','yacc.py',274),
  ('if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement','if_statement',7,'p_if_statement','yacc.py',275),
  ('while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement','while_statement',5,'p_while_statement','yacc.py',283),
  ('for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement','for_statement',9,'p_for_statement','yacc.py',288),
  ('for_init -> type_specifier IDENTIFIER ASSIGN expression','for_init',4,'p_for_init','yacc.py',293),
  ('for_init -> assignment_statement','for_init',1,'p_for_init','yacc.py',294),
  ('for_init -> empty','for_init',1,'p_for_init','yacc.py',295),
  ('for_update -> assignment_statement','for_update',1,'p_for_update','yacc.py',303),
  ('for_update -> IDENTIFIER INCREMENT','for_update',2,'p_for_update','yacc.py',304),
  ('for_update -> IDENTIFIER DECREMENT','for_update',2,'p_for_update','yacc.py',305),
  ('for_update -> empty','for_update',1,'p_for_update','yacc.py',306),
  ('foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement','foreach_statement',8,'p_foreach_statement','yacc.py',314),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','yacc.py',319),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','yacc.py',320),
  ('print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',331),
  ('print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',332),
  ('print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON','print_statement',6,'p_print_statement','yacc.py',333),
  ('input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN','input_statement',5,'p_input_statement','yacc.py',341),
  ('input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN','input_statement',10,'p_input_statement','yacc.py',342),
  ('expression -> primary_expression','expression',1,'p_expression','yacc.py',354),
  ('expression -> arithmetic_expression','expression',1,'p_expression','yacc.py',355),
  ('expression -> boolean_expression','expression',1,'p_expression','yacc.py',356),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','yacc.py',361),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','yacc.py',362),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','yacc.py',363),
  ('primary_expression -> array_access','primary_expression',1,'p_primary_expression','yacc.py',364),
  ('primary_expression -> member_access','primary_expression',1,'p_primary_expression','yacc.py',365),
  ('primary_expression -> array_initialization','primary_expression',1,'p_primary_expression','yacc.py',366),
  ('primary_expression -> input_statement','primary_expression',1,'p_primary_expression','yacc.py',367),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','yacc.py',368),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','yacc.py',369),
  ('primary_expression -> OPEN_PAREN expression CLOSE_PAREN','primary_expression',3,'p_primary_expression','yacc.py',370),
  ('arithmetic_expression -> expression PLUS expression','arithmetic_expression',3,'p_arithmetic_expression','yacc.py',378),
  ('arithmetic_expression -> expression MINUS expression','arithmetic_expression',3,'p_arithmetic_expression','yacc.py',379),
  ('arithmetic_expression -> expression MULTIPLY expression','arithmetic_expression',3,'p_arithmetic_expression','yacc.py',380),
  ('arithmetic_expression -> expression DIVIDE expression','arithmetic_expression',3,'p_arithmetic_expression','yacc.py',381),
  ('arithmetic_expression -> expression PERCENT expression','arithmetic_expression',3,'p_arithmetic_expression','yacc.py',382),
  ('arithmetic_expression -> MINUS expression','arithmetic_expression',2,'p_arithmetic_expression','yacc.py',383),
  ('boolean_expression -> expression EQUAL expression','boolean_expression',3,'p_boolean_expression','yacc.py',394),
  ('boolean_expression -> expression NOT_EQUAL expression','boolean_expression',3,'p_boolean_expression','yacc.py',395),
  ('boolean_expression -> expression LESS_THAN expression','boolean_expression',3,'p_boolean_expression','yacc.py',396),
  ('boolean_expression -> expression GREATER_THAN expression','boolean_expression',3,'p_boolean_expression','yacc.py',397),
  ('boolean_expression -> expression LESS_THAN_EQUAL expression','boolean_expression',3,'p_boolean_expression','yacc.py',398),
  ('boolean_expression -> expression GREATER_THAN_EQUAL expression','boolean_expression',3,'p_boolean_expression','yacc.py',399),
  ('boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression','boolean_expression',3,'p_boolean_expression','yacc.py',400),
  ('boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression','boolean_expression',3,'p_boolean_expression','yacc.py',401),
  ('boolean_expression -> BANG boolean_expression','boolean_expression',2,'p_boolean_expression','yacc.py',402),
  ('array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE','array_initialization',3,'p_array_initialization','yacc.py',413),
  ('array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET','array_initialization',5,'p_array_initialization','yacc.py',414),
  ('array_initialization -> NEW LIST LESS_THAN type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN','array_initialization',7,'p_array_initialization','yacc.py',415),
  ('array_initialization -> NEW LIST LESS_THAN type_specifier GREATER_THAN OPEN_BRACE expression_list CLOSE_BRACE','array_initialization',8,'p_array_initialization','yacc.py',416),
  ('array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','array_access',4,'p_array_access','yacc.py',430),
  ('member_access -> IDENTIFIER DOT IDENTIFIER','member_access',3,'p_member_access','yacc.py',436),
  ('function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',441),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','yacc.py',446),
  ('argument_list -> expression','argument_list',1,'p_argument_list','yacc.py',447),
  ('argument_list -> empty','argument_list',1,'p_argument_list','yacc.py',448),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','yacc.py',456),
  ('expression_list -> expression','expression_list',1,'p_expression_list','yacc.py',457),
  ('expression_list -> empty','expression_list',1,'p_expression_list','yacc.py',458),
  ('dictionary_initializer_list -> dictionary_initializer_list COMMA dictionary_initializer','dictionary_initializer_list',3,'p_dictionary_initializer_list','yacc.py',466),
  ('dictionary_initializer_list -> dictionary_initializer','dictionary_initializer_list',1,'p_dictionary_initializer_list','yacc.py',467),
  ('dictionary_initializer_list -> empty','dictionary_initializer_list',1,'p_dictionary_initializer_list','yacc.py',468),
  ('dictionary_initializer -> OPEN_BRACE expression COMMA expression CLOSE_BRACE','dictionary_initializer',5,'p_dictionary_initializer','yacc.py',476),
  ('literal -> INTEGER','literal',1,'p_literal','yacc.py',484),
  ('literal -> FLOAT','literal',1,'p_literal','yacc.py',485),
  ('literal -> STRING','literal',1,'p_literal','yacc.py',486),
  ('literal -> CHAR_LITERAL','literal',1,'p_literal','yacc.py',487),
  ('literal -> NULL','literal',1,'p_literal','yacc.py',488),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',496),
]
