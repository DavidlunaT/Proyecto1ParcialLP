
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADD ALIAS AMPERSAND AMPERSAND_ASSIGN ARROW AS ASCENDING ASSIGN ASYNC AWAIT BANG BASE BOOL_TYPE BREAK BY BYTE CARET CARET_ASSIGN CASE CATCH CHAR CHAR_LITERAL CHECKED CLASS CLASS_NAME CLOSE_BRACE CLOSE_BRACKET CLOSE_PAREN COLON COMMA CONSOLE CONST CONTINUE CONVERT DECIMAL DECREMENT DEFAULT DELEGATE DESCENDING DICTIONARY DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE DOUBLE_AMPERSAND DOUBLE_COLON DOUBLE_PIPE DOUBLE_QUESTION DYNAMIC ELSE ENUM EQUAL EQUALS EVENT EXPLICIT EXTERN FALSE FINALLY FIXED FLOAT FLOAT_TYPE FOR FOREACH FROM GET GLOBAL GOTO GREATER_THAN GREATER_THAN_EQUAL GROUP IDENTIFIER IF IMPLICIT IN INCREMENT INTEGER INTERFACE INTERNAL INTO INT_TYPE IS JOIN LAMBDA_ARROW LEFT_SHIFT LEFT_SHIFT_ASSIGN LESS_THAN LESS_THAN_EQUAL LET LIST LOCK LONG MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN NAMEOF NAMESPACE NEW NOTNULL NOT_EQUAL NULL NULLABLE_OPERATOR OBJECT ON OPEN_BRACE OPEN_BRACKET OPEN_PAREN OPERATOR ORDERBY OUT OVERRIDE PARAMS PARTIAL PERCENT PERCENT_ASSIGN PIPE PIPE_ASSIGN PLUS PLUS_ASSIGN PRIVATE PROTECTED PUBLIC QUESTION READLINE READONLY REF REMOVE RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGN SBYTE SEALED SELECT SEMICOLON SET SHORT SIZEOF STACKALLOC STATIC STRING STRING_TYPE STRUCT SWITCH THIS THROW TILDE TOINT32 TRUE TRY TYPEOF UINT ULONG UNCHECKED UNMANAGED UNSAFE USHORT USING VALUE VAR VERBATIM_STRING VIRTUAL VOID VOLATILE WHEN WHERE WHILE WRITE WRITELINE YIELDprogram : statement_list\n| emptyempty :expression : expression PLUS termexpression : expression MINUS termexpression : termexpression : IDENTIFIERexpression : function_callterm : term MULTIPLY factorterm : term DIVIDE factorterm : factorfactor : INTEGERfactor : FLOATfactor : STRINGfactor : IDENTIFIERfactor : OPEN_PAREN expression CLOSE_PARENusing_statement : USING IDENTIFIER SEMICOLON\n| USING CLASS_NAME SEMICOLONfunction_call : IDENTIFIER OPEN_PAREN CLOSE_PAREN\n| IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN\n| CLASS_NAME OPEN_PAREN CLOSE_PAREN\n| CLASS_NAME OPEN_PAREN argument_list CLOSE_PARENfunction_call_statement : function_call SEMICOLONargument_list : expression\n| argument_list COMMA expressionprint_statement : CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON\n| CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLONinput_statement : CONSOLE DOT READLINE OPEN_PAREN CLOSE_PARENexpression : input_statementconvert_statement : CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PARENassignment : IDENTIFIER ASSIGN expression SEMICOLON\n| IDENTIFIER ASSIGN convert_statement SEMICOLON\n| INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON\n| INT_TYPE multiple_var_declaration SEMICOLON\n| FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON\n| BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLONmultiple_var_declaration : IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression\n| multiple_var_declaration COMMA IDENTIFIER ASSIGN expressioncondition : expression EQUAL expression\n| expression NOT_EQUAL expression\n| expression LESS_THAN expression\n| expression GREATER_THAN expression\n| expression LESS_THAN_EQUAL expression\n| expression GREATER_THAN_EQUAL expression\n| expression EQUAL STRING\n| STRING EQUAL expressionlogical_condition : condition\n| condition DOUBLE_AMPERSAND condition\n| condition DOUBLE_PIPE conditionarray_declaration : INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON\n| STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON\narray_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETarray_assignment : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLONif_statement : IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE if_statement\n| IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE\nbasic_function : VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACElist_declaration : LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n| LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\nlist_add : IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLONwhile_statement : WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEfor_statement : FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEfor_init : INT_TYPE IDENTIFIER ASSIGN expression\n| assignment_no_semicolonassignment_no_semicolon : IDENTIFIER ASSIGN expressionfor_update : IDENTIFIER INCREMENT\n| IDENTIFIER DECREMENT\n| INCREMENT IDENTIFIER\n| DECREMENT IDENTIFIERparam_function : VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nparameter_list : parameter\n| parameter_list COMMA parameterparameter : INT_TYPE IDENTIFIER\n| STRING_TYPE IDENTIFIER\n| FLOAT_TYPE IDENTIFIERforeach_statement : FOREACH OPEN_PAREN INT_TYPE IDENTIFIER IN IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEdictionary_declaration : DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n| DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\ndictionary_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETdict_assignment : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLONswitch_statement : SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACEcase_list : case_statement\n| case_list case_statementcase_statement : CASE expression COLON statement_list BREAK SEMICOLON\n| DEFAULT COLON statement_list BREAK SEMICOLONreturn_function : INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n| STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n| FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\nreturn_statement : RETURN SEMICOLONexpression : expression OPEN_BRACKET expression CLOSE_BRACKETexpression : expression DOT IDENTIFIERarray_declaration : INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLONvalue_list : expression\n| value_list COMMA expressionexpression : NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACEparameter : INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIERexpression : OPEN_BRACE value_list CLOSE_BRACEstatic_method : STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nmain_method : STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nclass_definition : CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE\n| CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE\n| PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACEclass_body : class_member\n| class_body class_memberclass_member : property_definition\n| method_definition\n| main_method\n| static_methodproperty_definition : PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE\n| PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE\nmethod_definition : PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nstatement_list : statement\n| statement_list statementstatement : assignment\n| print_statement\n| array_declaration\n| if_statement\n| while_statement\n| for_statement\n| switch_statement\n| array_assignment\n| list_declaration\n| list_add\n| foreach_statement\n| dictionary_declaration\n| dict_assignment\n| class_definition\n| basic_function\n| param_function\n| return_function\n| return_statement\n| using_statement\n| function_call_statement'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,228,230,231,234,258,265,309,315,316,322,326,327,328,329,334,351,356,389,397,420,422,423,431,448,449,450,451,489,490,503,504,],[-3,0,-1,-2,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,-36,-37,-38,-39,-114,-115,-116,-56,-63,-96,-26,-27,-57,-64,-85,-60,-74,-73,-58,-90,-92,-91,-80,-53,-54,-59,-65,-61,-62,-81,-82,]),'IDENTIFIER':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,38,41,43,45,46,47,49,58,59,60,61,67,70,73,81,83,94,96,97,98,99,101,103,104,113,119,128,129,130,131,132,133,134,135,136,137,145,147,150,154,155,165,166,168,169,170,171,172,173,174,175,176,178,180,182,183,209,213,216,217,218,223,226,227,228,229,230,231,232,234,237,248,250,255,258,260,261,262,263,264,265,267,272,277,278,280,284,285,289,290,291,295,300,301,309,310,311,312,315,316,317,319,320,322,323,324,326,327,328,329,332,333,334,337,351,352,356,368,369,372,379,382,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[25,25,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,50,53,54,56,66,69,71,-128,74,74,74,74,74,114,74,74,-93,-23,74,74,74,-35,156,157,74,74,163,74,179,184,-17,-18,-31,201,201,74,204,-32,201,201,74,74,219,224,225,74,74,74,74,74,74,74,74,74,74,74,74,74,253,254,74,74,-33,276,-34,25,74,74,-36,25,-37,-38,25,-39,25,25,74,299,-114,302,303,304,305,307,-115,25,74,318,25,25,25,25,25,25,331,74,341,342,-116,25,25,74,-56,-63,74,25,74,-96,74,74,-26,-27,-57,-64,366,367,-85,25,-60,25,-74,25,25,25,224,224,-73,25,-58,25,25,25,25,25,25,25,25,25,-90,-92,-91,25,25,-80,25,25,461,25,25,464,25,25,25,25,25,25,-53,-54,-59,-65,25,25,25,25,25,25,-61,-62,25,25,-81,-82,]),'INT_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,60,62,63,64,70,73,80,95,96,127,128,129,130,135,185,193,194,216,218,222,223,228,229,230,231,232,234,237,248,258,265,267,278,280,282,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,347,348,349,350,351,352,356,368,369,372,389,396,397,398,399,401,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,456,463,466,468,470,485,487,488,489,490,493,494,503,504,],[26,26,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,113,117,119,121,-93,-23,138,150,-35,150,-17,-18,-31,-32,256,260,264,-33,-34,150,26,-36,26,-37,-38,26,-39,26,26,-114,-115,26,26,26,321,26,26,26,26,-116,26,26,-56,-63,26,-96,-26,-27,-57,-64,-85,26,150,150,150,150,-60,26,-74,26,26,26,-73,26,-58,26,26,429,26,26,26,26,26,26,26,-90,-92,-91,26,26,-80,26,26,26,26,26,26,26,26,26,26,-53,-54,-59,-65,474,26,26,26,26,491,26,26,-61,-62,26,26,-81,-82,]),'FLOAT_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,95,96,127,128,129,130,135,216,218,222,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,347,348,349,350,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[27,27,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,155,-35,155,-17,-18,-31,-32,-33,-34,155,27,-36,27,-37,-38,27,-39,27,27,-114,-115,27,27,27,27,27,27,27,-116,27,27,-56,-63,27,-96,-26,-27,-57,-64,-85,27,155,155,155,155,-60,27,-74,27,27,27,-73,27,-58,27,27,27,27,27,27,27,27,27,-90,-92,-91,27,27,-80,27,27,27,27,27,27,27,27,27,27,-53,-54,-59,-65,27,27,27,27,27,27,-61,-62,27,27,-81,-82,]),'STRING_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,62,64,70,73,95,96,127,128,129,130,135,186,193,216,218,222,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,286,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,347,348,349,350,351,352,356,368,369,372,389,396,397,398,399,402,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,455,463,466,468,470,486,487,488,489,490,493,494,503,504,],[28,28,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,118,120,-93,-23,154,-35,154,-17,-18,-31,-32,257,261,-33,-34,154,28,-36,28,-37,-38,28,-39,28,28,-114,-115,28,28,28,28,28,325,28,28,-116,28,28,-56,-63,28,-96,-26,-27,-57,-64,-85,28,379,382,154,154,-60,28,-74,28,28,28,-73,28,-58,28,28,430,28,28,28,28,28,28,28,-90,-92,-91,28,28,-80,28,28,28,28,28,28,28,28,28,28,-53,-54,-59,-65,473,28,28,28,28,492,28,28,-61,-62,28,28,-81,-82,]),'BOOL_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[29,29,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,29,-36,29,-37,-38,29,-39,29,29,-114,-115,29,29,29,29,29,29,29,-116,29,29,-56,-63,29,-96,-26,-27,-57,-64,-85,29,-60,29,-74,29,29,29,-73,29,-58,29,29,29,29,29,29,29,29,29,-90,-92,-91,29,29,-80,29,29,29,29,29,29,29,29,29,29,-53,-54,-59,-65,29,29,29,29,29,29,-61,-62,29,29,-81,-82,]),'CONSOLE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,46,47,49,58,59,61,67,70,73,81,83,94,96,99,101,104,128,129,130,133,135,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,216,218,223,226,227,228,229,230,231,232,234,237,248,250,258,265,267,272,278,280,284,285,289,290,295,309,310,311,312,315,316,317,319,320,322,323,324,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[30,30,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,85,85,85,85,85,85,85,-93,-23,85,85,85,-35,85,85,85,-17,-18,-31,85,-32,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-33,-34,30,85,85,-36,30,-37,-38,30,-39,30,30,85,-114,-115,30,85,30,30,30,30,30,30,85,-116,30,30,85,-56,-63,85,30,85,-96,85,85,-26,-27,-57,-64,-85,30,-60,30,-74,30,30,30,-73,30,-58,30,30,30,30,30,30,30,30,30,-90,-92,-91,30,30,-80,30,30,30,30,30,30,30,30,30,30,-53,-54,-59,-65,30,30,30,30,30,30,-61,-62,30,30,-81,-82,]),'IF':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,362,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[31,31,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,31,-36,31,-37,-38,31,-39,31,31,-114,-115,31,31,31,31,31,31,31,-116,31,31,-56,-63,31,-96,-26,-27,-57,-64,-85,31,-60,31,-74,31,31,31,31,-73,31,-58,31,31,31,31,31,31,31,31,31,-90,-92,-91,31,31,-80,31,31,31,31,31,31,31,31,31,31,-53,-54,-59,-65,31,31,31,31,31,31,-61,-62,31,31,-81,-82,]),'WHILE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[32,32,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,32,-36,32,-37,-38,32,-39,32,32,-114,-115,32,32,32,32,32,32,32,-116,32,32,-56,-63,32,-96,-26,-27,-57,-64,-85,32,-60,32,-74,32,32,32,-73,32,-58,32,32,32,32,32,32,32,32,32,-90,-92,-91,32,32,-80,32,32,32,32,32,32,32,32,32,32,-53,-54,-59,-65,32,32,32,32,32,32,-61,-62,32,32,-81,-82,]),'FOR':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[33,33,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,33,-36,33,-37,-38,33,-39,33,33,-114,-115,33,33,33,33,33,33,33,-116,33,33,-56,-63,33,-96,-26,-27,-57,-64,-85,33,-60,33,-74,33,33,33,-73,33,-58,33,33,33,33,33,33,33,33,33,-90,-92,-91,33,33,-80,33,33,33,33,33,33,33,33,33,33,-53,-54,-59,-65,33,33,33,33,33,33,-61,-62,33,33,-81,-82,]),'SWITCH':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[34,34,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,34,-36,34,-37,-38,34,-39,34,34,-114,-115,34,34,34,34,34,34,34,-116,34,34,-56,-63,34,-96,-26,-27,-57,-64,-85,34,-60,34,-74,34,34,34,-73,34,-58,34,34,34,34,34,34,34,34,34,-90,-92,-91,34,34,-80,34,34,34,34,34,34,34,34,34,34,-53,-54,-59,-65,34,34,34,34,34,34,-61,-62,34,34,-81,-82,]),'LIST':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,338,339,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[35,35,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,35,-36,35,-37,-38,35,-39,35,35,-114,-115,35,35,35,35,35,35,35,-116,35,35,-56,-63,35,-96,-26,-27,-57,-64,-85,35,370,371,-60,35,-74,35,35,35,-73,35,-58,35,35,35,35,35,35,35,35,35,-90,-92,-91,35,35,-80,35,35,35,35,35,35,35,35,35,35,-53,-54,-59,-65,35,35,35,35,35,35,-61,-62,35,35,-81,-82,]),'FOREACH':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[36,36,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,36,-36,36,-37,-38,36,-39,36,36,-114,-115,36,36,36,36,36,36,36,-116,36,36,-56,-63,36,-96,-26,-27,-57,-64,-85,36,-60,36,-74,36,36,36,-73,36,-58,36,36,36,36,36,36,36,36,36,-90,-92,-91,36,36,-80,36,36,36,36,36,36,36,36,36,36,-53,-54,-59,-65,36,36,36,36,36,36,-61,-62,36,36,-81,-82,]),'DICTIONARY':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,404,405,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[37,37,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,37,-36,37,-37,-38,37,-39,37,37,-114,-115,37,37,37,37,37,37,37,-116,37,37,-56,-63,37,-96,-26,-27,-57,-64,-85,37,-60,37,-74,37,37,37,-73,37,-58,37,37,37,432,433,37,37,37,37,37,37,-90,-92,-91,37,37,-80,37,37,37,37,37,37,37,37,37,37,-53,-54,-59,-65,37,37,37,37,37,37,-61,-62,37,37,-81,-82,]),'CLASS':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,40,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[38,38,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,68,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,38,-36,38,-37,-38,38,-39,38,38,-114,-115,38,38,38,38,38,38,38,-116,38,38,-56,-63,38,-96,-26,-27,-57,-64,-85,38,-60,38,-74,38,38,38,-73,38,-58,38,38,38,38,38,38,38,38,38,-90,-92,-91,38,38,-80,38,38,38,38,38,38,38,38,38,38,-53,-54,-59,-65,38,38,38,38,38,38,-61,-62,38,38,-81,-82,]),'PUBLIC':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,122,123,128,129,130,135,187,188,189,190,191,192,195,197,216,218,223,228,229,230,231,232,234,237,248,258,259,265,266,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,458,460,462,463,465,466,467,468,469,470,475,476,478,480,481,482,487,488,489,490,493,494,497,498,503,504,],[40,40,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,193,193,-17,-18,-31,-32,193,-117,-119,-120,-121,-122,193,193,-33,-34,40,-36,40,-37,-38,40,-39,40,40,-114,-118,-115,193,40,40,40,40,40,40,40,-116,40,40,-56,-63,40,-96,-26,-27,-57,-64,-85,40,-60,40,-74,40,40,40,-73,40,-58,40,40,40,40,40,40,40,40,40,-90,-92,-91,40,40,-80,40,40,40,40,40,40,40,40,40,40,-53,-54,-59,-65,-126,-125,-102,40,-104,40,-106,40,-108,40,-123,-124,-103,-105,-107,-109,40,40,-61,-62,40,40,-110,-112,-81,-82,]),'VOID':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,193,194,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[41,41,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,262,263,-33,-34,41,-36,41,-37,-38,41,-39,41,41,-114,-115,41,41,41,41,41,41,41,-116,41,41,-56,-63,41,-96,-26,-27,-57,-64,-85,41,-60,41,-74,41,41,41,-73,41,-58,41,41,41,41,41,41,41,41,41,-90,-92,-91,41,41,-80,41,41,41,41,41,41,41,41,41,41,-53,-54,-59,-65,41,41,41,41,41,41,-61,-62,41,41,-81,-82,]),'RETURN':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[42,42,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,42,-36,42,-37,-38,42,-39,42,42,-114,-115,42,42,320,323,324,42,42,-116,42,42,-56,-63,42,-96,-26,-27,-57,-64,-85,42,-60,42,-74,42,42,42,-73,42,-58,42,42,42,42,42,42,42,42,42,-90,-92,-91,42,42,-80,42,42,42,42,42,42,42,42,42,42,-53,-54,-59,-65,42,42,42,42,42,42,-61,-62,42,42,-81,-82,]),'USING':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,223,228,229,230,231,232,234,237,248,258,265,267,278,280,284,285,289,290,309,310,311,315,316,319,322,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[43,43,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,43,-36,43,-37,-38,43,-39,43,43,-114,-115,43,43,43,43,43,43,43,-116,43,43,-56,-63,43,-96,-26,-27,-57,-64,-85,43,-60,43,-74,43,43,43,-73,43,-58,43,43,43,43,43,43,43,43,43,-90,-92,-91,43,43,-80,43,43,43,43,43,43,43,43,43,43,-53,-54,-59,-65,43,43,43,43,43,43,-61,-62,43,43,-81,-82,]),'CLASS_NAME':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,43,45,46,47,49,58,59,61,67,68,70,73,81,83,94,96,99,101,104,128,129,130,133,135,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,216,218,223,226,227,228,229,230,231,232,234,237,248,250,258,263,264,265,267,272,278,280,284,285,289,290,295,309,310,311,312,315,316,317,319,320,322,323,324,326,327,328,329,334,337,351,352,356,368,369,372,389,396,397,398,399,403,407,409,411,414,416,418,420,422,423,425,426,431,435,437,439,440,442,443,444,445,446,447,448,449,450,451,463,466,468,470,487,488,489,490,493,494,503,504,],[39,39,-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,65,72,-128,39,39,39,39,39,39,39,126,-93,-23,39,39,39,-35,39,39,39,-17,-18,-31,39,-32,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-33,-34,39,39,39,-36,39,-37,-38,39,-39,39,39,39,-114,306,308,-115,39,39,39,39,39,39,39,39,39,-116,39,39,39,-56,-63,39,39,39,-96,39,39,-26,-27,-57,-64,-85,39,-60,39,-74,39,39,39,-73,39,-58,39,39,39,39,39,39,39,39,39,-90,-92,-91,39,39,-80,39,39,39,39,39,39,39,39,39,39,-53,-54,-59,-65,39,39,39,39,39,39,-61,-62,39,39,-81,-82,]),'CLOSE_BRACE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,74,77,78,79,84,86,87,88,91,96,124,128,129,130,135,139,140,146,187,188,189,190,191,192,195,196,200,201,202,204,205,206,208,211,216,218,228,230,231,234,258,259,265,266,269,271,289,290,293,294,309,310,314,315,316,319,322,326,327,328,329,334,335,351,352,353,356,389,390,391,393,394,397,403,420,422,423,425,426,428,431,435,437,439,442,444,446,448,449,450,451,452,457,458,459,460,462,463,465,466,467,468,469,470,475,476,478,480,481,482,489,490,493,494,497,498,503,504,],[-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-7,-6,-8,-29,-11,-12,-13,-14,-19,-35,-21,-17,-18,-31,-32,208,-97,-20,258,-117,-119,-120,-121,-122,265,-22,-4,-15,-5,-95,-9,-10,-101,-16,-33,-34,-36,-37,-38,-39,-114,-118,-115,309,-94,-98,328,329,334,-86,-116,351,-28,-56,-63,356,-96,-26,-27,-57,-64,-85,-87,-60,389,390,-74,-73,-99,420,422,423,-58,431,-90,-92,-91,450,451,-89,-80,458,460,462,465,467,469,-53,-54,-59,-65,-88,475,-126,476,-125,-102,478,-104,480,-106,481,-108,482,-123,-124,-103,-105,-107,-109,-61,-62,497,498,-110,-112,-81,-82,]),'BREAK':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,70,73,96,128,129,130,135,216,218,228,230,231,234,258,265,309,315,316,322,326,327,328,329,334,351,356,369,389,397,399,420,422,423,431,448,449,450,451,489,490,503,504,],[-127,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-128,-93,-23,-35,-17,-18,-31,-32,-33,-34,-36,-37,-38,-39,-114,-115,-116,-56,-63,-96,-26,-27,-57,-64,-85,-60,-74,400,-73,-58,427,-90,-92,-91,-80,-53,-54,-59,-65,-61,-62,-81,-82,]),'ASSIGN':([25,50,53,54,56,114,144,156,157,163,179,253,254,276,341,342,],[46,94,99,101,104,180,213,226,227,233,250,297,298,317,373,374,]),'OPEN_BRACKET':([25,26,28,74,75,77,78,79,84,86,87,88,89,91,93,109,110,116,124,138,140,142,146,148,150,158,160,161,164,196,200,201,202,203,204,205,206,208,211,214,215,235,236,240,241,242,243,244,245,246,247,251,269,271,274,281,283,292,313,314,321,325,336,355,357,359,360,379,382,390,],[47,52,55,-7,133,-6,-8,-29,-11,-12,-13,-14,133,-19,133,133,-14,133,-21,207,133,133,-20,133,220,133,133,-29,133,-22,-4,-15,-5,133,-95,-9,-10,-101,-16,133,133,133,133,133,-14,133,133,133,133,133,133,133,-94,133,133,133,133,133,133,-28,358,361,133,133,133,133,133,410,413,-99,]),'DOT':([25,30,74,75,77,78,79,82,84,85,86,87,88,89,91,93,109,110,116,124,140,142,146,148,158,160,161,164,196,200,201,202,203,204,205,206,208,211,214,215,235,236,240,241,242,243,244,245,246,247,251,269,271,274,281,283,292,313,314,336,355,357,359,360,390,],[48,57,-7,134,-6,-8,-29,141,-11,143,-12,-13,-14,134,-19,134,134,-14,134,-21,134,134,-20,134,134,134,-29,134,-22,-4,-15,-5,134,-95,-9,-10,-101,-16,134,134,134,134,134,-14,134,134,134,134,134,134,134,-94,134,134,134,134,134,134,-28,134,134,134,134,134,-99,]),'OPEN_PAREN':([25,31,32,33,34,36,39,46,47,49,50,53,54,58,59,61,67,69,74,81,83,90,94,99,101,104,105,106,131,132,133,136,137,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,210,212,213,226,227,250,272,295,302,304,305,306,307,308,312,317,320,323,324,453,454,495,496,],[49,58,59,60,61,63,67,83,83,83,95,100,102,83,83,83,83,127,49,83,83,145,83,83,83,83,165,166,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,272,273,83,83,83,83,83,83,344,346,347,348,349,350,83,83,83,83,83,471,472,499,500,]),'LESS_THAN':([35,37,74,77,78,79,84,86,87,88,91,109,110,124,146,196,200,201,202,204,205,206,208,211,269,314,370,371,390,432,433,],[62,64,-7,-6,-8,-29,-11,-12,-13,-14,-19,172,-14,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,-94,-28,401,402,-99,455,456,]),'SEMICOLON':([42,44,51,71,72,74,75,76,77,78,79,84,86,87,88,91,108,112,115,124,146,148,149,158,160,161,164,196,200,201,202,204,205,206,208,211,238,239,240,241,242,243,244,245,246,247,249,251,269,274,275,281,283,287,288,292,314,320,323,324,354,355,357,359,360,375,377,390,400,421,424,427,434,436,483,484,501,502,],[70,73,96,128,129,-7,130,135,-6,-8,-29,-11,-12,-13,-14,-19,-50,178,-67,-21,-20,216,218,228,230,231,234,-22,-4,-15,-5,-95,-9,-10,-101,-16,-51,-52,-42,-14,-43,-44,-45,-46,-47,-49,291,-68,-94,315,316,-41,322,326,327,-66,-28,70,70,70,-30,-40,391,393,394,406,408,-99,428,448,449,452,457,459,489,490,503,504,]),'NEW':([46,47,49,58,59,61,67,81,83,94,99,101,104,133,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,226,227,233,250,272,295,297,298,312,317,320,323,324,373,374,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,282,286,80,80,80,338,339,80,80,80,80,80,404,405,]),'OPEN_BRACE':([46,47,49,58,59,61,65,66,67,81,83,94,99,101,104,126,133,145,147,152,159,162,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,198,209,213,221,226,227,250,268,270,272,295,302,303,312,317,320,323,324,340,362,363,376,378,380,383,385,387,412,415,417,419,477,479,],[81,81,81,81,81,81,122,123,81,81,81,81,81,81,81,197,81,81,81,223,229,232,81,81,237,81,81,81,81,81,81,81,81,81,248,81,81,252,267,81,81,278,81,81,81,311,312,81,81,343,345,81,81,81,81,81,372,396,398,407,409,411,414,416,418,440,443,445,447,487,488,]),'CONVERT':([46,94,],[82,82,]),'INTEGER':([46,47,49,58,59,61,67,81,83,94,99,101,104,131,132,133,136,137,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,226,227,250,272,295,312,317,320,323,324,358,361,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,392,395,]),'FLOAT':([46,47,49,58,59,61,67,81,83,94,99,101,104,131,132,133,136,137,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,226,227,250,272,295,312,317,320,323,324,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'STRING':([46,47,49,58,59,61,67,81,83,94,99,101,104,131,132,133,136,137,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,226,227,250,272,295,312,317,320,323,324,],[88,88,88,110,110,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,110,110,241,88,88,88,88,88,88,110,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'ADD':([48,],[90,]),'CLOSE_PAREN':([49,67,74,77,78,79,84,86,87,88,91,92,93,95,100,102,107,108,111,116,124,125,127,142,146,151,153,196,199,200,201,202,204,205,206,208,211,214,215,219,224,225,235,236,238,239,240,241,242,243,244,245,246,247,269,273,279,299,313,314,318,330,344,346,347,348,349,350,364,365,366,367,381,384,386,388,390,461,464,471,472,499,500,],[91,124,-7,-6,-8,-29,-11,-12,-13,-14,-19,146,-24,152,159,162,167,-50,177,181,-21,196,198,211,-20,221,-75,-22,268,-4,-15,-5,-95,-9,-10,-101,-16,275,-25,-77,-78,-79,287,288,-51,-52,-42,-14,-43,-44,-45,-46,-47,-49,-94,314,-76,340,354,-28,-100,363,376,378,380,383,385,387,-69,-70,-71,-72,412,415,417,419,-99,477,479,483,484,501,502,]),'COMMA':([51,74,77,78,79,84,86,87,88,91,92,93,120,121,124,125,139,140,146,148,151,153,196,199,200,201,202,204,205,206,208,211,215,219,224,225,269,271,279,281,314,318,353,355,381,384,386,388,390,473,474,],[97,-7,-6,-8,-29,-11,-12,-13,-14,-19,147,-24,185,186,-21,147,209,-97,-20,217,222,-75,-22,222,-4,-15,-5,-95,-9,-10,-101,-16,-25,-77,-78,-79,-94,-98,-76,-41,-28,-100,209,-40,222,222,222,222,-99,485,486,]),'CLOSE_BRACKET':([52,55,74,77,78,79,84,86,87,88,89,91,124,146,196,200,201,202,203,204,205,206,207,208,211,220,269,314,358,390,392,395,410,413,],[98,103,-7,-6,-8,-29,-11,-12,-13,-14,144,-19,-21,-20,-22,-4,-15,-5,269,-95,-9,-10,270,-101,-16,277,-94,-28,270,-99,421,424,438,441,]),'WRITELINE':([57,],[105,]),'WRITE':([57,],[106,]),'PLUS':([74,75,77,78,79,84,86,87,88,89,91,93,109,110,116,124,140,142,146,148,158,160,161,164,196,200,201,202,203,204,205,206,208,211,214,215,235,236,240,241,242,243,244,245,246,247,251,269,271,274,281,283,292,313,314,336,355,357,359,360,390,],[-7,131,-6,-8,-29,-11,-12,-13,-14,131,-19,131,131,-14,131,-21,131,131,-20,131,131,131,-29,131,-22,-4,-15,-5,131,-95,-9,-10,-101,-16,131,131,131,131,131,-14,131,131,131,131,131,131,131,-94,131,131,131,131,131,131,-28,131,131,131,131,131,-99,]),'MINUS':([74,75,77,78,79,84,86,87,88,89,91,93,109,110,116,124,140,142,146,148,158,160,161,164,196,200,201,202,203,204,205,206,208,211,214,215,235,236,240,241,242,243,244,245,246,247,251,269,271,274,281,283,292,313,314,336,355,357,359,360,390,],[-7,132,-6,-8,-29,-11,-12,-13,-14,132,-19,132,132,-14,132,-21,132,132,-20,132,132,132,-29,132,-22,-4,-15,-5,132,-95,-9,-10,-101,-16,132,132,132,132,132,-14,132,132,132,132,132,132,132,-94,132,132,132,132,132,132,-28,132,132,132,132,132,-99,]),'EQUAL':([74,77,78,79,84,86,87,88,91,109,110,124,146,196,200,201,202,204,205,206,208,211,269,314,390,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,170,176,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,-94,-28,-99,]),'NOT_EQUAL':([74,77,78,79,84,86,87,88,91,109,110,124,146,196,200,201,202,204,205,206,208,211,269,314,390,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,171,-14,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,-94,-28,-99,]),'GREATER_THAN':([74,77,78,79,84,86,87,88,91,109,110,117,118,124,146,196,200,201,202,204,205,206,208,211,256,257,269,314,390,429,430,491,492,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,173,-14,182,183,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,300,301,-94,-28,-99,453,454,495,496,]),'LESS_THAN_EQUAL':([74,77,78,79,84,86,87,88,91,109,110,124,146,196,200,201,202,204,205,206,208,211,269,314,390,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,174,-14,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,-94,-28,-99,]),'GREATER_THAN_EQUAL':([74,77,78,79,84,86,87,88,91,109,110,124,146,196,200,201,202,204,205,206,208,211,269,314,390,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,175,-14,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,-94,-28,-99,]),'DOUBLE_AMPERSAND':([74,77,78,79,84,86,87,88,91,108,124,146,196,200,201,202,204,205,206,208,211,240,241,242,243,244,245,246,247,269,314,390,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,168,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,-42,-14,-43,-44,-45,-46,-47,-49,-94,-28,-99,]),'DOUBLE_PIPE':([74,77,78,79,84,86,87,88,91,108,124,146,196,200,201,202,204,205,206,208,211,240,241,242,243,244,245,246,247,269,314,390,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,169,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,-42,-14,-43,-44,-45,-46,-47,-49,-94,-28,-99,]),'COLON':([74,77,78,79,84,86,87,88,91,124,146,196,200,201,202,204,205,206,208,211,269,296,314,336,390,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,-21,-20,-22,-4,-15,-5,-95,-9,-10,-101,-16,-94,337,-28,368,-99,]),'MULTIPLY':([74,77,84,86,87,88,110,200,201,202,205,206,211,241,],[-15,136,-11,-12,-13,-14,-14,136,-15,136,-9,-10,-16,-14,]),'DIVIDE':([74,77,84,86,87,88,110,200,201,202,205,206,211,241,],[-15,137,-11,-12,-13,-14,-14,137,-15,137,-9,-10,-16,-14,]),'STATIC':([122,123,187,188,189,190,191,192,195,197,259,266,458,460,462,465,467,469,475,476,478,480,481,482,497,498,],[194,194,194,-117,-119,-120,-121,-122,194,194,-118,194,-126,-125,-102,-104,-106,-108,-123,-124,-103,-105,-107,-109,-110,-112,]),'TOINT32':([141,],[210,]),'READLINE':([143,],[212,]),'IN':([184,],[255,]),'CASE':([252,293,294,335,428,452,],[295,295,-86,-87,-89,-88,]),'DEFAULT':([252,293,294,335,428,452,],[296,296,-86,-87,-89,-88,]),'INCREMENT':([291,331,],[332,364,]),'DECREMENT':([291,331,],[333,365,]),'ELSE':([328,],[362,]),'GET':([343,345,],[375,377,]),'SET':([406,408,],[434,436,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,223,229,232,237,248,267,278,311,337,368,372,396,398,407,409,411,414,416,418,440,443,445,447,487,488,],[2,280,284,285,289,290,310,319,352,369,399,403,425,426,435,437,439,442,444,446,463,466,468,470,493,494,]),'empty':([0,],[3,]),'statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[4,45,4,4,4,4,4,4,4,45,45,45,45,45,45,4,45,4,45,4,45,4,4,4,45,45,4,4,4,4,4,4,45,45,45,45,45,4,45,4,45,4,45,4,45,45,45,45,4,4,45,45,]),'assignment':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'print_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'array_declaration':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'if_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,362,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,397,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'while_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'switch_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'array_assignment':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'list_declaration':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'list_add':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'foreach_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'dictionary_declaration':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'dict_assignment':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'class_definition':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'basic_function':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'param_function':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'return_function':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'return_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'using_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'function_call_statement':([0,2,223,229,232,237,248,267,278,280,284,285,289,290,310,311,319,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'function_call':([0,2,46,47,49,58,59,61,67,81,83,94,99,101,104,133,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,223,226,227,229,232,237,248,250,267,272,278,280,284,285,289,290,295,310,311,312,317,319,320,323,324,337,352,368,369,372,396,398,399,403,407,409,411,414,416,418,425,426,435,437,439,440,442,443,444,445,446,447,463,466,468,470,487,488,493,494,],[44,44,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,44,78,78,44,44,44,44,78,44,78,44,44,44,44,44,44,78,44,44,78,78,44,78,78,78,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'multiple_var_declaration':([26,],[51,]),'expression':([46,47,49,58,59,61,67,81,83,94,99,101,104,133,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,226,227,250,272,295,312,317,320,323,324,],[75,89,93,109,109,116,93,140,142,148,158,160,164,203,214,215,235,236,109,109,240,242,243,244,245,246,247,109,251,271,274,281,283,292,313,336,140,355,357,359,360,]),'convert_statement':([46,94,],[76,149,]),'term':([46,47,49,58,59,61,67,81,83,94,99,101,104,131,132,133,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,226,227,250,272,295,312,317,320,323,324,],[77,77,77,77,77,77,77,77,77,77,77,77,77,200,202,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'input_statement':([46,47,49,58,59,61,67,81,83,94,99,101,104,133,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,226,227,250,272,295,312,317,320,323,324,],[79,79,79,79,79,79,79,79,79,79,79,161,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'factor':([46,47,49,58,59,61,67,81,83,94,99,101,104,131,132,133,136,137,145,147,165,166,168,169,170,171,172,173,174,175,176,178,180,209,213,226,227,250,272,295,312,317,320,323,324,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,205,206,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'argument_list':([49,67,],[92,125,]),'logical_condition':([58,59,178,],[107,111,249,]),'condition':([58,59,168,169,178,],[108,108,238,239,108,]),'for_init':([60,],[112,]),'assignment_no_semicolon':([60,],[115,]),'value_list':([81,312,],[139,353,]),'parameter_list':([95,127,347,348,349,350,],[151,199,381,384,386,388,]),'parameter':([95,127,222,347,348,349,350,],[153,153,279,153,153,153,153,]),'class_body':([122,123,197,],[187,195,266,]),'class_member':([122,123,187,195,197,266,],[188,188,259,259,188,259,]),'property_definition':([122,123,187,195,197,266,],[189,189,189,189,189,189,]),'method_definition':([122,123,187,195,197,266,],[190,190,190,190,190,190,]),'main_method':([122,123,187,195,197,266,],[191,191,191,191,191,191,]),'static_method':([122,123,187,195,197,266,],[192,192,192,192,192,192,]),'case_list':([252,],[293,]),'case_statement':([252,293,],[294,335,]),'for_update':([291,],[330,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','yacc.py',13),
  ('program -> empty','program',1,'p_program','yacc.py',14),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',19),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','yacc.py',24),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','yacc.py',33),
  ('expression -> term','expression',1,'p_expression_term','yacc.py',42),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','yacc.py',47),
  ('expression -> function_call','expression',1,'p_expression_function_call','yacc.py',52),
  ('term -> term MULTIPLY factor','term',3,'p_term_times','yacc.py',58),
  ('term -> term DIVIDE factor','term',3,'p_term_div','yacc.py',66),
  ('term -> factor','term',1,'p_term_factor','yacc.py',74),
  ('factor -> INTEGER','factor',1,'p_factor_int','yacc.py',79),
  ('factor -> FLOAT','factor',1,'p_factor_float','yacc.py',84),
  ('factor -> STRING','factor',1,'p_factor_string','yacc.py',89),
  ('factor -> IDENTIFIER','factor',1,'p_factor_identifier','yacc.py',94),
  ('factor -> OPEN_PAREN expression CLOSE_PAREN','factor',3,'p_factor_expr','yacc.py',99),
  ('using_statement -> USING IDENTIFIER SEMICOLON','using_statement',3,'p_using_statement','yacc.py',108),
  ('using_statement -> USING CLASS_NAME SEMICOLON','using_statement',3,'p_using_statement','yacc.py',109),
  ('function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN','function_call',3,'p_function_call','yacc.py',115),
  ('function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',116),
  ('function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN','function_call',3,'p_function_call','yacc.py',117),
  ('function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',118),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','yacc.py',126),
  ('argument_list -> expression','argument_list',1,'p_argument_list','yacc.py',131),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','yacc.py',132),
  ('print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',141),
  ('print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',142),
  ('input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN','input_statement',5,'p_input_statement','yacc.py',148),
  ('expression -> input_statement','expression',1,'p_expression_input_statement','yacc.py',153),
  ('convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN','convert_statement',6,'p_convert_statement','yacc.py',158),
  ('assignment -> IDENTIFIER ASSIGN expression SEMICOLON','assignment',4,'p_assignment','yacc.py',164),
  ('assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON','assignment',4,'p_assignment','yacc.py',165),
  ('assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',166),
  ('assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON','assignment',5,'p_assignment','yacc.py',167),
  ('assignment -> INT_TYPE multiple_var_declaration SEMICOLON','assignment',3,'p_assignment','yacc.py',168),
  ('assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',169),
  ('assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',170),
  ('assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON','assignment',5,'p_assignment','yacc.py',171),
  ('assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',172),
  ('multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression','multiple_var_declaration',7,'p_multiple_var_declaration','yacc.py',182),
  ('multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression','multiple_var_declaration',5,'p_multiple_var_declaration','yacc.py',183),
  ('condition -> expression EQUAL expression','condition',3,'p_condition','yacc.py',192),
  ('condition -> expression NOT_EQUAL expression','condition',3,'p_condition','yacc.py',193),
  ('condition -> expression LESS_THAN expression','condition',3,'p_condition','yacc.py',194),
  ('condition -> expression GREATER_THAN expression','condition',3,'p_condition','yacc.py',195),
  ('condition -> expression LESS_THAN_EQUAL expression','condition',3,'p_condition','yacc.py',196),
  ('condition -> expression GREATER_THAN_EQUAL expression','condition',3,'p_condition','yacc.py',197),
  ('condition -> expression EQUAL STRING','condition',3,'p_condition','yacc.py',198),
  ('condition -> STRING EQUAL expression','condition',3,'p_condition','yacc.py',199),
  ('logical_condition -> condition','logical_condition',1,'p_logical_condition','yacc.py',204),
  ('logical_condition -> condition DOUBLE_AMPERSAND condition','logical_condition',3,'p_logical_condition','yacc.py',205),
  ('logical_condition -> condition DOUBLE_PIPE condition','logical_condition',3,'p_logical_condition','yacc.py',206),
  ('array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON','array_declaration',11,'p_array_declaration','yacc.py',219),
  ('array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON','array_declaration',11,'p_array_declaration','yacc.py',220),
  ('array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','array_access',4,'p_array_access','yacc.py',226),
  ('array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','array_assignment',7,'p_array_assignment','yacc.py',231),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','if_statement',7,'p_if_statement','yacc.py',237),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE if_statement','if_statement',9,'p_if_statement','yacc.py',238),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE','if_statement',11,'p_if_statement','yacc.py',239),
  ('basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','basic_function',7,'p_basic_function','yacc.py',251),
  ('list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','list_declaration',14,'p_list_declaration','yacc.py',261),
  ('list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','list_declaration',14,'p_list_declaration','yacc.py',262),
  ('list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON','list_add',7,'p_list_add','yacc.py',268),
  ('while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','while_statement',7,'p_while_statement','yacc.py',274),
  ('for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','for_statement',11,'p_for_statement','yacc.py',280),
  ('for_init -> INT_TYPE IDENTIFIER ASSIGN expression','for_init',4,'p_for_init','yacc.py',285),
  ('for_init -> assignment_no_semicolon','for_init',1,'p_for_init','yacc.py',286),
  ('assignment_no_semicolon -> IDENTIFIER ASSIGN expression','assignment_no_semicolon',3,'p_assignment_no_semicolon','yacc.py',294),
  ('for_update -> IDENTIFIER INCREMENT','for_update',2,'p_for_update','yacc.py',299),
  ('for_update -> IDENTIFIER DECREMENT','for_update',2,'p_for_update','yacc.py',300),
  ('for_update -> INCREMENT IDENTIFIER','for_update',2,'p_for_update','yacc.py',301),
  ('for_update -> DECREMENT IDENTIFIER','for_update',2,'p_for_update','yacc.py',302),
  ('param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','param_function',8,'p_param_function','yacc.py',311),
  ('param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','param_function',8,'p_param_function','yacc.py',312),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','yacc.py',318),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','yacc.py',319),
  ('parameter -> INT_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',327),
  ('parameter -> STRING_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',328),
  ('parameter -> FLOAT_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',329),
  ('foreach_statement -> FOREACH OPEN_PAREN INT_TYPE IDENTIFIER IN IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','foreach_statement',10,'p_foreach_statement','yacc.py',333),
  ('dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','dictionary_declaration',18,'p_dictionary_declaration','yacc.py',343),
  ('dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','dictionary_declaration',18,'p_dictionary_declaration','yacc.py',344),
  ('dictionary_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','dictionary_access',4,'p_dictionary_access','yacc.py',350),
  ('dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','dict_assignment',7,'p_dict_assignment','yacc.py',356),
  ('switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE','switch_statement',7,'p_switch_statement','yacc.py',362),
  ('case_list -> case_statement','case_list',1,'p_case_list','yacc.py',367),
  ('case_list -> case_list case_statement','case_list',2,'p_case_list','yacc.py',368),
  ('case_statement -> CASE expression COLON statement_list BREAK SEMICOLON','case_statement',6,'p_case_statement','yacc.py',376),
  ('case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON','case_statement',5,'p_case_statement','yacc.py',377),
  ('return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',386),
  ('return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',387),
  ('return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',388),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','yacc.py',394),
  ('expression -> expression OPEN_BRACKET expression CLOSE_BRACKET','expression',4,'p_expression_array_access','yacc.py',398),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_dot','yacc.py',402),
  ('array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON','array_declaration',7,'p_array_declaration_with_values','yacc.py',406),
  ('value_list -> expression','value_list',1,'p_value_list','yacc.py',411),
  ('value_list -> value_list COMMA expression','value_list',3,'p_value_list','yacc.py',412),
  ('expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE','expression',7,'p_expression_new_array_with_values','yacc.py',419),
  ('parameter -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER','parameter',4,'p_parameter_array','yacc.py',423),
  ('expression -> OPEN_BRACE value_list CLOSE_BRACE','expression',3,'p_expression_array_initializer_short','yacc.py',427),
  ('static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',436),
  ('static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',437),
  ('static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',438),
  ('static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',439),
  ('static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',440),
  ('static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',441),
  ('static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',442),
  ('static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',443),
  ('main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',12,'p_main_method','yacc.py',453),
  ('main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',8,'p_main_method','yacc.py',454),
  ('main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',12,'p_main_method','yacc.py',455),
  ('main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',8,'p_main_method','yacc.py',456),
  ('class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE','class_definition',5,'p_class_definition','yacc.py',468),
  ('class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE','class_definition',5,'p_class_definition','yacc.py',469),
  ('class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE','class_definition',6,'p_class_definition','yacc.py',470),
  ('class_body -> class_member','class_body',1,'p_class_body','yacc.py',478),
  ('class_body -> class_body class_member','class_body',2,'p_class_body','yacc.py',479),
  ('class_member -> property_definition','class_member',1,'p_class_member','yacc.py',487),
  ('class_member -> method_definition','class_member',1,'p_class_member','yacc.py',488),
  ('class_member -> main_method','class_member',1,'p_class_member','yacc.py',489),
  ('class_member -> static_method','class_member',1,'p_class_member','yacc.py',490),
  ('property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE','property_definition',9,'p_property_definition','yacc.py',496),
  ('property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE','property_definition',9,'p_property_definition','yacc.py',497),
  ('method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_definition',8,'p_method_definition','yacc.py',504),
  ('method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_definition',8,'p_method_definition','yacc.py',505),
  ('statement_list -> statement','statement_list',1,'p_statement_list','yacc.py',512),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','yacc.py',513),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',521),
  ('statement -> print_statement','statement',1,'p_statement','yacc.py',522),
  ('statement -> array_declaration','statement',1,'p_statement','yacc.py',523),
  ('statement -> if_statement','statement',1,'p_statement','yacc.py',524),
  ('statement -> while_statement','statement',1,'p_statement','yacc.py',525),
  ('statement -> for_statement','statement',1,'p_statement','yacc.py',526),
  ('statement -> switch_statement','statement',1,'p_statement','yacc.py',527),
  ('statement -> array_assignment','statement',1,'p_statement','yacc.py',528),
  ('statement -> list_declaration','statement',1,'p_statement','yacc.py',529),
  ('statement -> list_add','statement',1,'p_statement','yacc.py',530),
  ('statement -> foreach_statement','statement',1,'p_statement','yacc.py',531),
  ('statement -> dictionary_declaration','statement',1,'p_statement','yacc.py',532),
  ('statement -> dict_assignment','statement',1,'p_statement','yacc.py',533),
  ('statement -> class_definition','statement',1,'p_statement','yacc.py',534),
  ('statement -> basic_function','statement',1,'p_statement','yacc.py',535),
  ('statement -> param_function','statement',1,'p_statement','yacc.py',536),
  ('statement -> return_function','statement',1,'p_statement','yacc.py',537),
  ('statement -> return_statement','statement',1,'p_statement','yacc.py',538),
  ('statement -> using_statement','statement',1,'p_statement','yacc.py',539),
  ('statement -> function_call_statement','statement',1,'p_statement','yacc.py',540),
]
