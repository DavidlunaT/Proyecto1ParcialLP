
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADD ALIAS AMPERSAND AMPERSAND_ASSIGN ARROW AS ASCENDING ASSIGN ASYNC AWAIT BANG BASE BOOL_TYPE BREAK BY BYTE CARET CARET_ASSIGN CASE CATCH CHAR CHAR_LITERAL CHECKED CLASS CLASS_NAME CLOSE_BRACE CLOSE_BRACKET CLOSE_PAREN COLON COMMA CONSOLE CONST CONTINUE CONVERT DECIMAL DECREMENT DEFAULT DELEGATE DESCENDING DICTIONARY DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE DOUBLE_AMPERSAND DOUBLE_COLON DOUBLE_PIPE DOUBLE_QUESTION DYNAMIC ELSE ENUM EQUAL EQUALS EVENT EXPLICIT EXTERN FALSE FINALLY FIXED FLOAT FLOAT_TYPE FOR FOREACH FROM GET GLOBAL GOTO GREATER_THAN GREATER_THAN_EQUAL GROUP IDENTIFIER IF IMPLICIT IN INCREMENT INTEGER INTERFACE INTERNAL INTO INT_TYPE IS JOIN LAMBDA_ARROW LEFT_SHIFT LEFT_SHIFT_ASSIGN LESS_THAN LESS_THAN_EQUAL LET LIST LOCK LONG MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN NAMEOF NAMESPACE NEW NOTNULL NOT_EQUAL NULL NULLABLE_OPERATOR OBJECT ON OPEN_BRACE OPEN_BRACKET OPEN_PAREN OPERATOR ORDERBY OUT OVERRIDE PARAMS PARTIAL PERCENT PERCENT_ASSIGN PIPE PIPE_ASSIGN PLUS PLUS_ASSIGN PRIVATE PROTECTED PUBLIC QUESTION READLINE READONLY REF REMOVE RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGN SBYTE SEALED SELECT SEMICOLON SET SHORT SIZEOF STACKALLOC STATIC STRING STRING_TYPE STRUCT SWITCH THIS THROW TILDE TOINT32 TRUE TRY TYPEOF UINT ULONG UNCHECKED UNMANAGED UNSAFE USHORT USING VALUE VAR VERBATIM_STRING VIRTUAL VOID VOLATILE WHEN WHERE WHILE WRITE WRITELINE YIELDprogram : statement_list\n    | emptyempty :expression : expression PLUS termexpression : expression MINUS termexpression : termexpression : IDENTIFIERexpression : function_callterm : term MULTIPLY factorterm : term DIVIDE factorterm : factorfactor : INTEGERfactor : FLOATfactor : STRINGfactor : IDENTIFIERfactor : OPEN_PAREN expression CLOSE_PARENusing_statement : USING IDENTIFIER SEMICOLON\n    | USING CLASS_NAME SEMICOLONfunction_call : IDENTIFIER OPEN_PAREN CLOSE_PAREN\n    | IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN\n    | CLASS_NAME OPEN_PAREN CLOSE_PAREN\n    | CLASS_NAME OPEN_PAREN argument_list CLOSE_PARENfunction_call_statement : function_call SEMICOLONargument_list : expression\n    | argument_list COMMA expressionprint_statement : CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON\n    | CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLONinput_statement : CONSOLE DOT READLINE OPEN_PAREN CLOSE_PARENexpression : input_statementconvert_statement : CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PARENassignment : IDENTIFIER ASSIGN expression SEMICOLON\n    | IDENTIFIER ASSIGN convert_statement SEMICOLON\n    | INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n    | INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON\n    | INT_TYPE multiple_var_declaration SEMICOLON\n    | FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n    | STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n    | STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON\n    | BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLONmultiple_var_declaration : IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression\n    | multiple_var_declaration COMMA IDENTIFIER ASSIGN expressioncondition : expression EQUAL expression\n    | expression NOT_EQUAL expression\n    | expression LESS_THAN expression\n    | expression GREATER_THAN expression\n    | expression LESS_THAN_EQUAL expression\n    | expression GREATER_THAN_EQUAL expression\n    | expression EQUAL STRING\n    | STRING EQUAL expressionlogical_condition : condition\n    | condition DOUBLE_AMPERSAND condition\n    | condition DOUBLE_PIPE conditionarray_declaration : INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON\n    | STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON\n    array_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETarray_assignment : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLONif_statement : IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE if_statement\n    | IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE\n    basic_function : VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACElist_declaration : LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n    | LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n    list_add : IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLONwhile_statement : WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEfor_statement : FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEfor_init : INT_TYPE IDENTIFIER ASSIGN expression\n    | assignment_no_semicolonassignment_no_semicolon : IDENTIFIER ASSIGN expressionfor_update : IDENTIFIER INCREMENT\n    | IDENTIFIER DECREMENT\n    | INCREMENT IDENTIFIER\n    | DECREMENT IDENTIFIERparam_function : VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    parameter_list : parameter\n    | parameter_list COMMA parameterparameter : INT_TYPE IDENTIFIER\n    | STRING_TYPE IDENTIFIER\n    | FLOAT_TYPE IDENTIFIERdictionary_declaration : DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n    | DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n    dictionary_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETdict_assignment : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLONswitch_statement : SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACEcase_list : case_statement\n    | case_list case_statementcase_statement : CASE expression COLON statement_list BREAK SEMICOLON\n    | DEFAULT COLON statement_list BREAK SEMICOLONreturn_function : INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n    | STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n    | FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n    return_statement : RETURN SEMICOLONexpression : expression OPEN_BRACKET expression CLOSE_BRACKETexpression : expression DOT IDENTIFIERarray_declaration : INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLONvalue_list : expression\n    | value_list COMMA expressionexpression : NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACEstatic_method : STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    main_method : STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    class_definition : CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE\n    | CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE\n    | PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACEclass_body : class_member\n    | class_body class_memberclass_member : property_definition\n    | method_definition\n    | main_method\n    | static_methodproperty_definition : PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE\n    | PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE\n    method_definition : PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    | PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n    statement_list : statement\n    | statement_list statementstatement : assignment\n    | print_statement\n    | array_declaration\n    | if_statement\n    | while_statement\n    | for_statement\n    | switch_statement\n    | array_assignment\n    | list_declaration\n    | list_add\n    | dictionary_declaration\n    | dict_assignment\n    | class_definition\n    | basic_function\n    | param_function\n    | return_function\n    | return_statement\n    | using_statement\n    | function_call_statement'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,217,219,220,223,246,253,294,300,301,306,310,311,312,313,318,334,340,372,381,404,406,407,431,432,433,434,472,473,486,487,],[-3,0,-1,-2,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,-36,-37,-38,-39,-111,-112,-113,-56,-63,-95,-26,-27,-57,-64,-84,-60,-74,-73,-58,-89,-91,-90,-53,-54,-59,-65,-61,-62,-80,-81,]),'IDENTIFIER':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,36,39,41,43,44,45,47,56,57,58,59,64,67,70,79,90,92,93,94,95,97,99,100,109,123,124,125,126,127,128,129,130,131,132,138,140,143,147,148,158,159,161,162,163,164,165,166,167,168,169,171,173,175,176,203,206,207,208,212,215,216,217,218,219,220,221,223,226,237,239,246,248,249,250,251,252,253,255,259,264,266,270,271,275,276,277,281,285,286,294,295,296,297,300,301,302,303,304,306,307,308,310,311,312,313,316,317,318,321,334,335,340,352,353,362,365,372,374,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[24,24,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,48,51,52,54,63,66,68,-125,71,71,71,71,71,110,71,71,-92,-23,71,71,-35,149,150,71,71,156,71,172,-17,-18,-31,193,193,71,196,-32,193,193,71,71,209,213,214,71,71,71,71,71,71,71,71,71,71,71,71,71,242,243,71,-33,263,-34,24,71,71,-36,24,-37,-38,24,-39,24,24,71,-111,287,288,289,290,292,-112,24,71,24,24,24,24,24,24,315,71,324,325,-113,24,24,71,-56,-63,71,24,71,-95,71,71,-26,-27,-57,-64,350,351,-84,24,-60,24,-74,24,24,213,213,-73,71,24,-58,24,24,24,24,24,24,24,24,-89,-91,-90,24,24,24,24,444,24,24,447,24,24,24,24,24,24,-53,-54,-59,-65,24,24,24,24,24,24,-61,-62,24,24,-80,-81,]),'INT_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,58,60,61,67,70,77,91,92,122,123,124,125,130,177,185,186,206,208,211,212,217,218,219,220,221,223,226,237,246,253,255,264,266,268,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,330,331,332,333,334,335,340,352,353,372,380,381,382,383,385,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,439,446,449,451,453,468,470,471,472,473,476,477,486,487,],[25,25,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,109,113,116,-92,-23,133,143,-35,143,-17,-18,-31,-32,244,248,252,-33,-34,143,25,-36,25,-37,-38,25,-39,25,25,-111,-112,25,25,25,305,25,25,25,25,-113,25,25,-56,-63,25,-95,-26,-27,-57,-64,-84,25,143,143,143,143,-60,25,-74,25,25,-73,25,-58,25,25,413,25,25,25,25,25,25,-89,-91,-90,25,25,25,25,25,25,25,25,25,25,25,25,-53,-54,-59,-65,457,25,25,25,25,474,25,25,-61,-62,25,25,-80,-81,]),'FLOAT_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,91,92,122,123,124,125,130,206,208,211,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,330,331,332,333,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[26,26,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,148,-35,148,-17,-18,-31,-32,-33,-34,148,26,-36,26,-37,-38,26,-39,26,26,-111,-112,26,26,26,26,26,26,26,-113,26,26,-56,-63,26,-95,-26,-27,-57,-64,-84,26,148,148,148,148,-60,26,-74,26,26,-73,26,-58,26,26,26,26,26,26,26,26,-89,-91,-90,26,26,26,26,26,26,26,26,26,26,26,26,-53,-54,-59,-65,26,26,26,26,26,26,-61,-62,26,26,-80,-81,]),'STRING_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,60,61,67,70,91,92,122,123,124,125,130,178,185,206,208,211,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,272,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,330,331,332,333,334,335,340,352,353,372,380,381,382,383,386,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,438,446,449,451,453,469,470,471,472,473,476,477,486,487,],[27,27,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,114,115,-92,-23,147,-35,147,-17,-18,-31,-32,245,249,-33,-34,147,27,-36,27,-37,-38,27,-39,27,27,-111,-112,27,27,27,27,27,309,27,27,-113,27,27,-56,-63,27,-95,-26,-27,-57,-64,-84,27,362,365,147,147,-60,27,-74,27,27,-73,27,-58,27,27,414,27,27,27,27,27,27,-89,-91,-90,27,27,27,27,27,27,27,27,27,27,27,27,-53,-54,-59,-65,456,27,27,27,27,475,27,27,-61,-62,27,27,-80,-81,]),'BOOL_TYPE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[28,28,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,28,-36,28,-37,-38,28,-39,28,28,-111,-112,28,28,28,28,28,28,28,-113,28,28,-56,-63,28,-95,-26,-27,-57,-64,-84,28,-60,28,-74,28,28,-73,28,-58,28,28,28,28,28,28,28,28,-89,-91,-90,28,28,28,28,28,28,28,28,28,28,28,28,-53,-54,-59,-65,28,28,28,28,28,28,-61,-62,28,28,-80,-81,]),'CONSOLE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,44,45,47,56,57,59,64,67,70,79,90,92,95,97,100,123,124,125,128,130,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,206,208,212,215,216,217,218,219,220,221,223,226,237,239,246,253,255,259,264,266,270,271,275,276,281,294,295,296,297,300,301,302,303,304,306,307,308,310,311,312,313,318,321,334,335,340,352,353,372,374,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[29,29,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,81,81,81,81,81,81,81,-92,-23,81,81,-35,81,81,81,-17,-18,-31,81,-32,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-33,-34,29,81,81,-36,29,-37,-38,29,-39,29,29,81,-111,-112,29,81,29,29,29,29,29,29,81,-113,29,29,81,-56,-63,81,29,81,-95,81,81,-26,-27,-57,-64,-84,29,-60,29,-74,29,29,-73,81,29,-58,29,29,29,29,29,29,29,29,-89,-91,-90,29,29,29,29,29,29,29,29,29,29,29,29,-53,-54,-59,-65,29,29,29,29,29,29,-61,-62,29,29,-80,-81,]),'IF':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,346,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[30,30,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,30,-36,30,-37,-38,30,-39,30,30,-111,-112,30,30,30,30,30,30,30,-113,30,30,-56,-63,30,-95,-26,-27,-57,-64,-84,30,-60,30,-74,30,30,30,-73,30,-58,30,30,30,30,30,30,30,30,-89,-91,-90,30,30,30,30,30,30,30,30,30,30,30,30,-53,-54,-59,-65,30,30,30,30,30,30,-61,-62,30,30,-80,-81,]),'WHILE':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[31,31,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,31,-36,31,-37,-38,31,-39,31,31,-111,-112,31,31,31,31,31,31,31,-113,31,31,-56,-63,31,-95,-26,-27,-57,-64,-84,31,-60,31,-74,31,31,-73,31,-58,31,31,31,31,31,31,31,31,-89,-91,-90,31,31,31,31,31,31,31,31,31,31,31,31,-53,-54,-59,-65,31,31,31,31,31,31,-61,-62,31,31,-80,-81,]),'FOR':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[32,32,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,32,-36,32,-37,-38,32,-39,32,32,-111,-112,32,32,32,32,32,32,32,-113,32,32,-56,-63,32,-95,-26,-27,-57,-64,-84,32,-60,32,-74,32,32,-73,32,-58,32,32,32,32,32,32,32,32,-89,-91,-90,32,32,32,32,32,32,32,32,32,32,32,32,-53,-54,-59,-65,32,32,32,32,32,32,-61,-62,32,32,-80,-81,]),'SWITCH':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[33,33,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,33,-36,33,-37,-38,33,-39,33,33,-111,-112,33,33,33,33,33,33,33,-113,33,33,-56,-63,33,-95,-26,-27,-57,-64,-84,33,-60,33,-74,33,33,-73,33,-58,33,33,33,33,33,33,33,33,-89,-91,-90,33,33,33,33,33,33,33,33,33,33,33,33,-53,-54,-59,-65,33,33,33,33,33,33,-61,-62,33,33,-80,-81,]),'LIST':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,322,323,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[34,34,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,34,-36,34,-37,-38,34,-39,34,34,-111,-112,34,34,34,34,34,34,34,-113,34,34,-56,-63,34,-95,-26,-27,-57,-64,-84,34,354,355,-60,34,-74,34,34,-73,34,-58,34,34,34,34,34,34,34,34,-89,-91,-90,34,34,34,34,34,34,34,34,34,34,34,34,-53,-54,-59,-65,34,34,34,34,34,34,-61,-62,34,34,-80,-81,]),'DICTIONARY':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,387,388,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[35,35,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,35,-36,35,-37,-38,35,-39,35,35,-111,-112,35,35,35,35,35,35,35,-113,35,35,-56,-63,35,-95,-26,-27,-57,-64,-84,35,-60,35,-74,35,35,-73,35,-58,35,35,415,416,35,35,35,35,35,35,-89,-91,-90,35,35,35,35,35,35,35,35,35,35,35,35,-53,-54,-59,-65,35,35,35,35,35,35,-61,-62,35,35,-80,-81,]),'CLASS':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,38,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[36,36,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,65,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,36,-36,36,-37,-38,36,-39,36,36,-111,-112,36,36,36,36,36,36,36,-113,36,36,-56,-63,36,-95,-26,-27,-57,-64,-84,36,-60,36,-74,36,36,-73,36,-58,36,36,36,36,36,36,36,36,-89,-91,-90,36,36,36,36,36,36,36,36,36,36,36,36,-53,-54,-59,-65,36,36,36,36,36,36,-61,-62,36,36,-80,-81,]),'PUBLIC':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,117,118,123,124,125,130,179,180,181,182,183,184,187,189,206,208,212,217,218,219,220,221,223,226,237,246,247,253,254,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,441,443,445,446,448,449,450,451,452,453,458,459,461,463,464,465,470,471,472,473,476,477,480,481,486,487,],[38,38,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,185,185,-17,-18,-31,-32,185,-114,-116,-117,-118,-119,185,185,-33,-34,38,-36,38,-37,-38,38,-39,38,38,-111,-115,-112,185,38,38,38,38,38,38,38,-113,38,38,-56,-63,38,-95,-26,-27,-57,-64,-84,38,-60,38,-74,38,38,-73,38,-58,38,38,38,38,38,38,38,38,-89,-91,-90,38,38,38,38,38,38,38,38,38,38,38,38,-53,-54,-59,-65,-123,-122,-99,38,-101,38,-103,38,-105,38,-120,-121,-100,-102,-104,-106,38,38,-61,-62,38,38,-107,-109,-80,-81,]),'VOID':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,185,186,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[39,39,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,250,251,-33,-34,39,-36,39,-37,-38,39,-39,39,39,-111,-112,39,39,39,39,39,39,39,-113,39,39,-56,-63,39,-95,-26,-27,-57,-64,-84,39,-60,39,-74,39,39,-73,39,-58,39,39,39,39,39,39,39,39,-89,-91,-90,39,39,39,39,39,39,39,39,39,39,39,39,-53,-54,-59,-65,39,39,39,39,39,39,-61,-62,39,39,-80,-81,]),'RETURN':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[40,40,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,40,-36,40,-37,-38,40,-39,40,40,-111,-112,40,40,304,307,308,40,40,-113,40,40,-56,-63,40,-95,-26,-27,-57,-64,-84,40,-60,40,-74,40,40,-73,40,-58,40,40,40,40,40,40,40,40,-89,-91,-90,40,40,40,40,40,40,40,40,40,40,40,40,-53,-54,-59,-65,40,40,40,40,40,40,-61,-62,40,40,-80,-81,]),'USING':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,212,217,218,219,220,221,223,226,237,246,253,255,264,266,270,271,275,276,294,295,296,300,301,303,306,310,311,312,313,318,321,334,335,340,352,353,372,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[41,41,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,41,-36,41,-37,-38,41,-39,41,41,-111,-112,41,41,41,41,41,41,41,-113,41,41,-56,-63,41,-95,-26,-27,-57,-64,-84,41,-60,41,-74,41,41,-73,41,-58,41,41,41,41,41,41,41,41,-89,-91,-90,41,41,41,41,41,41,41,41,41,41,41,41,-53,-54,-59,-65,41,41,41,41,41,41,-61,-62,41,41,-80,-81,]),'CLASS_NAME':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,36,41,43,44,45,47,56,57,59,64,65,67,70,79,90,92,95,97,100,123,124,125,128,130,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,206,208,212,215,216,217,218,219,220,221,223,226,237,239,246,251,252,253,255,259,264,266,270,271,275,276,281,294,295,296,297,300,301,302,303,304,306,307,308,310,311,312,313,318,321,334,335,340,352,353,372,374,380,381,382,383,390,392,394,397,399,401,404,406,407,409,410,418,420,422,423,425,426,427,428,429,430,431,432,433,434,446,449,451,453,470,471,472,473,476,477,486,487,],[37,37,-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,62,69,-125,37,37,37,37,37,37,37,121,-92,-23,37,37,-35,37,37,37,-17,-18,-31,37,-32,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-33,-34,37,37,37,-36,37,-37,-38,37,-39,37,37,37,-111,291,293,-112,37,37,37,37,37,37,37,37,37,-113,37,37,37,-56,-63,37,37,37,-95,37,37,-26,-27,-57,-64,-84,37,-60,37,-74,37,37,-73,37,37,-58,37,37,37,37,37,37,37,37,-89,-91,-90,37,37,37,37,37,37,37,37,37,37,37,37,-53,-54,-59,-65,37,37,37,37,37,37,-61,-62,37,37,-80,-81,]),'CLOSE_BRACE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,71,74,75,76,80,82,83,84,87,92,119,123,124,125,130,139,179,180,181,182,183,184,187,188,192,193,194,196,197,198,201,206,208,217,219,220,223,246,247,253,254,257,275,276,279,280,294,295,299,300,301,303,306,310,311,312,313,318,319,334,335,336,337,340,372,373,375,377,378,381,403,404,406,407,409,410,412,418,420,422,425,427,429,431,432,433,434,435,440,441,442,443,445,446,448,449,450,451,452,453,458,459,461,463,464,465,472,473,476,477,480,481,486,487,],[-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-7,-6,-8,-29,-11,-12,-13,-14,-19,-35,-21,-17,-18,-31,-32,-20,246,-114,-116,-117,-118,-119,253,-22,-4,-15,-5,-94,-9,-10,-16,-33,-34,-36,-37,-38,-39,-111,-115,-112,294,-93,312,313,318,-85,-113,334,-28,-56,-63,340,-95,-26,-27,-57,-64,-84,-86,-60,372,373,-96,-74,-73,-98,404,406,407,-58,-97,-89,-91,-90,433,434,-88,441,443,445,448,450,452,-53,-54,-59,-65,-87,458,-123,459,-122,-99,461,-101,463,-103,464,-105,465,-120,-121,-100,-102,-104,-106,-61,-62,480,481,-107,-109,-80,-81,]),'BREAK':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,43,67,70,92,123,124,125,130,206,208,217,219,220,223,246,253,294,300,301,306,310,311,312,313,318,334,340,353,372,381,383,404,406,407,431,432,433,434,472,473,486,487,],[-124,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-125,-92,-23,-35,-17,-18,-31,-32,-33,-34,-36,-37,-38,-39,-111,-112,-113,-56,-63,-95,-26,-27,-57,-64,-84,-60,-74,384,-73,-58,411,-89,-91,-90,-53,-54,-59,-65,-61,-62,-80,-81,]),'ASSIGN':([24,48,51,52,54,110,137,149,150,156,172,242,243,263,324,325,],[44,90,95,97,100,173,203,215,216,222,239,283,284,302,356,357,]),'OPEN_BRACKET':([24,25,27,71,72,74,75,76,80,82,83,84,85,87,89,105,106,112,119,133,135,139,141,151,153,154,157,188,192,193,194,195,196,197,198,201,204,205,224,225,229,230,231,232,233,234,235,236,240,257,261,267,269,278,298,299,305,309,320,337,339,341,343,344,362,365,373,403,],[45,50,53,-7,128,-6,-8,-29,-11,-12,-13,-14,128,-19,128,128,-14,128,-21,199,128,-20,128,128,128,-29,128,-22,-4,-15,-5,128,-94,-9,-10,-16,128,128,128,128,128,-14,128,128,128,128,128,128,128,-93,128,128,128,128,128,-28,342,345,128,128,128,128,128,128,393,396,-98,128,]),'DOT':([24,29,71,72,74,75,76,78,80,81,82,83,84,85,87,89,105,106,112,119,135,139,141,151,153,154,157,188,192,193,194,195,196,197,198,201,204,205,224,225,229,230,231,232,233,234,235,236,240,257,261,267,269,278,298,299,320,337,339,341,343,344,373,403,],[46,55,-7,129,-6,-8,-29,134,-11,136,-12,-13,-14,129,-19,129,129,-14,129,-21,129,-20,129,129,129,-29,129,-22,-4,-15,-5,129,-94,-9,-10,-16,129,129,129,129,129,-14,129,129,129,129,129,129,129,-93,129,129,129,129,129,-28,129,129,129,129,129,129,-98,129,]),'OPEN_PAREN':([24,30,31,32,33,37,44,45,47,48,51,52,56,57,59,64,66,71,79,86,90,95,97,100,101,102,126,127,128,131,132,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,200,202,203,215,216,239,259,281,287,289,290,291,292,293,297,302,304,307,308,374,436,437,478,479,],[47,56,57,58,59,64,79,79,79,91,96,98,79,79,79,79,122,47,79,138,79,79,79,79,158,159,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,259,260,79,79,79,79,79,79,327,329,330,331,332,333,79,79,79,79,79,79,454,455,482,483,]),'LESS_THAN':([34,35,71,74,75,76,80,82,83,84,87,105,106,119,139,188,192,193,194,196,197,198,201,257,299,354,355,373,415,416,],[60,61,-7,-6,-8,-29,-11,-12,-13,-14,-19,165,-14,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,-93,-28,385,386,-98,438,439,]),'SEMICOLON':([40,42,49,68,69,71,72,73,74,75,76,80,82,83,84,87,104,108,111,119,139,141,142,151,153,154,157,188,192,193,194,196,197,198,201,227,228,229,230,231,232,233,234,235,236,238,240,257,261,262,267,269,273,274,278,299,304,307,308,338,339,341,343,344,358,360,373,384,405,408,411,417,419,466,467,484,485,],[67,70,92,123,124,-7,125,130,-6,-8,-29,-11,-12,-13,-14,-19,-50,171,-67,-21,-20,206,208,217,219,220,223,-22,-4,-15,-5,-94,-9,-10,-16,-51,-52,-42,-14,-43,-44,-45,-46,-47,-49,277,-68,-93,300,301,-41,306,310,311,-66,-28,67,67,67,-30,-40,375,377,378,389,391,-98,412,431,432,435,440,442,472,473,486,487,]),'NEW':([44,45,47,56,57,59,64,79,90,95,97,100,128,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,215,216,222,239,259,281,283,284,297,302,304,307,308,356,357,374,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,268,272,77,77,77,322,323,77,77,77,77,77,387,388,77,]),'CONVERT':([44,90,],[78,78,]),'INTEGER':([44,45,47,56,57,59,64,79,90,95,97,100,126,127,128,131,132,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,215,216,239,259,281,297,302,304,307,308,342,345,374,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,376,379,82,]),'FLOAT':([44,45,47,56,57,59,64,79,90,95,97,100,126,127,128,131,132,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,215,216,239,259,281,297,302,304,307,308,374,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'STRING':([44,45,47,56,57,59,64,79,90,95,97,100,126,127,128,131,132,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,215,216,239,259,281,297,302,304,307,308,374,],[84,84,84,106,106,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,106,106,230,84,84,84,84,84,84,106,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'ADD':([46,],[86,]),'CLOSE_PAREN':([47,64,71,74,75,76,80,82,83,84,87,88,89,91,96,98,103,104,107,112,119,120,122,135,139,144,146,188,191,192,193,194,196,197,198,201,204,205,209,213,214,224,225,227,228,229,230,231,232,233,234,235,236,257,260,265,298,299,314,327,329,330,331,332,333,348,349,350,351,364,367,369,371,373,444,447,454,455,482,483,],[87,119,-7,-6,-8,-29,-11,-12,-13,-14,-19,139,-24,145,152,155,160,-50,170,174,-21,188,190,201,-20,210,-75,-22,256,-4,-15,-5,-94,-9,-10,-16,262,-25,-77,-78,-79,273,274,-51,-52,-42,-14,-43,-44,-45,-46,-47,-49,-93,299,-76,338,-28,347,359,361,363,366,368,370,-69,-70,-71,-72,395,398,400,402,-98,460,462,466,467,484,485,]),'COMMA':([49,71,74,75,76,80,82,83,84,87,88,89,115,116,119,120,139,141,144,146,188,191,192,193,194,196,197,198,201,205,209,213,214,257,265,267,299,336,337,339,364,367,369,371,373,403,456,457,],[93,-7,-6,-8,-29,-11,-12,-13,-14,-19,140,-24,177,178,-21,140,-20,207,211,-75,-22,211,-4,-15,-5,-94,-9,-10,-16,-25,-77,-78,-79,-93,-76,-41,-28,374,-96,-40,211,211,211,211,-98,-97,468,469,]),'CLOSE_BRACKET':([50,53,71,74,75,76,80,82,83,84,85,87,119,139,188,192,193,194,195,196,197,198,199,201,257,299,342,373,376,379,393,396,],[94,99,-7,-6,-8,-29,-11,-12,-13,-14,137,-19,-21,-20,-22,-4,-15,-5,257,-94,-9,-10,258,-16,-93,-28,258,-98,405,408,421,424,]),'WRITELINE':([55,],[101,]),'WRITE':([55,],[102,]),'OPEN_BRACE':([62,63,121,145,152,155,160,170,174,190,210,256,258,287,288,346,347,359,361,363,366,368,370,395,398,400,402,460,462,],[117,118,189,212,218,221,226,237,241,255,264,296,297,326,328,380,382,390,392,394,397,399,401,423,426,428,430,470,471,]),'PLUS':([71,72,74,75,76,80,82,83,84,85,87,89,105,106,112,119,135,139,141,151,153,154,157,188,192,193,194,195,196,197,198,201,204,205,224,225,229,230,231,232,233,234,235,236,240,257,261,267,269,278,298,299,320,337,339,341,343,344,373,403,],[-7,126,-6,-8,-29,-11,-12,-13,-14,126,-19,126,126,-14,126,-21,126,-20,126,126,126,-29,126,-22,-4,-15,-5,126,-94,-9,-10,-16,126,126,126,126,126,-14,126,126,126,126,126,126,126,-93,126,126,126,126,126,-28,126,126,126,126,126,126,-98,126,]),'MINUS':([71,72,74,75,76,80,82,83,84,85,87,89,105,106,112,119,135,139,141,151,153,154,157,188,192,193,194,195,196,197,198,201,204,205,224,225,229,230,231,232,233,234,235,236,240,257,261,267,269,278,298,299,320,337,339,341,343,344,373,403,],[-7,127,-6,-8,-29,-11,-12,-13,-14,127,-19,127,127,-14,127,-21,127,-20,127,127,127,-29,127,-22,-4,-15,-5,127,-94,-9,-10,-16,127,127,127,127,127,-14,127,127,127,127,127,127,127,-93,127,127,127,127,127,-28,127,127,127,127,127,127,-98,127,]),'EQUAL':([71,74,75,76,80,82,83,84,87,105,106,119,139,188,192,193,194,196,197,198,201,257,299,373,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,163,169,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,-93,-28,-98,]),'NOT_EQUAL':([71,74,75,76,80,82,83,84,87,105,106,119,139,188,192,193,194,196,197,198,201,257,299,373,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,164,-14,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,-93,-28,-98,]),'GREATER_THAN':([71,74,75,76,80,82,83,84,87,105,106,113,114,119,139,188,192,193,194,196,197,198,201,244,245,257,299,373,413,414,474,475,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,166,-14,175,176,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,285,286,-93,-28,-98,436,437,478,479,]),'LESS_THAN_EQUAL':([71,74,75,76,80,82,83,84,87,105,106,119,139,188,192,193,194,196,197,198,201,257,299,373,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,167,-14,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,-93,-28,-98,]),'GREATER_THAN_EQUAL':([71,74,75,76,80,82,83,84,87,105,106,119,139,188,192,193,194,196,197,198,201,257,299,373,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,168,-14,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,-93,-28,-98,]),'DOUBLE_AMPERSAND':([71,74,75,76,80,82,83,84,87,104,119,139,188,192,193,194,196,197,198,201,229,230,231,232,233,234,235,236,257,299,373,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,161,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,-42,-14,-43,-44,-45,-46,-47,-49,-93,-28,-98,]),'DOUBLE_PIPE':([71,74,75,76,80,82,83,84,87,104,119,139,188,192,193,194,196,197,198,201,229,230,231,232,233,234,235,236,257,299,373,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,162,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,-42,-14,-43,-44,-45,-46,-47,-49,-93,-28,-98,]),'COLON':([71,74,75,76,80,82,83,84,87,119,139,188,192,193,194,196,197,198,201,257,282,299,320,373,],[-7,-6,-8,-29,-11,-12,-13,-14,-19,-21,-20,-22,-4,-15,-5,-94,-9,-10,-16,-93,321,-28,352,-98,]),'MULTIPLY':([71,74,80,82,83,84,106,192,193,194,197,198,201,230,],[-15,131,-11,-12,-13,-14,-14,131,-15,131,-9,-10,-16,-14,]),'DIVIDE':([71,74,80,82,83,84,106,192,193,194,197,198,201,230,],[-15,132,-11,-12,-13,-14,-14,132,-15,132,-9,-10,-16,-14,]),'STATIC':([117,118,179,180,181,182,183,184,187,189,247,254,441,443,445,448,450,452,458,459,461,463,464,465,480,481,],[186,186,186,-114,-116,-117,-118,-119,186,186,-115,186,-123,-122,-99,-101,-103,-105,-120,-121,-100,-102,-104,-106,-107,-109,]),'TOINT32':([134,],[200,]),'READLINE':([136,],[202,]),'CASE':([241,279,280,319,412,435,],[281,281,-85,-86,-88,-87,]),'DEFAULT':([241,279,280,319,412,435,],[282,282,-85,-86,-88,-87,]),'INCREMENT':([277,315,],[316,348,]),'DECREMENT':([277,315,],[317,349,]),'ELSE':([312,],[346,]),'GET':([326,328,],[358,360,]),'SET':([389,391,],[417,419,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,212,218,221,226,237,255,264,296,321,352,380,382,390,392,394,397,399,401,423,426,428,430,470,471,],[2,266,270,271,275,276,295,303,335,353,383,409,410,418,420,422,425,427,429,446,449,451,453,476,477,]),'empty':([0,],[3,]),'statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[4,43,4,4,4,4,4,4,4,43,43,43,43,43,43,4,43,4,43,4,43,4,4,43,4,4,4,4,4,4,43,43,43,43,43,4,43,4,43,4,43,4,43,43,43,43,4,4,43,43,]),'assignment':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'print_statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'array_declaration':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'if_statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,346,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,381,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'while_statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'switch_statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'array_assignment':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'list_declaration':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'list_add':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'dictionary_declaration':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'dict_assignment':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'class_definition':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'basic_function':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'param_function':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'return_function':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'return_statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'using_statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'function_call_statement':([0,2,212,218,221,226,237,255,264,266,270,271,275,276,295,296,303,321,335,352,353,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'function_call':([0,2,44,45,47,56,57,59,64,79,90,95,97,100,128,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,212,215,216,218,221,226,237,239,255,259,264,266,270,271,275,276,281,295,296,297,302,303,304,307,308,321,335,352,353,374,380,382,383,390,392,394,397,399,401,409,410,418,420,422,423,425,426,427,428,429,430,446,449,451,453,470,471,476,477,],[42,42,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,42,75,75,42,42,42,42,75,42,75,42,42,42,42,42,42,75,42,42,75,75,42,75,75,75,42,42,42,42,75,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'multiple_var_declaration':([25,],[49,]),'expression':([44,45,47,56,57,59,64,79,90,95,97,100,128,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,215,216,239,259,281,297,302,304,307,308,374,],[72,85,89,105,105,112,89,135,141,151,153,157,195,204,205,224,225,105,105,229,231,232,233,234,235,236,105,240,261,267,269,278,298,320,337,339,341,343,344,403,]),'convert_statement':([44,90,],[73,142,]),'term':([44,45,47,56,57,59,64,79,90,95,97,100,126,127,128,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,215,216,239,259,281,297,302,304,307,308,374,],[74,74,74,74,74,74,74,74,74,74,74,74,192,194,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'input_statement':([44,45,47,56,57,59,64,79,90,95,97,100,128,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,215,216,239,259,281,297,302,304,307,308,374,],[76,76,76,76,76,76,76,76,76,76,154,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'factor':([44,45,47,56,57,59,64,79,90,95,97,100,126,127,128,131,132,138,140,158,159,161,162,163,164,165,166,167,168,169,171,173,203,215,216,239,259,281,297,302,304,307,308,374,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,197,198,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'argument_list':([47,64,],[88,120,]),'logical_condition':([56,57,171,],[103,107,238,]),'condition':([56,57,161,162,171,],[104,104,227,228,104,]),'for_init':([58,],[108,]),'assignment_no_semicolon':([58,],[111,]),'parameter_list':([91,122,330,331,332,333,],[144,191,364,367,369,371,]),'parameter':([91,122,211,330,331,332,333,],[146,146,265,146,146,146,146,]),'class_body':([117,118,189,],[179,187,254,]),'class_member':([117,118,179,187,189,254,],[180,180,247,247,180,247,]),'property_definition':([117,118,179,187,189,254,],[181,181,181,181,181,181,]),'method_definition':([117,118,179,187,189,254,],[182,182,182,182,182,182,]),'main_method':([117,118,179,187,189,254,],[183,183,183,183,183,183,]),'static_method':([117,118,179,187,189,254,],[184,184,184,184,184,184,]),'case_list':([241,],[279,]),'case_statement':([241,279,],[280,319,]),'for_update':([277,],[314,]),'value_list':([297,],[336,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','yacc.py',13),
  ('program -> empty','program',1,'p_program','yacc.py',14),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',19),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','yacc.py',24),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','yacc.py',33),
  ('expression -> term','expression',1,'p_expression_term','yacc.py',42),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','yacc.py',47),
  ('expression -> function_call','expression',1,'p_expression_function_call','yacc.py',52),
  ('term -> term MULTIPLY factor','term',3,'p_term_times','yacc.py',58),
  ('term -> term DIVIDE factor','term',3,'p_term_div','yacc.py',66),
  ('term -> factor','term',1,'p_term_factor','yacc.py',74),
  ('factor -> INTEGER','factor',1,'p_factor_int','yacc.py',79),
  ('factor -> FLOAT','factor',1,'p_factor_float','yacc.py',84),
  ('factor -> STRING','factor',1,'p_factor_string','yacc.py',89),
  ('factor -> IDENTIFIER','factor',1,'p_factor_identifier','yacc.py',94),
  ('factor -> OPEN_PAREN expression CLOSE_PAREN','factor',3,'p_factor_expr','yacc.py',99),
  ('using_statement -> USING IDENTIFIER SEMICOLON','using_statement',3,'p_using_statement','yacc.py',108),
  ('using_statement -> USING CLASS_NAME SEMICOLON','using_statement',3,'p_using_statement','yacc.py',109),
  ('function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN','function_call',3,'p_function_call','yacc.py',115),
  ('function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',116),
  ('function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN','function_call',3,'p_function_call','yacc.py',117),
  ('function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',118),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','yacc.py',126),
  ('argument_list -> expression','argument_list',1,'p_argument_list','yacc.py',131),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','yacc.py',132),
  ('print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',141),
  ('print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',142),
  ('input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN','input_statement',5,'p_input_statement','yacc.py',148),
  ('expression -> input_statement','expression',1,'p_expression_input_statement','yacc.py',153),
  ('convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN','convert_statement',6,'p_convert_statement','yacc.py',158),
  ('assignment -> IDENTIFIER ASSIGN expression SEMICOLON','assignment',4,'p_assignment','yacc.py',164),
  ('assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON','assignment',4,'p_assignment','yacc.py',165),
  ('assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',166),
  ('assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON','assignment',5,'p_assignment','yacc.py',167),
  ('assignment -> INT_TYPE multiple_var_declaration SEMICOLON','assignment',3,'p_assignment','yacc.py',168),
  ('assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',169),
  ('assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',170),
  ('assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON','assignment',5,'p_assignment','yacc.py',171),
  ('assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',172),
  ('multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression','multiple_var_declaration',7,'p_multiple_var_declaration','yacc.py',182),
  ('multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression','multiple_var_declaration',5,'p_multiple_var_declaration','yacc.py',183),
  ('condition -> expression EQUAL expression','condition',3,'p_condition','yacc.py',192),
  ('condition -> expression NOT_EQUAL expression','condition',3,'p_condition','yacc.py',193),
  ('condition -> expression LESS_THAN expression','condition',3,'p_condition','yacc.py',194),
  ('condition -> expression GREATER_THAN expression','condition',3,'p_condition','yacc.py',195),
  ('condition -> expression LESS_THAN_EQUAL expression','condition',3,'p_condition','yacc.py',196),
  ('condition -> expression GREATER_THAN_EQUAL expression','condition',3,'p_condition','yacc.py',197),
  ('condition -> expression EQUAL STRING','condition',3,'p_condition','yacc.py',198),
  ('condition -> STRING EQUAL expression','condition',3,'p_condition','yacc.py',199),
  ('logical_condition -> condition','logical_condition',1,'p_logical_condition','yacc.py',204),
  ('logical_condition -> condition DOUBLE_AMPERSAND condition','logical_condition',3,'p_logical_condition','yacc.py',205),
  ('logical_condition -> condition DOUBLE_PIPE condition','logical_condition',3,'p_logical_condition','yacc.py',206),
  ('array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON','array_declaration',11,'p_array_declaration','yacc.py',219),
  ('array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON','array_declaration',11,'p_array_declaration','yacc.py',220),
  ('array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','array_access',4,'p_array_access','yacc.py',226),
  ('array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','array_assignment',7,'p_array_assignment','yacc.py',231),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','if_statement',7,'p_if_statement','yacc.py',237),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE if_statement','if_statement',9,'p_if_statement','yacc.py',238),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE','if_statement',11,'p_if_statement','yacc.py',239),
  ('basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','basic_function',7,'p_basic_function','yacc.py',251),
  ('list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','list_declaration',14,'p_list_declaration','yacc.py',261),
  ('list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','list_declaration',14,'p_list_declaration','yacc.py',262),
  ('list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON','list_add',7,'p_list_add','yacc.py',268),
  ('while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','while_statement',7,'p_while_statement','yacc.py',274),
  ('for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','for_statement',11,'p_for_statement','yacc.py',280),
  ('for_init -> INT_TYPE IDENTIFIER ASSIGN expression','for_init',4,'p_for_init','yacc.py',285),
  ('for_init -> assignment_no_semicolon','for_init',1,'p_for_init','yacc.py',286),
  ('assignment_no_semicolon -> IDENTIFIER ASSIGN expression','assignment_no_semicolon',3,'p_assignment_no_semicolon','yacc.py',294),
  ('for_update -> IDENTIFIER INCREMENT','for_update',2,'p_for_update','yacc.py',299),
  ('for_update -> IDENTIFIER DECREMENT','for_update',2,'p_for_update','yacc.py',300),
  ('for_update -> INCREMENT IDENTIFIER','for_update',2,'p_for_update','yacc.py',301),
  ('for_update -> DECREMENT IDENTIFIER','for_update',2,'p_for_update','yacc.py',302),
  ('param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','param_function',8,'p_param_function','yacc.py',311),
  ('param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','param_function',8,'p_param_function','yacc.py',312),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','yacc.py',318),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','yacc.py',319),
  ('parameter -> INT_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',327),
  ('parameter -> STRING_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',328),
  ('parameter -> FLOAT_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',329),
  ('dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','dictionary_declaration',18,'p_dictionary_declaration','yacc.py',339),
  ('dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','dictionary_declaration',18,'p_dictionary_declaration','yacc.py',340),
  ('dictionary_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','dictionary_access',4,'p_dictionary_access','yacc.py',346),
  ('dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','dict_assignment',7,'p_dict_assignment','yacc.py',352),
  ('switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE','switch_statement',7,'p_switch_statement','yacc.py',358),
  ('case_list -> case_statement','case_list',1,'p_case_list','yacc.py',363),
  ('case_list -> case_list case_statement','case_list',2,'p_case_list','yacc.py',364),
  ('case_statement -> CASE expression COLON statement_list BREAK SEMICOLON','case_statement',6,'p_case_statement','yacc.py',372),
  ('case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON','case_statement',5,'p_case_statement','yacc.py',373),
  ('return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',382),
  ('return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',383),
  ('return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',384),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','yacc.py',390),
  ('expression -> expression OPEN_BRACKET expression CLOSE_BRACKET','expression',4,'p_expression_array_access','yacc.py',394),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_dot','yacc.py',398),
  ('array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON','array_declaration',7,'p_array_declaration_with_values','yacc.py',402),
  ('value_list -> expression','value_list',1,'p_value_list','yacc.py',407),
  ('value_list -> value_list COMMA expression','value_list',3,'p_value_list','yacc.py',408),
  ('expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE','expression',7,'p_expression_new_array_with_values','yacc.py',415),
  ('static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',424),
  ('static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',425),
  ('static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',426),
  ('static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',427),
  ('static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',428),
  ('static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',429),
  ('static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',430),
  ('static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',431),
  ('main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',12,'p_main_method','yacc.py',441),
  ('main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',8,'p_main_method','yacc.py',442),
  ('main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',12,'p_main_method','yacc.py',443),
  ('main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',8,'p_main_method','yacc.py',444),
  ('class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE','class_definition',5,'p_class_definition','yacc.py',456),
  ('class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE','class_definition',5,'p_class_definition','yacc.py',457),
  ('class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE','class_definition',6,'p_class_definition','yacc.py',458),
  ('class_body -> class_member','class_body',1,'p_class_body','yacc.py',466),
  ('class_body -> class_body class_member','class_body',2,'p_class_body','yacc.py',467),
  ('class_member -> property_definition','class_member',1,'p_class_member','yacc.py',475),
  ('class_member -> method_definition','class_member',1,'p_class_member','yacc.py',476),
  ('class_member -> main_method','class_member',1,'p_class_member','yacc.py',477),
  ('class_member -> static_method','class_member',1,'p_class_member','yacc.py',478),
  ('property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE','property_definition',9,'p_property_definition','yacc.py',484),
  ('property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE','property_definition',9,'p_property_definition','yacc.py',485),
  ('method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_definition',8,'p_method_definition','yacc.py',492),
  ('method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_definition',8,'p_method_definition','yacc.py',493),
  ('statement_list -> statement','statement_list',1,'p_statement_list','yacc.py',500),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','yacc.py',501),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',509),
  ('statement -> print_statement','statement',1,'p_statement','yacc.py',510),
  ('statement -> array_declaration','statement',1,'p_statement','yacc.py',511),
  ('statement -> if_statement','statement',1,'p_statement','yacc.py',512),
  ('statement -> while_statement','statement',1,'p_statement','yacc.py',513),
  ('statement -> for_statement','statement',1,'p_statement','yacc.py',514),
  ('statement -> switch_statement','statement',1,'p_statement','yacc.py',515),
  ('statement -> array_assignment','statement',1,'p_statement','yacc.py',516),
  ('statement -> list_declaration','statement',1,'p_statement','yacc.py',517),
  ('statement -> list_add','statement',1,'p_statement','yacc.py',518),
  ('statement -> dictionary_declaration','statement',1,'p_statement','yacc.py',519),
  ('statement -> dict_assignment','statement',1,'p_statement','yacc.py',520),
  ('statement -> class_definition','statement',1,'p_statement','yacc.py',521),
  ('statement -> basic_function','statement',1,'p_statement','yacc.py',522),
  ('statement -> param_function','statement',1,'p_statement','yacc.py',523),
  ('statement -> return_function','statement',1,'p_statement','yacc.py',524),
  ('statement -> return_statement','statement',1,'p_statement','yacc.py',525),
  ('statement -> using_statement','statement',1,'p_statement','yacc.py',526),
  ('statement -> function_call_statement','statement',1,'p_statement','yacc.py',527),
]
