
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADD ALIAS AMPERSAND AMPERSAND_ASSIGN ARROW AS ASCENDING ASSIGN ASYNC AWAIT BANG BASE BOOL_TYPE BREAK BY BYTE CARET CARET_ASSIGN CASE CATCH CHAR CHAR_LITERAL CHECKED CLASS CLASS_NAME CLOSE_BRACE CLOSE_BRACKET CLOSE_PAREN COLON COMMA CONSOLE CONST CONTINUE CONVERT DECIMAL DECREMENT DEFAULT DELEGATE DESCENDING DICTIONARY DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE DOUBLE_AMPERSAND DOUBLE_COLON DOUBLE_PIPE DOUBLE_QUESTION DYNAMIC ELSE ENUM EQUAL EQUALS EVENT EXPLICIT EXTERN FALSE FINALLY FIXED FLOAT FLOAT_TYPE FOR FOREACH FROM GET GLOBAL GOTO GREATER_THAN GREATER_THAN_EQUAL GROUP IDENTIFIER IF IMPLICIT IN INCREMENT INTEGER INTERFACE INTERNAL INTO INT_TYPE IS JOIN LAMBDA_ARROW LEFT_SHIFT LEFT_SHIFT_ASSIGN LESS_THAN LESS_THAN_EQUAL LET LIST LOCK LONG MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN NAMEOF NAMESPACE NEW NOTNULL NOT_EQUAL NULL NULLABLE_OPERATOR OBJECT ON OPEN_BRACE OPEN_BRACKET OPEN_PAREN OPERATOR ORDERBY OUT OVERRIDE PARAMS PARTIAL PERCENT PERCENT_ASSIGN PIPE PIPE_ASSIGN PLUS PLUS_ASSIGN PRIVATE PROTECTED PUBLIC QUESTION READLINE READONLY REF REMOVE RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGN SBYTE SEALED SELECT SEMICOLON SET SHORT SIZEOF STACKALLOC STATIC STRING STRING_TYPE STRUCT SWITCH THIS THROW TILDE TOINT32 TRUE TRY TYPEOF UINT ULONG UNCHECKED UNMANAGED UNSAFE USHORT USING VALUE VAR VERBATIM_STRING VIRTUAL VOID VOLATILE WHEN WHERE WHILE WRITE WRITELINE YIELDprogram : statement_list\n| emptyempty :expression : expression PLUS termexpression : expression MINUS termexpression : termexpression : IDENTIFIERexpression : function_callterm : term MULTIPLY factorterm : term DIVIDE factorterm : factorfactor : INTEGERfactor : FLOATfactor : STRINGfactor : IDENTIFIERfactor : OPEN_PAREN expression CLOSE_PARENusing_statement : USING IDENTIFIER SEMICOLON\n| USING CLASS_NAME SEMICOLONfunction_call : IDENTIFIER OPEN_PAREN CLOSE_PAREN\n| IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN\n| CLASS_NAME OPEN_PAREN CLOSE_PAREN\n| CLASS_NAME OPEN_PAREN argument_list CLOSE_PARENfunction_call_statement : function_call SEMICOLONargument_list : expression\n| argument_list COMMA expressionprint_statement : CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON\n| CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLONinput_statement : CONSOLE DOT READLINE OPEN_PAREN CLOSE_PARENconvert_statement : CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PARENassignment : IDENTIFIER ASSIGN expression SEMICOLON\n| IDENTIFIER ASSIGN convert_statement SEMICOLON\n| INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON\n| INT_TYPE multiple_var_declaration SEMICOLON\n| FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON\n| STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON\n| BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLONmultiple_var_declaration : IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression\n| multiple_var_declaration COMMA IDENTIFIER ASSIGN expressioncondition : expression EQUAL expression\n| expression NOT_EQUAL expression\n| expression LESS_THAN expression\n| expression GREATER_THAN expression\n| expression LESS_THAN_EQUAL expression\n| expression GREATER_THAN_EQUAL expression\n| expression EQUAL STRING\n| STRING EQUAL expressionlogical_condition : condition\n| condition DOUBLE_AMPERSAND condition\n| condition DOUBLE_PIPE conditionarray_declaration : INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON\n| STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON\narray_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETarray_assignment : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLONif_statement : IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE\nbasic_function : VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACElist_declaration : LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n| LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\nlist_add : IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLONwhile_statement : WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEfor_statement : FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACEfor_init : INT_TYPE IDENTIFIER ASSIGN expression\n| assignment_no_semicolonassignment_no_semicolon : IDENTIFIER ASSIGN expressionfor_update : IDENTIFIER INCREMENT\n| IDENTIFIER DECREMENT\n| INCREMENT IDENTIFIER\n| DECREMENT IDENTIFIERparam_function : VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nparameter_list : parameter\n| parameter_list COMMA parameterparameter : INT_TYPE IDENTIFIER\n| STRING_TYPE IDENTIFIER\n| FLOAT_TYPE IDENTIFIERdictionary_declaration : DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\n| DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON\ndictionary_access : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKETdict_assignment : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLONswitch_statement : SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACEcase_list : case_statement\n| case_list case_statementcase_statement : CASE expression COLON statement_list BREAK SEMICOLON\n| DEFAULT COLON statement_list BREAK SEMICOLONreturn_function : INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n| STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\n| FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE\nreturn_statement : RETURN SEMICOLONstatic_method : STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nmain_method : STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nclass_definition : CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE\n| CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE\n| PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACEclass_body : class_member\n| class_body class_memberclass_member : property_definition\n| method_definition\n| main_method\n| static_methodproperty_definition : PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE\n| PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE\nmethod_definition : PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\n| PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE\nstatement_list : statement\n| statement_list statementstatement : assignment\n| print_statement\n| if_statement\n| while_statement\n| for_statement\n| switch_statement\n| array_declaration\n| array_assignment\n| list_declaration\n| list_add\n| dictionary_declaration\n| dict_assignment\n| class_definition\n| basic_function\n| param_function\n| return_function\n| return_statement\n| using_statement\n| function_call_statement'
    
_lr_action_items = {'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,202,208,212,217,228,246,252,284,307,337,364,365,373,375,377,380,382,384,406,409,411,413,451,456,457,],[2,254,257,259,263,264,283,289,321,338,366,392,393,401,403,405,408,410,412,430,433,435,437,458,463,464,]),'empty':([0,],[3,]),'statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[4,43,4,4,4,4,4,4,4,43,43,43,43,43,43,4,43,4,43,4,43,4,4,43,4,4,4,4,4,4,43,43,43,43,43,4,43,4,43,4,43,4,43,43,43,43,4,4,4,43,43,43,]),'assignment':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'print_statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if_statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'while_statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'switch_statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'array_declaration':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'array_assignment':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'list_declaration':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'list_add':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'dictionary_declaration':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'dict_assignment':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'class_definition':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'basic_function':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'param_function':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'return_function':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'return_statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'using_statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'function_call_statement':([0,2,202,208,212,217,228,246,252,254,257,259,263,264,283,284,289,307,321,337,338,364,365,366,373,375,377,380,382,384,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'function_call':([0,2,44,45,47,56,57,59,64,77,87,92,94,97,131,133,152,153,155,156,157,158,159,160,161,162,163,165,167,193,202,205,208,212,217,228,230,246,248,252,254,257,259,263,264,269,283,284,288,289,290,292,294,307,321,337,338,364,365,366,373,375,377,380,382,384,391,392,393,401,403,405,406,408,409,410,411,412,413,430,433,435,437,451,456,457,458,463,464,],[42,42,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,42,75,42,42,42,42,75,42,75,42,42,42,42,42,42,75,42,42,75,42,75,75,75,42,42,42,42,42,42,42,42,42,42,42,42,42,75,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'multiple_var_declaration':([25,],[49,]),'expression':([44,45,47,56,57,59,64,77,87,92,94,97,131,133,152,153,155,156,157,158,159,160,161,162,163,165,167,193,205,230,248,269,288,290,292,294,391,],[72,82,86,102,102,109,86,129,134,144,146,151,194,195,215,216,102,102,220,222,223,224,225,226,227,102,231,249,255,266,285,306,323,325,327,329,102,]),'convert_statement':([44,87,],[73,135,]),'term':([44,45,47,56,57,59,64,77,87,92,94,97,123,124,131,133,152,153,155,156,157,158,159,160,161,162,163,165,167,193,205,230,248,269,288,290,292,294,391,],[74,74,74,74,74,74,74,74,74,74,74,74,186,188,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'factor':([44,45,47,56,57,59,64,77,87,92,94,97,123,124,126,127,131,133,152,153,155,156,157,158,159,160,161,162,163,165,167,193,205,230,248,269,288,290,292,294,391,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,189,190,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'argument_list':([47,64,],[85,117,]),'logical_condition':([56,57,165,391,],[100,104,229,416,]),'condition':([56,57,155,156,165,391,],[101,101,218,219,101,101,]),'for_init':([58,],[105,]),'assignment_no_semicolon':([58,],[108,]),'parameter_list':([88,119,316,317,318,319,],[137,185,349,352,354,356,]),'parameter':([88,119,201,316,317,318,319,],[139,139,253,139,139,139,139,]),'input_statement':([94,],[147,]),'class_body':([114,115,183,],[173,181,245,]),'class_member':([114,115,173,181,183,245,],[174,174,238,238,174,238,]),'property_definition':([114,115,173,181,183,245,],[175,175,175,175,175,175,]),'method_definition':([114,115,173,181,183,245,],[176,176,176,176,176,176,]),'main_method':([114,115,173,181,183,245,],[177,177,177,177,177,177,]),'static_method':([114,115,173,181,183,245,],[178,178,178,178,178,178,]),'case_list':([232,],[267,]),'case_statement':([232,267,],[268,305,]),'for_update':([265,],[300,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','yacc.py',13),
  ('program -> empty','program',1,'p_program','yacc.py',14),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',19),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','yacc.py',24),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','yacc.py',33),
  ('expression -> term','expression',1,'p_expression_term','yacc.py',42),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','yacc.py',47),
  ('expression -> function_call','expression',1,'p_expression_function_call','yacc.py',52),
  ('term -> term MULTIPLY factor','term',3,'p_term_times','yacc.py',57),
  ('term -> term DIVIDE factor','term',3,'p_term_div','yacc.py',65),
  ('term -> factor','term',1,'p_term_factor','yacc.py',73),
  ('factor -> INTEGER','factor',1,'p_factor_int','yacc.py',78),
  ('factor -> FLOAT','factor',1,'p_factor_float','yacc.py',83),
  ('factor -> STRING','factor',1,'p_factor_string','yacc.py',88),
  ('factor -> IDENTIFIER','factor',1,'p_factor_identifier','yacc.py',93),
  ('factor -> OPEN_PAREN expression CLOSE_PAREN','factor',3,'p_factor_expr','yacc.py',98),
  ('using_statement -> USING IDENTIFIER SEMICOLON','using_statement',3,'p_using_statement','yacc.py',107),
  ('using_statement -> USING CLASS_NAME SEMICOLON','using_statement',3,'p_using_statement','yacc.py',108),
  ('function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN','function_call',3,'p_function_call','yacc.py',114),
  ('function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',115),
  ('function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN','function_call',3,'p_function_call','yacc.py',116),
  ('function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN','function_call',4,'p_function_call','yacc.py',117),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','yacc.py',125),
  ('argument_list -> expression','argument_list',1,'p_argument_list','yacc.py',130),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','yacc.py',131),
  ('print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',140),
  ('print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON','print_statement',7,'p_print_statement','yacc.py',141),
  ('input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN','input_statement',5,'p_input_statement','yacc.py',147),
  ('convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN','convert_statement',6,'p_convert_statement','yacc.py',153),
  ('assignment -> IDENTIFIER ASSIGN expression SEMICOLON','assignment',4,'p_assignment','yacc.py',159),
  ('assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON','assignment',4,'p_assignment','yacc.py',160),
  ('assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',161),
  ('assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON','assignment',5,'p_assignment','yacc.py',162),
  ('assignment -> INT_TYPE multiple_var_declaration SEMICOLON','assignment',3,'p_assignment','yacc.py',163),
  ('assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',164),
  ('assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',165),
  ('assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON','assignment',5,'p_assignment','yacc.py',166),
  ('assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','yacc.py',167),
  ('multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression','multiple_var_declaration',7,'p_multiple_var_declaration','yacc.py',177),
  ('multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression','multiple_var_declaration',5,'p_multiple_var_declaration','yacc.py',178),
  ('condition -> expression EQUAL expression','condition',3,'p_condition','yacc.py',187),
  ('condition -> expression NOT_EQUAL expression','condition',3,'p_condition','yacc.py',188),
  ('condition -> expression LESS_THAN expression','condition',3,'p_condition','yacc.py',189),
  ('condition -> expression GREATER_THAN expression','condition',3,'p_condition','yacc.py',190),
  ('condition -> expression LESS_THAN_EQUAL expression','condition',3,'p_condition','yacc.py',191),
  ('condition -> expression GREATER_THAN_EQUAL expression','condition',3,'p_condition','yacc.py',192),
  ('condition -> expression EQUAL STRING','condition',3,'p_condition','yacc.py',193),
  ('condition -> STRING EQUAL expression','condition',3,'p_condition','yacc.py',194),
  ('logical_condition -> condition','logical_condition',1,'p_logical_condition','yacc.py',199),
  ('logical_condition -> condition DOUBLE_AMPERSAND condition','logical_condition',3,'p_logical_condition','yacc.py',200),
  ('logical_condition -> condition DOUBLE_PIPE condition','logical_condition',3,'p_logical_condition','yacc.py',201),
  ('array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON','array_declaration',11,'p_array_declaration','yacc.py',214),
  ('array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON','array_declaration',11,'p_array_declaration','yacc.py',215),
  ('array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','array_access',4,'p_array_access','yacc.py',221),
  ('array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','array_assignment',7,'p_array_assignment','yacc.py',226),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','if_statement',7,'p_if_statement','yacc.py',232),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','if_statement',15,'p_if_statement','yacc.py',233),
  ('if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE','if_statement',11,'p_if_statement','yacc.py',234),
  ('basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','basic_function',7,'p_basic_function','yacc.py',246),
  ('list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','list_declaration',14,'p_list_declaration','yacc.py',256),
  ('list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','list_declaration',14,'p_list_declaration','yacc.py',257),
  ('list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON','list_add',7,'p_list_add','yacc.py',263),
  ('while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','while_statement',7,'p_while_statement','yacc.py',269),
  ('for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','for_statement',11,'p_for_statement','yacc.py',275),
  ('for_init -> INT_TYPE IDENTIFIER ASSIGN expression','for_init',4,'p_for_init','yacc.py',280),
  ('for_init -> assignment_no_semicolon','for_init',1,'p_for_init','yacc.py',281),
  ('assignment_no_semicolon -> IDENTIFIER ASSIGN expression','assignment_no_semicolon',3,'p_assignment_no_semicolon','yacc.py',289),
  ('for_update -> IDENTIFIER INCREMENT','for_update',2,'p_for_update','yacc.py',294),
  ('for_update -> IDENTIFIER DECREMENT','for_update',2,'p_for_update','yacc.py',295),
  ('for_update -> INCREMENT IDENTIFIER','for_update',2,'p_for_update','yacc.py',296),
  ('for_update -> DECREMENT IDENTIFIER','for_update',2,'p_for_update','yacc.py',297),
  ('param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','param_function',8,'p_param_function','yacc.py',306),
  ('param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','param_function',8,'p_param_function','yacc.py',307),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','yacc.py',313),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','yacc.py',314),
  ('parameter -> INT_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',322),
  ('parameter -> STRING_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',323),
  ('parameter -> FLOAT_TYPE IDENTIFIER','parameter',2,'p_parameter','yacc.py',324),
  ('dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','dictionary_declaration',18,'p_dictionary_declaration','yacc.py',334),
  ('dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON','dictionary_declaration',18,'p_dictionary_declaration','yacc.py',335),
  ('dictionary_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET','dictionary_access',4,'p_dictionary_access','yacc.py',341),
  ('dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON','dict_assignment',7,'p_dict_assignment','yacc.py',347),
  ('switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE','switch_statement',7,'p_switch_statement','yacc.py',353),
  ('case_list -> case_statement','case_list',1,'p_case_list','yacc.py',358),
  ('case_list -> case_list case_statement','case_list',2,'p_case_list','yacc.py',359),
  ('case_statement -> CASE expression COLON statement_list BREAK SEMICOLON','case_statement',6,'p_case_statement','yacc.py',367),
  ('case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON','case_statement',5,'p_case_statement','yacc.py',368),
  ('return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',377),
  ('return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',378),
  ('return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE','return_function',10,'p_return_function','yacc.py',379),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','yacc.py',385),
  ('static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',394),
  ('static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',395),
  ('static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',396),
  ('static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',397),
  ('static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',398),
  ('static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',399),
  ('static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',8,'p_static_method','yacc.py',400),
  ('static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','static_method',9,'p_static_method','yacc.py',401),
  ('main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',12,'p_main_method','yacc.py',411),
  ('main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',8,'p_main_method','yacc.py',412),
  ('main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',12,'p_main_method','yacc.py',413),
  ('main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','main_method',8,'p_main_method','yacc.py',414),
  ('class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE','class_definition',5,'p_class_definition','yacc.py',426),
  ('class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE','class_definition',5,'p_class_definition','yacc.py',427),
  ('class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE','class_definition',6,'p_class_definition','yacc.py',428),
  ('class_body -> class_member','class_body',1,'p_class_body','yacc.py',436),
  ('class_body -> class_body class_member','class_body',2,'p_class_body','yacc.py',437),
  ('class_member -> property_definition','class_member',1,'p_class_member','yacc.py',445),
  ('class_member -> method_definition','class_member',1,'p_class_member','yacc.py',446),
  ('class_member -> main_method','class_member',1,'p_class_member','yacc.py',447),
  ('class_member -> static_method','class_member',1,'p_class_member','yacc.py',448),
  ('property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE','property_definition',9,'p_property_definition','yacc.py',454),
  ('property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE','property_definition',9,'p_property_definition','yacc.py',455),
  ('method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_definition',8,'p_method_definition','yacc.py',462),
  ('method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE','method_definition',8,'p_method_definition','yacc.py',463),
  ('statement_list -> statement','statement_list',1,'p_statement_list','yacc.py',470),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','yacc.py',471),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',479),
  ('statement -> print_statement','statement',1,'p_statement','yacc.py',480),
  ('statement -> if_statement','statement',1,'p_statement','yacc.py',481),
  ('statement -> while_statement','statement',1,'p_statement','yacc.py',482),
  ('statement -> for_statement','statement',1,'p_statement','yacc.py',483),
  ('statement -> switch_statement','statement',1,'p_statement','yacc.py',484),
  ('statement -> array_declaration','statement',1,'p_statement','yacc.py',485),
  ('statement -> array_assignment','statement',1,'p_statement','yacc.py',486),
  ('statement -> list_declaration','statement',1,'p_statement','yacc.py',487),
  ('statement -> list_add','statement',1,'p_statement','yacc.py',488),
  ('statement -> dictionary_declaration','statement',1,'p_statement','yacc.py',489),
  ('statement -> dict_assignment','statement',1,'p_statement','yacc.py',490),
  ('statement -> class_definition','statement',1,'p_statement','yacc.py',491),
  ('statement -> basic_function','statement',1,'p_statement','yacc.py',492),
  ('statement -> param_function','statement',1,'p_statement','yacc.py',493),
  ('statement -> return_function','statement',1,'p_statement','yacc.py',494),
  ('statement -> return_statement','statement',1,'p_statement','yacc.py',495),
  ('statement -> using_statement','statement',1,'p_statement','yacc.py',496),
  ('statement -> function_call_statement','statement',1,'p_statement','yacc.py',497),
]
