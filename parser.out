Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADD
    ALIAS
    AMPERSAND
    AMPERSAND_ASSIGN
    ARROW
    AS
    ASCENDING
    ASYNC
    AWAIT
    BASE
    BREAK
    BY
    BYTE
    CAPACITY
    CARET
    CARET_ASSIGN
    CASE
    CATCH
    CHECKED
    CLASS_NAME
    CLEAR
    COLON
    CONST
    CONTAINS
    CONTINUE
    COUNT
    DECIMAL
    DEFAULT
    DELEGATE
    DESCENDING
    DIVIDE_ASSIGN
    DO
    DOUBLE_COLON
    DOUBLE_QUESTION
    DYNAMIC
    ENUM
    EQUALS
    EVENT
    EXPLICIT
    EXTERN
    FINALLY
    FIXED
    FROM
    GLOBAL
    GOTO
    GROUP
    IMPLICIT
    INDEXOF
    INSERT
    INTERFACE
    INTO
    IS
    JOIN
    LAMBDA_ARROW
    LEFT_SHIFT
    LEFT_SHIFT_ASSIGN
    LET
    LOCK
    LONG
    MINUS_ASSIGN
    MULTIPLY_ASSIGN
    NAMEOF
    NAMESPACE
    NOTNULL
    NULLABLE_OPERATOR
    OBJECT
    ON
    OPERATOR
    ORDERBY
    OUT
    OVERRIDE
    PARAMS
    PARTIAL
    PERCENT_ASSIGN
    PIPE
    PIPE_ASSIGN
    PLUS_ASSIGN
    QUESTION
    READONLY
    REF
    REMOVE
    REMOVEAT
    RIGHT_SHIFT
    RIGHT_SHIFT_ASSIGN
    SBYTE
    SEALED
    SELECT
    SHORT
    SIZEOF
    STACKALLOC
    STRUCT
    SWITCH
    THIS
    THROW
    TILDE
    TRY
    TYPEOF
    UINT
    ULONG
    UNCHECKED
    UNMANAGED
    UNSAFE
    USHORT
    VALUE
    VERBATIM_STRING
    VIRTUAL
    VOLATILE
    WHEN
    WHERE
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> using_statements class_declarations
Rule 2     using_statements -> using_statements using_statement
Rule 3     using_statements -> using_statement
Rule 4     using_statements -> empty
Rule 5     using_statement -> USING IDENTIFIER SEMICOLON
Rule 6     using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON
Rule 7     class_declarations -> class_declarations class_declaration
Rule 8     class_declarations -> class_declaration
Rule 9     class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
Rule 10    class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
Rule 11    access_modifier -> PUBLIC
Rule 12    access_modifier -> PRIVATE
Rule 13    access_modifier -> PROTECTED
Rule 14    access_modifier -> INTERNAL
Rule 15    class_body -> class_body class_member
Rule 16    class_body -> class_member
Rule 17    class_body -> empty
Rule 18    class_member -> field_declaration
Rule 19    class_member -> method_declaration
Rule 20    class_member -> property_declaration
Rule 21    property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE
Rule 22    property_accessors -> GET SEMICOLON SET SEMICOLON
Rule 23    property_accessors -> GET SEMICOLON
Rule 24    property_accessors -> SET SEMICOLON
Rule 25    field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON
Rule 26    field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON
Rule 27    field_declaration -> type_specifier IDENTIFIER SEMICOLON
Rule 28    field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON
Rule 29    method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 30    method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 31    method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 32    parameter_list -> parameter_list COMMA parameter
Rule 33    parameter_list -> parameter
Rule 34    parameter_list -> empty
Rule 35    parameter -> type_specifier IDENTIFIER
Rule 36    type_specifier -> INT_TYPE
Rule 37    type_specifier -> FLOAT_TYPE
Rule 38    type_specifier -> DOUBLE
Rule 39    type_specifier -> STRING_TYPE
Rule 40    type_specifier -> BOOL_TYPE
Rule 41    type_specifier -> CHAR
Rule 42    type_specifier -> VOID
Rule 43    type_specifier -> IDENTIFIER
Rule 44    type_specifier -> array_type
Rule 45    type_specifier -> generic_type
Rule 46    array_type -> type_specifier OPEN_BRACKET CLOSE_BRACKET
Rule 47    generic_type -> LIST LESS_THAN type_specifier GREATER_THAN
Rule 48    generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
Rule 49    statement_list -> statement_list statement
Rule 50    statement_list -> statement
Rule 51    statement_list -> empty
Rule 52    statement -> expression_statement
Rule 53    statement -> declaration_statement
Rule 54    statement -> assignment_statement
Rule 55    statement -> if_statement
Rule 56    statement -> while_statement
Rule 57    statement -> for_statement
Rule 58    statement -> foreach_statement
Rule 59    statement -> return_statement
Rule 60    statement -> block_statement
Rule 61    statement -> print_statement
Rule 62    statement -> input_statement
Rule 63    block_statement -> OPEN_BRACE statement_list CLOSE_BRACE
Rule 64    expression_statement -> expression SEMICOLON
Rule 65    declaration_statement -> type_specifier variable_declarator_list SEMICOLON
Rule 66    declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON
Rule 67    variable_declarator_list -> variable_declarator_list COMMA variable_declarator
Rule 68    variable_declarator_list -> variable_declarator
Rule 69    variable_declarator -> IDENTIFIER
Rule 70    variable_declarator -> IDENTIFIER ASSIGN expression
Rule 71    assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 72    assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
Rule 73    assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
Rule 74    if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
Rule 75    if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
Rule 76    while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
Rule 77    for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
Rule 78    for_init -> type_specifier IDENTIFIER ASSIGN expression
Rule 79    for_init -> assignment_statement
Rule 80    for_init -> empty
Rule 81    for_update -> assignment_statement
Rule 82    for_update -> IDENTIFIER INCREMENT
Rule 83    for_update -> IDENTIFIER DECREMENT
Rule 84    for_update -> empty
Rule 85    foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
Rule 86    return_statement -> RETURN expression SEMICOLON
Rule 87    return_statement -> RETURN SEMICOLON
Rule 88    print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
Rule 89    print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
Rule 90    print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 91    input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
Rule 92    input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
Rule 93    expression -> primary_expression
Rule 94    expression -> arithmetic_expression
Rule 95    expression -> boolean_expression
Rule 96    primary_expression -> literal
Rule 97    primary_expression -> IDENTIFIER
Rule 98    primary_expression -> function_call
Rule 99    primary_expression -> array_access
Rule 100   primary_expression -> member_access
Rule 101   primary_expression -> array_initialization
Rule 102   primary_expression -> input_statement
Rule 103   primary_expression -> TRUE
Rule 104   primary_expression -> FALSE
Rule 105   primary_expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 106   arithmetic_expression -> expression PLUS expression
Rule 107   arithmetic_expression -> expression MINUS expression
Rule 108   arithmetic_expression -> expression MULTIPLY expression
Rule 109   arithmetic_expression -> expression DIVIDE expression
Rule 110   arithmetic_expression -> expression PERCENT expression
Rule 111   arithmetic_expression -> MINUS expression
Rule 112   boolean_expression -> expression EQUAL expression
Rule 113   boolean_expression -> expression NOT_EQUAL expression
Rule 114   boolean_expression -> expression LESS_THAN expression
Rule 115   boolean_expression -> expression GREATER_THAN expression
Rule 116   boolean_expression -> expression LESS_THAN_EQUAL expression
Rule 117   boolean_expression -> expression GREATER_THAN_EQUAL expression
Rule 118   boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression
Rule 119   boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression
Rule 120   boolean_expression -> BANG boolean_expression
Rule 121   array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE
Rule 122   array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
Rule 123   array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
Rule 124   array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
Rule 125   array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 126   member_access -> IDENTIFIER DOT IDENTIFIER
Rule 127   function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
Rule 128   argument_list -> argument_list COMMA expression
Rule 129   argument_list -> expression
Rule 130   argument_list -> empty
Rule 131   expression_list -> expression_list COMMA expression
Rule 132   expression_list -> expression
Rule 133   expression_list -> empty
Rule 134   dictionary_initializer_list -> dictionary_initializer_list COMMA dictionary_initializer
Rule 135   dictionary_initializer_list -> dictionary_initializer
Rule 136   dictionary_initializer_list -> empty
Rule 137   dictionary_initializer -> OPEN_BRACE expression COMMA expression CLOSE_BRACE
Rule 138   literal -> INTEGER
Rule 139   literal -> FLOAT
Rule 140   literal -> STRING
Rule 141   literal -> CHAR_LITERAL
Rule 142   literal -> NULL
Rule 143   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
ADD                  : 
ALIAS                : 
AMPERSAND            : 
AMPERSAND_ASSIGN     : 
ARROW                : 
AS                   : 
ASCENDING            : 
ASSIGN               : 26 28 66 70 71 72 73 78
ASYNC                : 
AWAIT                : 
BANG                 : 120
BASE                 : 
BOOL_TYPE            : 40
BREAK                : 
BY                   : 
BYTE                 : 
CAPACITY             : 
CARET                : 
CARET_ASSIGN         : 
CASE                 : 
CATCH                : 
CHAR                 : 41
CHAR_LITERAL         : 141
CHECKED              : 
CLASS                : 9 10
CLASS_NAME           : 
CLEAR                : 
CLOSE_BRACE          : 9 10 21 29 30 31 63 121 124 137
CLOSE_BRACKET        : 46 72 122 125
CLOSE_PAREN          : 29 30 31 74 75 76 77 85 88 89 90 91 92 92 105 123 127
COLON                : 
COMMA                : 32 48 67 123 124 128 131 134 137
CONSOLE              : 88 89 90 91 92
CONST                : 
CONTAINS             : 
CONTINUE             : 
CONVERT              : 92
COUNT                : 
DECIMAL              : 
DECREMENT            : 83
DEFAULT              : 
DELEGATE             : 
DESCENDING           : 
DICTIONARY           : 48 123 124
DIVIDE               : 109
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 6 73 88 89 90 91 92 92 126
DOUBLE               : 38
DOUBLE_AMPERSAND     : 118
DOUBLE_COLON         : 
DOUBLE_PIPE          : 119
DOUBLE_QUESTION      : 
DYNAMIC              : 
ELSE                 : 75
ENUM                 : 
EQUAL                : 112
EQUALS               : 
EVENT                : 
EXPLICIT             : 
EXTERN               : 
FALSE                : 104
FINALLY              : 
FIXED                : 
FLOAT                : 139
FLOAT_TYPE           : 37
FOR                  : 77
FOREACH              : 85
FROM                 : 
GET                  : 22 23
GLOBAL               : 
GOTO                 : 
GREATER_THAN         : 47 48 115 123 124
GREATER_THAN_EQUAL   : 117
GROUP                : 
IDENTIFIER           : 5 6 6 9 10 21 25 26 27 28 29 30 31 35 43 66 69 70 71 72 73 73 78 82 83 85 97 125 126 126 127
IF                   : 74 75
IMPLICIT             : 
IN                   : 85
INCREMENT            : 82
INDEXOF              : 
INSERT               : 
INTEGER              : 138
INTERFACE            : 
INTERNAL             : 14
INTO                 : 
INT_TYPE             : 36
IS                   : 
JOIN                 : 
LAMBDA_ARROW         : 
LEFT_SHIFT           : 
LEFT_SHIFT_ASSIGN    : 
LESS_THAN            : 47 48 114 123 124
LESS_THAN_EQUAL      : 116
LET                  : 
LIST                 : 47
LOCK                 : 
LONG                 : 
MINUS                : 107 111
MINUS_ASSIGN         : 
MULTIPLY             : 108
MULTIPLY_ASSIGN      : 
NAMEOF               : 
NAMESPACE            : 
NEW                  : 122 123 124
NOTNULL              : 
NOT_EQUAL            : 113
NULL                 : 142
NULLABLE_OPERATOR    : 
OBJECT               : 
ON                   : 
OPEN_BRACE           : 9 10 21 29 30 31 63 121 124 137
OPEN_BRACKET         : 46 72 122 125
OPEN_PAREN           : 29 30 31 74 75 76 77 85 88 89 90 91 92 92 105 123 127
OPERATOR             : 
ORDERBY              : 
OUT                  : 
OVERRIDE             : 
PARAMS               : 
PARTIAL              : 
PERCENT              : 110
PERCENT_ASSIGN       : 
PIPE                 : 
PIPE_ASSIGN          : 
PLUS                 : 106
PLUS_ASSIGN          : 
PRIVATE              : 12
PROTECTED            : 13
PUBLIC               : 11
QUESTION             : 
READLINE             : 91 92
READONLY             : 
REF                  : 
REMOVE               : 
REMOVEAT             : 
RETURN               : 86 87
RIGHT_SHIFT          : 
RIGHT_SHIFT_ASSIGN   : 
SBYTE                : 
SEALED               : 
SELECT               : 
SEMICOLON            : 5 6 22 22 23 24 25 26 27 28 64 65 66 71 72 73 77 77 86 87 88 89 90
SET                  : 22 24
SHORT                : 
SIZEOF               : 
STACKALLOC           : 
STATIC               : 29 31
STRING               : 140
STRING_TYPE          : 39
STRUCT               : 
SWITCH               : 
THIS                 : 
THROW                : 
TILDE                : 
TOINT32              : 92
TRUE                 : 103
TRY                  : 
TYPEOF               : 
UINT                 : 
ULONG                : 
UNCHECKED            : 
UNMANAGED            : 
UNSAFE               : 
USHORT               : 
USING                : 5 6
VALUE                : 
VAR                  : 66
VERBATIM_STRING      : 
VIRTUAL              : 
VOID                 : 42
VOLATILE             : 
WHEN                 : 
WHERE                : 
WHILE                : 76
WRITE                : 89
WRITELINE            : 88 90
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_modifier      : 9 21 25 26 29 30
argument_list        : 127 128
arithmetic_expression : 94
array_access         : 99
array_initialization : 101
array_type           : 44
assignment_statement : 54 79 81
block_statement      : 60
boolean_expression   : 74 75 76 77 95 118 118 119 119 120
class_body           : 9 10 15
class_declaration    : 7 8
class_declarations   : 1 7
class_member         : 15 16
declaration_statement : 53
dictionary_initializer : 134 135
dictionary_initializer_list : 124 134
empty                : 4 17 34 51 80 84 130 133 136
expression           : 26 28 64 66 70 71 72 72 73 78 85 86 88 89 105 106 106 107 107 108 108 109 109 110 110 111 112 112 113 113 114 114 115 115 116 116 117 117 122 125 128 129 131 132 137 137
expression_list      : 121 131
expression_statement : 52
field_declaration    : 18
for_init             : 77
for_statement        : 57
for_update           : 77
foreach_statement    : 58
function_call        : 98
generic_type         : 45
if_statement         : 55
input_statement      : 62 102
literal              : 96
member_access        : 100
method_declaration   : 19
parameter            : 32 33
parameter_list       : 29 30 31 32
primary_expression   : 93
print_statement      : 61
program              : 0
property_accessors   : 21
property_declaration : 20
return_statement     : 59
statement            : 49 50 74 75 75 76 77 85
statement_list       : 29 30 31 49 63
type_specifier       : 21 25 26 27 28 29 30 31 35 46 47 48 48 65 78 85 122 123 123 124 124
using_statement      : 2 3
using_statements     : 1 2
variable_declarator  : 67 68
variable_declarator_list : 65 67
while_statement      : 56

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . using_statements class_declarations
    (2) using_statements -> . using_statements using_statement
    (3) using_statements -> . using_statement
    (4) using_statements -> . empty
    (5) using_statement -> . USING IDENTIFIER SEMICOLON
    (6) using_statement -> . USING IDENTIFIER DOT IDENTIFIER SEMICOLON
    (143) empty -> .

  ! shift/reduce conflict for USING resolved as shift
    USING           shift and go to state 5
    CLASS           reduce using rule 143 (empty -> .)
    PUBLIC          reduce using rule 143 (empty -> .)
    PRIVATE         reduce using rule 143 (empty -> .)
    PROTECTED       reduce using rule 143 (empty -> .)
    INTERNAL        reduce using rule 143 (empty -> .)

  ! USING           [ reduce using rule 143 (empty -> .) ]

    program                        shift and go to state 1
    using_statements               shift and go to state 2
    using_statement                shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> using_statements . class_declarations
    (2) using_statements -> using_statements . using_statement
    (7) class_declarations -> . class_declarations class_declaration
    (8) class_declarations -> . class_declaration
    (5) using_statement -> . USING IDENTIFIER SEMICOLON
    (6) using_statement -> . USING IDENTIFIER DOT IDENTIFIER SEMICOLON
    (9) class_declaration -> . access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (10) class_declaration -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (11) access_modifier -> . PUBLIC
    (12) access_modifier -> . PRIVATE
    (13) access_modifier -> . PROTECTED
    (14) access_modifier -> . INTERNAL

    USING           shift and go to state 5
    CLASS           shift and go to state 10
    PUBLIC          shift and go to state 11
    PRIVATE         shift and go to state 12
    PROTECTED       shift and go to state 13
    INTERNAL        shift and go to state 14

    class_declarations             shift and go to state 6
    using_statement                shift and go to state 7
    class_declaration              shift and go to state 8
    access_modifier                shift and go to state 9

state 3

    (3) using_statements -> using_statement .

    USING           reduce using rule 3 (using_statements -> using_statement .)
    CLASS           reduce using rule 3 (using_statements -> using_statement .)
    PUBLIC          reduce using rule 3 (using_statements -> using_statement .)
    PRIVATE         reduce using rule 3 (using_statements -> using_statement .)
    PROTECTED       reduce using rule 3 (using_statements -> using_statement .)
    INTERNAL        reduce using rule 3 (using_statements -> using_statement .)


state 4

    (4) using_statements -> empty .

    USING           reduce using rule 4 (using_statements -> empty .)
    CLASS           reduce using rule 4 (using_statements -> empty .)
    PUBLIC          reduce using rule 4 (using_statements -> empty .)
    PRIVATE         reduce using rule 4 (using_statements -> empty .)
    PROTECTED       reduce using rule 4 (using_statements -> empty .)
    INTERNAL        reduce using rule 4 (using_statements -> empty .)


state 5

    (5) using_statement -> USING . IDENTIFIER SEMICOLON
    (6) using_statement -> USING . IDENTIFIER DOT IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 15


state 6

    (1) program -> using_statements class_declarations .
    (7) class_declarations -> class_declarations . class_declaration
    (9) class_declaration -> . access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (10) class_declaration -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (11) access_modifier -> . PUBLIC
    (12) access_modifier -> . PRIVATE
    (13) access_modifier -> . PROTECTED
    (14) access_modifier -> . INTERNAL

    $end            reduce using rule 1 (program -> using_statements class_declarations .)
    CLASS           shift and go to state 10
    PUBLIC          shift and go to state 11
    PRIVATE         shift and go to state 12
    PROTECTED       shift and go to state 13
    INTERNAL        shift and go to state 14

    class_declaration              shift and go to state 16
    access_modifier                shift and go to state 9

state 7

    (2) using_statements -> using_statements using_statement .

    USING           reduce using rule 2 (using_statements -> using_statements using_statement .)
    CLASS           reduce using rule 2 (using_statements -> using_statements using_statement .)
    PUBLIC          reduce using rule 2 (using_statements -> using_statements using_statement .)
    PRIVATE         reduce using rule 2 (using_statements -> using_statements using_statement .)
    PROTECTED       reduce using rule 2 (using_statements -> using_statements using_statement .)
    INTERNAL        reduce using rule 2 (using_statements -> using_statements using_statement .)


state 8

    (8) class_declarations -> class_declaration .

    CLASS           reduce using rule 8 (class_declarations -> class_declaration .)
    PUBLIC          reduce using rule 8 (class_declarations -> class_declaration .)
    PRIVATE         reduce using rule 8 (class_declarations -> class_declaration .)
    PROTECTED       reduce using rule 8 (class_declarations -> class_declaration .)
    INTERNAL        reduce using rule 8 (class_declarations -> class_declaration .)
    $end            reduce using rule 8 (class_declarations -> class_declaration .)


state 9

    (9) class_declaration -> access_modifier . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE

    CLASS           shift and go to state 17


state 10

    (10) class_declaration -> CLASS . IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE

    IDENTIFIER      shift and go to state 18


state 11

    (11) access_modifier -> PUBLIC .

    CLASS           reduce using rule 11 (access_modifier -> PUBLIC .)
    STATIC          reduce using rule 11 (access_modifier -> PUBLIC .)
    INT_TYPE        reduce using rule 11 (access_modifier -> PUBLIC .)
    FLOAT_TYPE      reduce using rule 11 (access_modifier -> PUBLIC .)
    DOUBLE          reduce using rule 11 (access_modifier -> PUBLIC .)
    STRING_TYPE     reduce using rule 11 (access_modifier -> PUBLIC .)
    BOOL_TYPE       reduce using rule 11 (access_modifier -> PUBLIC .)
    CHAR            reduce using rule 11 (access_modifier -> PUBLIC .)
    VOID            reduce using rule 11 (access_modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 11 (access_modifier -> PUBLIC .)
    LIST            reduce using rule 11 (access_modifier -> PUBLIC .)
    DICTIONARY      reduce using rule 11 (access_modifier -> PUBLIC .)


state 12

    (12) access_modifier -> PRIVATE .

    CLASS           reduce using rule 12 (access_modifier -> PRIVATE .)
    STATIC          reduce using rule 12 (access_modifier -> PRIVATE .)
    INT_TYPE        reduce using rule 12 (access_modifier -> PRIVATE .)
    FLOAT_TYPE      reduce using rule 12 (access_modifier -> PRIVATE .)
    DOUBLE          reduce using rule 12 (access_modifier -> PRIVATE .)
    STRING_TYPE     reduce using rule 12 (access_modifier -> PRIVATE .)
    BOOL_TYPE       reduce using rule 12 (access_modifier -> PRIVATE .)
    CHAR            reduce using rule 12 (access_modifier -> PRIVATE .)
    VOID            reduce using rule 12 (access_modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 12 (access_modifier -> PRIVATE .)
    LIST            reduce using rule 12 (access_modifier -> PRIVATE .)
    DICTIONARY      reduce using rule 12 (access_modifier -> PRIVATE .)


state 13

    (13) access_modifier -> PROTECTED .

    CLASS           reduce using rule 13 (access_modifier -> PROTECTED .)
    STATIC          reduce using rule 13 (access_modifier -> PROTECTED .)
    INT_TYPE        reduce using rule 13 (access_modifier -> PROTECTED .)
    FLOAT_TYPE      reduce using rule 13 (access_modifier -> PROTECTED .)
    DOUBLE          reduce using rule 13 (access_modifier -> PROTECTED .)
    STRING_TYPE     reduce using rule 13 (access_modifier -> PROTECTED .)
    BOOL_TYPE       reduce using rule 13 (access_modifier -> PROTECTED .)
    CHAR            reduce using rule 13 (access_modifier -> PROTECTED .)
    VOID            reduce using rule 13 (access_modifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 13 (access_modifier -> PROTECTED .)
    LIST            reduce using rule 13 (access_modifier -> PROTECTED .)
    DICTIONARY      reduce using rule 13 (access_modifier -> PROTECTED .)


state 14

    (14) access_modifier -> INTERNAL .

    CLASS           reduce using rule 14 (access_modifier -> INTERNAL .)
    STATIC          reduce using rule 14 (access_modifier -> INTERNAL .)
    INT_TYPE        reduce using rule 14 (access_modifier -> INTERNAL .)
    FLOAT_TYPE      reduce using rule 14 (access_modifier -> INTERNAL .)
    DOUBLE          reduce using rule 14 (access_modifier -> INTERNAL .)
    STRING_TYPE     reduce using rule 14 (access_modifier -> INTERNAL .)
    BOOL_TYPE       reduce using rule 14 (access_modifier -> INTERNAL .)
    CHAR            reduce using rule 14 (access_modifier -> INTERNAL .)
    VOID            reduce using rule 14 (access_modifier -> INTERNAL .)
    IDENTIFIER      reduce using rule 14 (access_modifier -> INTERNAL .)
    LIST            reduce using rule 14 (access_modifier -> INTERNAL .)
    DICTIONARY      reduce using rule 14 (access_modifier -> INTERNAL .)


state 15

    (5) using_statement -> USING IDENTIFIER . SEMICOLON
    (6) using_statement -> USING IDENTIFIER . DOT IDENTIFIER SEMICOLON

    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20


state 16

    (7) class_declarations -> class_declarations class_declaration .

    CLASS           reduce using rule 7 (class_declarations -> class_declarations class_declaration .)
    PUBLIC          reduce using rule 7 (class_declarations -> class_declarations class_declaration .)
    PRIVATE         reduce using rule 7 (class_declarations -> class_declarations class_declaration .)
    PROTECTED       reduce using rule 7 (class_declarations -> class_declarations class_declaration .)
    INTERNAL        reduce using rule 7 (class_declarations -> class_declarations class_declaration .)
    $end            reduce using rule 7 (class_declarations -> class_declarations class_declaration .)


state 17

    (9) class_declaration -> access_modifier CLASS . IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE

    IDENTIFIER      shift and go to state 21


state 18

    (10) class_declaration -> CLASS IDENTIFIER . OPEN_BRACE class_body CLOSE_BRACE

    OPEN_BRACE      shift and go to state 22


state 19

    (5) using_statement -> USING IDENTIFIER SEMICOLON .

    USING           reduce using rule 5 (using_statement -> USING IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 5 (using_statement -> USING IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 5 (using_statement -> USING IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 5 (using_statement -> USING IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 5 (using_statement -> USING IDENTIFIER SEMICOLON .)
    INTERNAL        reduce using rule 5 (using_statement -> USING IDENTIFIER SEMICOLON .)


state 20

    (6) using_statement -> USING IDENTIFIER DOT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 23


state 21

    (9) class_declaration -> access_modifier CLASS IDENTIFIER . OPEN_BRACE class_body CLOSE_BRACE

    OPEN_BRACE      shift and go to state 24


state 22

    (10) class_declaration -> CLASS IDENTIFIER OPEN_BRACE . class_body CLOSE_BRACE
    (15) class_body -> . class_body class_member
    (16) class_body -> . class_member
    (17) class_body -> . empty
    (18) class_member -> . field_declaration
    (19) class_member -> . method_declaration
    (20) class_member -> . property_declaration
    (143) empty -> .
    (25) field_declaration -> . access_modifier type_specifier IDENTIFIER SEMICOLON
    (26) field_declaration -> . access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (27) field_declaration -> . type_specifier IDENTIFIER SEMICOLON
    (28) field_declaration -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (29) method_declaration -> . access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (30) method_declaration -> . access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (31) method_declaration -> . STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (21) property_declaration -> . access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE
    (11) access_modifier -> . PUBLIC
    (12) access_modifier -> . PRIVATE
    (13) access_modifier -> . PROTECTED
    (14) access_modifier -> . INTERNAL
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for INTERNAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for DICTIONARY resolved as shift
    CLOSE_BRACE     reduce using rule 143 (empty -> .)
    STATIC          shift and go to state 34
    PUBLIC          shift and go to state 11
    PRIVATE         shift and go to state 12
    PROTECTED       shift and go to state 13
    INTERNAL        shift and go to state 14
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

  ! STATIC          [ reduce using rule 143 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 143 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 143 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 143 (empty -> .) ]
  ! INTERNAL        [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! CHAR            [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 143 (empty -> .) ]
  ! LIST            [ reduce using rule 143 (empty -> .) ]
  ! DICTIONARY      [ reduce using rule 143 (empty -> .) ]

    class_body                     shift and go to state 26
    class_member                   shift and go to state 27
    empty                          shift and go to state 28
    field_declaration              shift and go to state 29
    method_declaration             shift and go to state 30
    property_declaration           shift and go to state 31
    access_modifier                shift and go to state 32
    type_specifier                 shift and go to state 33
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 23

    (6) using_statement -> USING IDENTIFIER DOT IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 46


state 24

    (9) class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE . class_body CLOSE_BRACE
    (15) class_body -> . class_body class_member
    (16) class_body -> . class_member
    (17) class_body -> . empty
    (18) class_member -> . field_declaration
    (19) class_member -> . method_declaration
    (20) class_member -> . property_declaration
    (143) empty -> .
    (25) field_declaration -> . access_modifier type_specifier IDENTIFIER SEMICOLON
    (26) field_declaration -> . access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (27) field_declaration -> . type_specifier IDENTIFIER SEMICOLON
    (28) field_declaration -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (29) method_declaration -> . access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (30) method_declaration -> . access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (31) method_declaration -> . STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (21) property_declaration -> . access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE
    (11) access_modifier -> . PUBLIC
    (12) access_modifier -> . PRIVATE
    (13) access_modifier -> . PROTECTED
    (14) access_modifier -> . INTERNAL
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for INTERNAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for DICTIONARY resolved as shift
    CLOSE_BRACE     reduce using rule 143 (empty -> .)
    STATIC          shift and go to state 34
    PUBLIC          shift and go to state 11
    PRIVATE         shift and go to state 12
    PROTECTED       shift and go to state 13
    INTERNAL        shift and go to state 14
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

  ! STATIC          [ reduce using rule 143 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 143 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 143 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 143 (empty -> .) ]
  ! INTERNAL        [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! CHAR            [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 143 (empty -> .) ]
  ! LIST            [ reduce using rule 143 (empty -> .) ]
  ! DICTIONARY      [ reduce using rule 143 (empty -> .) ]

    access_modifier                shift and go to state 32
    class_body                     shift and go to state 47
    class_member                   shift and go to state 27
    empty                          shift and go to state 28
    field_declaration              shift and go to state 29
    method_declaration             shift and go to state 30
    property_declaration           shift and go to state 31
    type_specifier                 shift and go to state 33
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 25

    (43) type_specifier -> IDENTIFIER .

    IDENTIFIER      reduce using rule 43 (type_specifier -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 43 (type_specifier -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 43 (type_specifier -> IDENTIFIER .)
    COMMA           reduce using rule 43 (type_specifier -> IDENTIFIER .)


state 26

    (10) class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body . CLOSE_BRACE
    (15) class_body -> class_body . class_member
    (18) class_member -> . field_declaration
    (19) class_member -> . method_declaration
    (20) class_member -> . property_declaration
    (25) field_declaration -> . access_modifier type_specifier IDENTIFIER SEMICOLON
    (26) field_declaration -> . access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (27) field_declaration -> . type_specifier IDENTIFIER SEMICOLON
    (28) field_declaration -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (29) method_declaration -> . access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (30) method_declaration -> . access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (31) method_declaration -> . STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (21) property_declaration -> . access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE
    (11) access_modifier -> . PUBLIC
    (12) access_modifier -> . PRIVATE
    (13) access_modifier -> . PROTECTED
    (14) access_modifier -> . INTERNAL
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    CLOSE_BRACE     shift and go to state 48
    STATIC          shift and go to state 34
    PUBLIC          shift and go to state 11
    PRIVATE         shift and go to state 12
    PROTECTED       shift and go to state 13
    INTERNAL        shift and go to state 14
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    class_member                   shift and go to state 49
    field_declaration              shift and go to state 29
    method_declaration             shift and go to state 30
    property_declaration           shift and go to state 31
    access_modifier                shift and go to state 32
    type_specifier                 shift and go to state 33
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 27

    (16) class_body -> class_member .

    CLOSE_BRACE     reduce using rule 16 (class_body -> class_member .)
    STATIC          reduce using rule 16 (class_body -> class_member .)
    PUBLIC          reduce using rule 16 (class_body -> class_member .)
    PRIVATE         reduce using rule 16 (class_body -> class_member .)
    PROTECTED       reduce using rule 16 (class_body -> class_member .)
    INTERNAL        reduce using rule 16 (class_body -> class_member .)
    INT_TYPE        reduce using rule 16 (class_body -> class_member .)
    FLOAT_TYPE      reduce using rule 16 (class_body -> class_member .)
    DOUBLE          reduce using rule 16 (class_body -> class_member .)
    STRING_TYPE     reduce using rule 16 (class_body -> class_member .)
    BOOL_TYPE       reduce using rule 16 (class_body -> class_member .)
    CHAR            reduce using rule 16 (class_body -> class_member .)
    VOID            reduce using rule 16 (class_body -> class_member .)
    IDENTIFIER      reduce using rule 16 (class_body -> class_member .)
    LIST            reduce using rule 16 (class_body -> class_member .)
    DICTIONARY      reduce using rule 16 (class_body -> class_member .)


state 28

    (17) class_body -> empty .

    CLOSE_BRACE     reduce using rule 17 (class_body -> empty .)
    STATIC          reduce using rule 17 (class_body -> empty .)
    PUBLIC          reduce using rule 17 (class_body -> empty .)
    PRIVATE         reduce using rule 17 (class_body -> empty .)
    PROTECTED       reduce using rule 17 (class_body -> empty .)
    INTERNAL        reduce using rule 17 (class_body -> empty .)
    INT_TYPE        reduce using rule 17 (class_body -> empty .)
    FLOAT_TYPE      reduce using rule 17 (class_body -> empty .)
    DOUBLE          reduce using rule 17 (class_body -> empty .)
    STRING_TYPE     reduce using rule 17 (class_body -> empty .)
    BOOL_TYPE       reduce using rule 17 (class_body -> empty .)
    CHAR            reduce using rule 17 (class_body -> empty .)
    VOID            reduce using rule 17 (class_body -> empty .)
    IDENTIFIER      reduce using rule 17 (class_body -> empty .)
    LIST            reduce using rule 17 (class_body -> empty .)
    DICTIONARY      reduce using rule 17 (class_body -> empty .)


state 29

    (18) class_member -> field_declaration .

    CLOSE_BRACE     reduce using rule 18 (class_member -> field_declaration .)
    STATIC          reduce using rule 18 (class_member -> field_declaration .)
    PUBLIC          reduce using rule 18 (class_member -> field_declaration .)
    PRIVATE         reduce using rule 18 (class_member -> field_declaration .)
    PROTECTED       reduce using rule 18 (class_member -> field_declaration .)
    INTERNAL        reduce using rule 18 (class_member -> field_declaration .)
    INT_TYPE        reduce using rule 18 (class_member -> field_declaration .)
    FLOAT_TYPE      reduce using rule 18 (class_member -> field_declaration .)
    DOUBLE          reduce using rule 18 (class_member -> field_declaration .)
    STRING_TYPE     reduce using rule 18 (class_member -> field_declaration .)
    BOOL_TYPE       reduce using rule 18 (class_member -> field_declaration .)
    CHAR            reduce using rule 18 (class_member -> field_declaration .)
    VOID            reduce using rule 18 (class_member -> field_declaration .)
    IDENTIFIER      reduce using rule 18 (class_member -> field_declaration .)
    LIST            reduce using rule 18 (class_member -> field_declaration .)
    DICTIONARY      reduce using rule 18 (class_member -> field_declaration .)


state 30

    (19) class_member -> method_declaration .

    CLOSE_BRACE     reduce using rule 19 (class_member -> method_declaration .)
    STATIC          reduce using rule 19 (class_member -> method_declaration .)
    PUBLIC          reduce using rule 19 (class_member -> method_declaration .)
    PRIVATE         reduce using rule 19 (class_member -> method_declaration .)
    PROTECTED       reduce using rule 19 (class_member -> method_declaration .)
    INTERNAL        reduce using rule 19 (class_member -> method_declaration .)
    INT_TYPE        reduce using rule 19 (class_member -> method_declaration .)
    FLOAT_TYPE      reduce using rule 19 (class_member -> method_declaration .)
    DOUBLE          reduce using rule 19 (class_member -> method_declaration .)
    STRING_TYPE     reduce using rule 19 (class_member -> method_declaration .)
    BOOL_TYPE       reduce using rule 19 (class_member -> method_declaration .)
    CHAR            reduce using rule 19 (class_member -> method_declaration .)
    VOID            reduce using rule 19 (class_member -> method_declaration .)
    IDENTIFIER      reduce using rule 19 (class_member -> method_declaration .)
    LIST            reduce using rule 19 (class_member -> method_declaration .)
    DICTIONARY      reduce using rule 19 (class_member -> method_declaration .)


state 31

    (20) class_member -> property_declaration .

    CLOSE_BRACE     reduce using rule 20 (class_member -> property_declaration .)
    STATIC          reduce using rule 20 (class_member -> property_declaration .)
    PUBLIC          reduce using rule 20 (class_member -> property_declaration .)
    PRIVATE         reduce using rule 20 (class_member -> property_declaration .)
    PROTECTED       reduce using rule 20 (class_member -> property_declaration .)
    INTERNAL        reduce using rule 20 (class_member -> property_declaration .)
    INT_TYPE        reduce using rule 20 (class_member -> property_declaration .)
    FLOAT_TYPE      reduce using rule 20 (class_member -> property_declaration .)
    DOUBLE          reduce using rule 20 (class_member -> property_declaration .)
    STRING_TYPE     reduce using rule 20 (class_member -> property_declaration .)
    BOOL_TYPE       reduce using rule 20 (class_member -> property_declaration .)
    CHAR            reduce using rule 20 (class_member -> property_declaration .)
    VOID            reduce using rule 20 (class_member -> property_declaration .)
    IDENTIFIER      reduce using rule 20 (class_member -> property_declaration .)
    LIST            reduce using rule 20 (class_member -> property_declaration .)
    DICTIONARY      reduce using rule 20 (class_member -> property_declaration .)


state 32

    (25) field_declaration -> access_modifier . type_specifier IDENTIFIER SEMICOLON
    (26) field_declaration -> access_modifier . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (29) method_declaration -> access_modifier . STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (30) method_declaration -> access_modifier . type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (21) property_declaration -> access_modifier . type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    STATIC          shift and go to state 51
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 50
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 33

    (27) field_declaration -> type_specifier . IDENTIFIER SEMICOLON
    (28) field_declaration -> type_specifier . IDENTIFIER ASSIGN expression SEMICOLON
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    IDENTIFIER      shift and go to state 52
    OPEN_BRACKET    shift and go to state 53


state 34

    (31) method_declaration -> STATIC . type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 54
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 35

    (36) type_specifier -> INT_TYPE .

    IDENTIFIER      reduce using rule 36 (type_specifier -> INT_TYPE .)
    OPEN_BRACKET    reduce using rule 36 (type_specifier -> INT_TYPE .)
    GREATER_THAN    reduce using rule 36 (type_specifier -> INT_TYPE .)
    COMMA           reduce using rule 36 (type_specifier -> INT_TYPE .)


state 36

    (37) type_specifier -> FLOAT_TYPE .

    IDENTIFIER      reduce using rule 37 (type_specifier -> FLOAT_TYPE .)
    OPEN_BRACKET    reduce using rule 37 (type_specifier -> FLOAT_TYPE .)
    GREATER_THAN    reduce using rule 37 (type_specifier -> FLOAT_TYPE .)
    COMMA           reduce using rule 37 (type_specifier -> FLOAT_TYPE .)


state 37

    (38) type_specifier -> DOUBLE .

    IDENTIFIER      reduce using rule 38 (type_specifier -> DOUBLE .)
    OPEN_BRACKET    reduce using rule 38 (type_specifier -> DOUBLE .)
    GREATER_THAN    reduce using rule 38 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 38 (type_specifier -> DOUBLE .)


state 38

    (39) type_specifier -> STRING_TYPE .

    IDENTIFIER      reduce using rule 39 (type_specifier -> STRING_TYPE .)
    OPEN_BRACKET    reduce using rule 39 (type_specifier -> STRING_TYPE .)
    GREATER_THAN    reduce using rule 39 (type_specifier -> STRING_TYPE .)
    COMMA           reduce using rule 39 (type_specifier -> STRING_TYPE .)


state 39

    (40) type_specifier -> BOOL_TYPE .

    IDENTIFIER      reduce using rule 40 (type_specifier -> BOOL_TYPE .)
    OPEN_BRACKET    reduce using rule 40 (type_specifier -> BOOL_TYPE .)
    GREATER_THAN    reduce using rule 40 (type_specifier -> BOOL_TYPE .)
    COMMA           reduce using rule 40 (type_specifier -> BOOL_TYPE .)


state 40

    (41) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 41 (type_specifier -> CHAR .)
    OPEN_BRACKET    reduce using rule 41 (type_specifier -> CHAR .)
    GREATER_THAN    reduce using rule 41 (type_specifier -> CHAR .)
    COMMA           reduce using rule 41 (type_specifier -> CHAR .)


state 41

    (42) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 42 (type_specifier -> VOID .)
    OPEN_BRACKET    reduce using rule 42 (type_specifier -> VOID .)
    GREATER_THAN    reduce using rule 42 (type_specifier -> VOID .)
    COMMA           reduce using rule 42 (type_specifier -> VOID .)


state 42

    (44) type_specifier -> array_type .

    IDENTIFIER      reduce using rule 44 (type_specifier -> array_type .)
    OPEN_BRACKET    reduce using rule 44 (type_specifier -> array_type .)
    GREATER_THAN    reduce using rule 44 (type_specifier -> array_type .)
    COMMA           reduce using rule 44 (type_specifier -> array_type .)


state 43

    (45) type_specifier -> generic_type .

    IDENTIFIER      reduce using rule 45 (type_specifier -> generic_type .)
    OPEN_BRACKET    reduce using rule 45 (type_specifier -> generic_type .)
    GREATER_THAN    reduce using rule 45 (type_specifier -> generic_type .)
    COMMA           reduce using rule 45 (type_specifier -> generic_type .)


state 44

    (47) generic_type -> LIST . LESS_THAN type_specifier GREATER_THAN

    LESS_THAN       shift and go to state 55


state 45

    (48) generic_type -> DICTIONARY . LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    LESS_THAN       shift and go to state 56


state 46

    (6) using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON .

    USING           reduce using rule 6 (using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 6 (using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 6 (using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 6 (using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 6 (using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON .)
    INTERNAL        reduce using rule 6 (using_statement -> USING IDENTIFIER DOT IDENTIFIER SEMICOLON .)


state 47

    (9) class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body . CLOSE_BRACE
    (15) class_body -> class_body . class_member
    (18) class_member -> . field_declaration
    (19) class_member -> . method_declaration
    (20) class_member -> . property_declaration
    (25) field_declaration -> . access_modifier type_specifier IDENTIFIER SEMICOLON
    (26) field_declaration -> . access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (27) field_declaration -> . type_specifier IDENTIFIER SEMICOLON
    (28) field_declaration -> . type_specifier IDENTIFIER ASSIGN expression SEMICOLON
    (29) method_declaration -> . access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (30) method_declaration -> . access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (31) method_declaration -> . STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (21) property_declaration -> . access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE
    (11) access_modifier -> . PUBLIC
    (12) access_modifier -> . PRIVATE
    (13) access_modifier -> . PROTECTED
    (14) access_modifier -> . INTERNAL
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    CLOSE_BRACE     shift and go to state 57
    STATIC          shift and go to state 34
    PUBLIC          shift and go to state 11
    PRIVATE         shift and go to state 12
    PROTECTED       shift and go to state 13
    INTERNAL        shift and go to state 14
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    access_modifier                shift and go to state 32
    class_member                   shift and go to state 49
    field_declaration              shift and go to state 29
    method_declaration             shift and go to state 30
    property_declaration           shift and go to state 31
    type_specifier                 shift and go to state 33
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 48

    (10) class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .

    CLASS           reduce using rule 10 (class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    PUBLIC          reduce using rule 10 (class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    PRIVATE         reduce using rule 10 (class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    PROTECTED       reduce using rule 10 (class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    INTERNAL        reduce using rule 10 (class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    $end            reduce using rule 10 (class_declaration -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)


state 49

    (15) class_body -> class_body class_member .

    CLOSE_BRACE     reduce using rule 15 (class_body -> class_body class_member .)
    STATIC          reduce using rule 15 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 15 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 15 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 15 (class_body -> class_body class_member .)
    INTERNAL        reduce using rule 15 (class_body -> class_body class_member .)
    INT_TYPE        reduce using rule 15 (class_body -> class_body class_member .)
    FLOAT_TYPE      reduce using rule 15 (class_body -> class_body class_member .)
    DOUBLE          reduce using rule 15 (class_body -> class_body class_member .)
    STRING_TYPE     reduce using rule 15 (class_body -> class_body class_member .)
    BOOL_TYPE       reduce using rule 15 (class_body -> class_body class_member .)
    CHAR            reduce using rule 15 (class_body -> class_body class_member .)
    VOID            reduce using rule 15 (class_body -> class_body class_member .)
    IDENTIFIER      reduce using rule 15 (class_body -> class_body class_member .)
    LIST            reduce using rule 15 (class_body -> class_body class_member .)
    DICTIONARY      reduce using rule 15 (class_body -> class_body class_member .)


state 50

    (25) field_declaration -> access_modifier type_specifier . IDENTIFIER SEMICOLON
    (26) field_declaration -> access_modifier type_specifier . IDENTIFIER ASSIGN expression SEMICOLON
    (30) method_declaration -> access_modifier type_specifier . IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (21) property_declaration -> access_modifier type_specifier . IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    IDENTIFIER      shift and go to state 58
    OPEN_BRACKET    shift and go to state 53


state 51

    (29) method_declaration -> access_modifier STATIC . type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 59
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 52

    (27) field_declaration -> type_specifier IDENTIFIER . SEMICOLON
    (28) field_declaration -> type_specifier IDENTIFIER . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 60
    ASSIGN          shift and go to state 61


state 53

    (46) array_type -> type_specifier OPEN_BRACKET . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 62


state 54

    (31) method_declaration -> STATIC type_specifier . IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    IDENTIFIER      shift and go to state 63
    OPEN_BRACKET    shift and go to state 53


state 55

    (47) generic_type -> LIST LESS_THAN . type_specifier GREATER_THAN
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 64
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 56

    (48) generic_type -> DICTIONARY LESS_THAN . type_specifier COMMA type_specifier GREATER_THAN
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 65
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 57

    (9) class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .

    CLASS           reduce using rule 9 (class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    PUBLIC          reduce using rule 9 (class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    PRIVATE         reduce using rule 9 (class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    PROTECTED       reduce using rule 9 (class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    INTERNAL        reduce using rule 9 (class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    $end            reduce using rule 9 (class_declaration -> access_modifier CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)


state 58

    (25) field_declaration -> access_modifier type_specifier IDENTIFIER . SEMICOLON
    (26) field_declaration -> access_modifier type_specifier IDENTIFIER . ASSIGN expression SEMICOLON
    (30) method_declaration -> access_modifier type_specifier IDENTIFIER . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (21) property_declaration -> access_modifier type_specifier IDENTIFIER . OPEN_BRACE property_accessors CLOSE_BRACE

    SEMICOLON       shift and go to state 66
    ASSIGN          shift and go to state 67
    OPEN_PAREN      shift and go to state 68
    OPEN_BRACE      shift and go to state 69


state 59

    (29) method_declaration -> access_modifier STATIC type_specifier . IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    IDENTIFIER      shift and go to state 70
    OPEN_BRACKET    shift and go to state 53


state 60

    (27) field_declaration -> type_specifier IDENTIFIER SEMICOLON .

    CLOSE_BRACE     reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    INTERNAL        reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    INT_TYPE        reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    FLOAT_TYPE      reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    STRING_TYPE     reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    BOOL_TYPE       reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    LIST            reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)
    DICTIONARY      reduce using rule 27 (field_declaration -> type_specifier IDENTIFIER SEMICOLON .)


state 61

    (28) field_declaration -> type_specifier IDENTIFIER ASSIGN . expression SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 72
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 62

    (46) array_type -> type_specifier OPEN_BRACKET CLOSE_BRACKET .

    IDENTIFIER      reduce using rule 46 (array_type -> type_specifier OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 46 (array_type -> type_specifier OPEN_BRACKET CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 46 (array_type -> type_specifier OPEN_BRACKET CLOSE_BRACKET .)
    COMMA           reduce using rule 46 (array_type -> type_specifier OPEN_BRACKET CLOSE_BRACKET .)


state 63

    (31) method_declaration -> STATIC type_specifier IDENTIFIER . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 96


state 64

    (47) generic_type -> LIST LESS_THAN type_specifier . GREATER_THAN
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    GREATER_THAN    shift and go to state 97
    OPEN_BRACKET    shift and go to state 53


state 65

    (48) generic_type -> DICTIONARY LESS_THAN type_specifier . COMMA type_specifier GREATER_THAN
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    COMMA           shift and go to state 98
    OPEN_BRACKET    shift and go to state 53


state 66

    (25) field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .

    CLOSE_BRACE     reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    INTERNAL        reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    INT_TYPE        reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    FLOAT_TYPE      reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    STRING_TYPE     reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    BOOL_TYPE       reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    LIST            reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)
    DICTIONARY      reduce using rule 25 (field_declaration -> access_modifier type_specifier IDENTIFIER SEMICOLON .)


state 67

    (26) field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN . expression SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 99
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 68

    (30) method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (32) parameter_list -> . parameter_list COMMA parameter
    (33) parameter_list -> . parameter
    (34) parameter_list -> . empty
    (35) parameter -> . type_specifier IDENTIFIER
    (143) empty -> .
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    CLOSE_PAREN     reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 100
    parameter_list                 shift and go to state 101
    parameter                      shift and go to state 102
    empty                          shift and go to state 103
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 69

    (21) property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE . property_accessors CLOSE_BRACE
    (22) property_accessors -> . GET SEMICOLON SET SEMICOLON
    (23) property_accessors -> . GET SEMICOLON
    (24) property_accessors -> . SET SEMICOLON

    GET             shift and go to state 105
    SET             shift and go to state 106

    property_accessors             shift and go to state 104

state 70

    (29) method_declaration -> access_modifier STATIC type_specifier IDENTIFIER . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 107


state 71

    (97) primary_expression -> IDENTIFIER .
    (127) function_call -> IDENTIFIER . OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> IDENTIFIER . DOT IDENTIFIER

    SEMICOLON       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 97 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 97 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 97 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 97 (primary_expression -> IDENTIFIER .)
    PERCENT         reduce using rule 97 (primary_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 97 (primary_expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 97 (primary_expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 97 (primary_expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 97 (primary_expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 97 (primary_expression -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 97 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 97 (primary_expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 97 (primary_expression -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 97 (primary_expression -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 97 (primary_expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 108
    OPEN_BRACKET    shift and go to state 109
    DOT             shift and go to state 110


state 72

    (28) field_declaration -> type_specifier IDENTIFIER ASSIGN expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       shift and go to state 111
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 73

    (93) expression -> primary_expression .

    SEMICOLON       reduce using rule 93 (expression -> primary_expression .)
    PLUS            reduce using rule 93 (expression -> primary_expression .)
    MINUS           reduce using rule 93 (expression -> primary_expression .)
    MULTIPLY        reduce using rule 93 (expression -> primary_expression .)
    DIVIDE          reduce using rule 93 (expression -> primary_expression .)
    PERCENT         reduce using rule 93 (expression -> primary_expression .)
    EQUAL           reduce using rule 93 (expression -> primary_expression .)
    NOT_EQUAL       reduce using rule 93 (expression -> primary_expression .)
    LESS_THAN       reduce using rule 93 (expression -> primary_expression .)
    GREATER_THAN    reduce using rule 93 (expression -> primary_expression .)
    LESS_THAN_EQUAL reduce using rule 93 (expression -> primary_expression .)
    GREATER_THAN_EQUAL reduce using rule 93 (expression -> primary_expression .)
    CLOSE_PAREN     reduce using rule 93 (expression -> primary_expression .)
    CLOSE_BRACE     reduce using rule 93 (expression -> primary_expression .)
    COMMA           reduce using rule 93 (expression -> primary_expression .)
    CLOSE_BRACKET   reduce using rule 93 (expression -> primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 93 (expression -> primary_expression .)
    DOUBLE_PIPE     reduce using rule 93 (expression -> primary_expression .)


state 74

    (94) expression -> arithmetic_expression .

    SEMICOLON       reduce using rule 94 (expression -> arithmetic_expression .)
    PLUS            reduce using rule 94 (expression -> arithmetic_expression .)
    MINUS           reduce using rule 94 (expression -> arithmetic_expression .)
    MULTIPLY        reduce using rule 94 (expression -> arithmetic_expression .)
    DIVIDE          reduce using rule 94 (expression -> arithmetic_expression .)
    PERCENT         reduce using rule 94 (expression -> arithmetic_expression .)
    EQUAL           reduce using rule 94 (expression -> arithmetic_expression .)
    NOT_EQUAL       reduce using rule 94 (expression -> arithmetic_expression .)
    LESS_THAN       reduce using rule 94 (expression -> arithmetic_expression .)
    GREATER_THAN    reduce using rule 94 (expression -> arithmetic_expression .)
    LESS_THAN_EQUAL reduce using rule 94 (expression -> arithmetic_expression .)
    GREATER_THAN_EQUAL reduce using rule 94 (expression -> arithmetic_expression .)
    CLOSE_PAREN     reduce using rule 94 (expression -> arithmetic_expression .)
    CLOSE_BRACE     reduce using rule 94 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 94 (expression -> arithmetic_expression .)
    CLOSE_BRACKET   reduce using rule 94 (expression -> arithmetic_expression .)
    DOUBLE_AMPERSAND reduce using rule 94 (expression -> arithmetic_expression .)
    DOUBLE_PIPE     reduce using rule 94 (expression -> arithmetic_expression .)


state 75

    (95) expression -> boolean_expression .
    (118) boolean_expression -> boolean_expression . DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> boolean_expression . DOUBLE_PIPE boolean_expression

  ! shift/reduce conflict for DOUBLE_AMPERSAND resolved as shift
  ! shift/reduce conflict for DOUBLE_PIPE resolved as shift
    SEMICOLON       reduce using rule 95 (expression -> boolean_expression .)
    PLUS            reduce using rule 95 (expression -> boolean_expression .)
    MINUS           reduce using rule 95 (expression -> boolean_expression .)
    MULTIPLY        reduce using rule 95 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 95 (expression -> boolean_expression .)
    PERCENT         reduce using rule 95 (expression -> boolean_expression .)
    EQUAL           reduce using rule 95 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN       reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN    reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    CLOSE_PAREN     reduce using rule 95 (expression -> boolean_expression .)
    CLOSE_BRACE     reduce using rule 95 (expression -> boolean_expression .)
    COMMA           reduce using rule 95 (expression -> boolean_expression .)
    CLOSE_BRACKET   reduce using rule 95 (expression -> boolean_expression .)
    DOUBLE_AMPERSAND shift and go to state 123
    DOUBLE_PIPE     shift and go to state 124

  ! DOUBLE_AMPERSAND [ reduce using rule 95 (expression -> boolean_expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 95 (expression -> boolean_expression .) ]


state 76

    (96) primary_expression -> literal .

    SEMICOLON       reduce using rule 96 (primary_expression -> literal .)
    PLUS            reduce using rule 96 (primary_expression -> literal .)
    MINUS           reduce using rule 96 (primary_expression -> literal .)
    MULTIPLY        reduce using rule 96 (primary_expression -> literal .)
    DIVIDE          reduce using rule 96 (primary_expression -> literal .)
    PERCENT         reduce using rule 96 (primary_expression -> literal .)
    EQUAL           reduce using rule 96 (primary_expression -> literal .)
    NOT_EQUAL       reduce using rule 96 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 96 (primary_expression -> literal .)
    GREATER_THAN    reduce using rule 96 (primary_expression -> literal .)
    LESS_THAN_EQUAL reduce using rule 96 (primary_expression -> literal .)
    GREATER_THAN_EQUAL reduce using rule 96 (primary_expression -> literal .)
    CLOSE_PAREN     reduce using rule 96 (primary_expression -> literal .)
    CLOSE_BRACE     reduce using rule 96 (primary_expression -> literal .)
    COMMA           reduce using rule 96 (primary_expression -> literal .)
    CLOSE_BRACKET   reduce using rule 96 (primary_expression -> literal .)
    DOUBLE_AMPERSAND reduce using rule 96 (primary_expression -> literal .)
    DOUBLE_PIPE     reduce using rule 96 (primary_expression -> literal .)


state 77

    (98) primary_expression -> function_call .

    SEMICOLON       reduce using rule 98 (primary_expression -> function_call .)
    PLUS            reduce using rule 98 (primary_expression -> function_call .)
    MINUS           reduce using rule 98 (primary_expression -> function_call .)
    MULTIPLY        reduce using rule 98 (primary_expression -> function_call .)
    DIVIDE          reduce using rule 98 (primary_expression -> function_call .)
    PERCENT         reduce using rule 98 (primary_expression -> function_call .)
    EQUAL           reduce using rule 98 (primary_expression -> function_call .)
    NOT_EQUAL       reduce using rule 98 (primary_expression -> function_call .)
    LESS_THAN       reduce using rule 98 (primary_expression -> function_call .)
    GREATER_THAN    reduce using rule 98 (primary_expression -> function_call .)
    LESS_THAN_EQUAL reduce using rule 98 (primary_expression -> function_call .)
    GREATER_THAN_EQUAL reduce using rule 98 (primary_expression -> function_call .)
    CLOSE_PAREN     reduce using rule 98 (primary_expression -> function_call .)
    CLOSE_BRACE     reduce using rule 98 (primary_expression -> function_call .)
    COMMA           reduce using rule 98 (primary_expression -> function_call .)
    CLOSE_BRACKET   reduce using rule 98 (primary_expression -> function_call .)
    DOUBLE_AMPERSAND reduce using rule 98 (primary_expression -> function_call .)
    DOUBLE_PIPE     reduce using rule 98 (primary_expression -> function_call .)


state 78

    (99) primary_expression -> array_access .

    SEMICOLON       reduce using rule 99 (primary_expression -> array_access .)
    PLUS            reduce using rule 99 (primary_expression -> array_access .)
    MINUS           reduce using rule 99 (primary_expression -> array_access .)
    MULTIPLY        reduce using rule 99 (primary_expression -> array_access .)
    DIVIDE          reduce using rule 99 (primary_expression -> array_access .)
    PERCENT         reduce using rule 99 (primary_expression -> array_access .)
    EQUAL           reduce using rule 99 (primary_expression -> array_access .)
    NOT_EQUAL       reduce using rule 99 (primary_expression -> array_access .)
    LESS_THAN       reduce using rule 99 (primary_expression -> array_access .)
    GREATER_THAN    reduce using rule 99 (primary_expression -> array_access .)
    LESS_THAN_EQUAL reduce using rule 99 (primary_expression -> array_access .)
    GREATER_THAN_EQUAL reduce using rule 99 (primary_expression -> array_access .)
    CLOSE_PAREN     reduce using rule 99 (primary_expression -> array_access .)
    CLOSE_BRACE     reduce using rule 99 (primary_expression -> array_access .)
    COMMA           reduce using rule 99 (primary_expression -> array_access .)
    CLOSE_BRACKET   reduce using rule 99 (primary_expression -> array_access .)
    DOUBLE_AMPERSAND reduce using rule 99 (primary_expression -> array_access .)
    DOUBLE_PIPE     reduce using rule 99 (primary_expression -> array_access .)


state 79

    (100) primary_expression -> member_access .

    SEMICOLON       reduce using rule 100 (primary_expression -> member_access .)
    PLUS            reduce using rule 100 (primary_expression -> member_access .)
    MINUS           reduce using rule 100 (primary_expression -> member_access .)
    MULTIPLY        reduce using rule 100 (primary_expression -> member_access .)
    DIVIDE          reduce using rule 100 (primary_expression -> member_access .)
    PERCENT         reduce using rule 100 (primary_expression -> member_access .)
    EQUAL           reduce using rule 100 (primary_expression -> member_access .)
    NOT_EQUAL       reduce using rule 100 (primary_expression -> member_access .)
    LESS_THAN       reduce using rule 100 (primary_expression -> member_access .)
    GREATER_THAN    reduce using rule 100 (primary_expression -> member_access .)
    LESS_THAN_EQUAL reduce using rule 100 (primary_expression -> member_access .)
    GREATER_THAN_EQUAL reduce using rule 100 (primary_expression -> member_access .)
    CLOSE_PAREN     reduce using rule 100 (primary_expression -> member_access .)
    CLOSE_BRACE     reduce using rule 100 (primary_expression -> member_access .)
    COMMA           reduce using rule 100 (primary_expression -> member_access .)
    CLOSE_BRACKET   reduce using rule 100 (primary_expression -> member_access .)
    DOUBLE_AMPERSAND reduce using rule 100 (primary_expression -> member_access .)
    DOUBLE_PIPE     reduce using rule 100 (primary_expression -> member_access .)


state 80

    (101) primary_expression -> array_initialization .

    SEMICOLON       reduce using rule 101 (primary_expression -> array_initialization .)
    PLUS            reduce using rule 101 (primary_expression -> array_initialization .)
    MINUS           reduce using rule 101 (primary_expression -> array_initialization .)
    MULTIPLY        reduce using rule 101 (primary_expression -> array_initialization .)
    DIVIDE          reduce using rule 101 (primary_expression -> array_initialization .)
    PERCENT         reduce using rule 101 (primary_expression -> array_initialization .)
    EQUAL           reduce using rule 101 (primary_expression -> array_initialization .)
    NOT_EQUAL       reduce using rule 101 (primary_expression -> array_initialization .)
    LESS_THAN       reduce using rule 101 (primary_expression -> array_initialization .)
    GREATER_THAN    reduce using rule 101 (primary_expression -> array_initialization .)
    LESS_THAN_EQUAL reduce using rule 101 (primary_expression -> array_initialization .)
    GREATER_THAN_EQUAL reduce using rule 101 (primary_expression -> array_initialization .)
    CLOSE_PAREN     reduce using rule 101 (primary_expression -> array_initialization .)
    CLOSE_BRACE     reduce using rule 101 (primary_expression -> array_initialization .)
    COMMA           reduce using rule 101 (primary_expression -> array_initialization .)
    CLOSE_BRACKET   reduce using rule 101 (primary_expression -> array_initialization .)
    DOUBLE_AMPERSAND reduce using rule 101 (primary_expression -> array_initialization .)
    DOUBLE_PIPE     reduce using rule 101 (primary_expression -> array_initialization .)


state 81

    (102) primary_expression -> input_statement .

    SEMICOLON       reduce using rule 102 (primary_expression -> input_statement .)
    PLUS            reduce using rule 102 (primary_expression -> input_statement .)
    MINUS           reduce using rule 102 (primary_expression -> input_statement .)
    MULTIPLY        reduce using rule 102 (primary_expression -> input_statement .)
    DIVIDE          reduce using rule 102 (primary_expression -> input_statement .)
    PERCENT         reduce using rule 102 (primary_expression -> input_statement .)
    EQUAL           reduce using rule 102 (primary_expression -> input_statement .)
    NOT_EQUAL       reduce using rule 102 (primary_expression -> input_statement .)
    LESS_THAN       reduce using rule 102 (primary_expression -> input_statement .)
    GREATER_THAN    reduce using rule 102 (primary_expression -> input_statement .)
    LESS_THAN_EQUAL reduce using rule 102 (primary_expression -> input_statement .)
    GREATER_THAN_EQUAL reduce using rule 102 (primary_expression -> input_statement .)
    CLOSE_PAREN     reduce using rule 102 (primary_expression -> input_statement .)
    CLOSE_BRACE     reduce using rule 102 (primary_expression -> input_statement .)
    COMMA           reduce using rule 102 (primary_expression -> input_statement .)
    CLOSE_BRACKET   reduce using rule 102 (primary_expression -> input_statement .)
    DOUBLE_AMPERSAND reduce using rule 102 (primary_expression -> input_statement .)
    DOUBLE_PIPE     reduce using rule 102 (primary_expression -> input_statement .)


state 82

    (103) primary_expression -> TRUE .

    SEMICOLON       reduce using rule 103 (primary_expression -> TRUE .)
    PLUS            reduce using rule 103 (primary_expression -> TRUE .)
    MINUS           reduce using rule 103 (primary_expression -> TRUE .)
    MULTIPLY        reduce using rule 103 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 103 (primary_expression -> TRUE .)
    PERCENT         reduce using rule 103 (primary_expression -> TRUE .)
    EQUAL           reduce using rule 103 (primary_expression -> TRUE .)
    NOT_EQUAL       reduce using rule 103 (primary_expression -> TRUE .)
    LESS_THAN       reduce using rule 103 (primary_expression -> TRUE .)
    GREATER_THAN    reduce using rule 103 (primary_expression -> TRUE .)
    LESS_THAN_EQUAL reduce using rule 103 (primary_expression -> TRUE .)
    GREATER_THAN_EQUAL reduce using rule 103 (primary_expression -> TRUE .)
    CLOSE_PAREN     reduce using rule 103 (primary_expression -> TRUE .)
    CLOSE_BRACE     reduce using rule 103 (primary_expression -> TRUE .)
    COMMA           reduce using rule 103 (primary_expression -> TRUE .)
    CLOSE_BRACKET   reduce using rule 103 (primary_expression -> TRUE .)
    DOUBLE_AMPERSAND reduce using rule 103 (primary_expression -> TRUE .)
    DOUBLE_PIPE     reduce using rule 103 (primary_expression -> TRUE .)


state 83

    (104) primary_expression -> FALSE .

    SEMICOLON       reduce using rule 104 (primary_expression -> FALSE .)
    PLUS            reduce using rule 104 (primary_expression -> FALSE .)
    MINUS           reduce using rule 104 (primary_expression -> FALSE .)
    MULTIPLY        reduce using rule 104 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 104 (primary_expression -> FALSE .)
    PERCENT         reduce using rule 104 (primary_expression -> FALSE .)
    EQUAL           reduce using rule 104 (primary_expression -> FALSE .)
    NOT_EQUAL       reduce using rule 104 (primary_expression -> FALSE .)
    LESS_THAN       reduce using rule 104 (primary_expression -> FALSE .)
    GREATER_THAN    reduce using rule 104 (primary_expression -> FALSE .)
    LESS_THAN_EQUAL reduce using rule 104 (primary_expression -> FALSE .)
    GREATER_THAN_EQUAL reduce using rule 104 (primary_expression -> FALSE .)
    CLOSE_PAREN     reduce using rule 104 (primary_expression -> FALSE .)
    CLOSE_BRACE     reduce using rule 104 (primary_expression -> FALSE .)
    COMMA           reduce using rule 104 (primary_expression -> FALSE .)
    CLOSE_BRACKET   reduce using rule 104 (primary_expression -> FALSE .)
    DOUBLE_AMPERSAND reduce using rule 104 (primary_expression -> FALSE .)
    DOUBLE_PIPE     reduce using rule 104 (primary_expression -> FALSE .)


state 84

    (105) primary_expression -> OPEN_PAREN . expression CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 125
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 85

    (111) arithmetic_expression -> MINUS . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 126
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 86

    (120) boolean_expression -> BANG . boolean_expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    BANG            shift and go to state 86
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    boolean_expression             shift and go to state 127
    expression                     shift and go to state 128
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 87

    (138) literal -> INTEGER .

    SEMICOLON       reduce using rule 138 (literal -> INTEGER .)
    PLUS            reduce using rule 138 (literal -> INTEGER .)
    MINUS           reduce using rule 138 (literal -> INTEGER .)
    MULTIPLY        reduce using rule 138 (literal -> INTEGER .)
    DIVIDE          reduce using rule 138 (literal -> INTEGER .)
    PERCENT         reduce using rule 138 (literal -> INTEGER .)
    EQUAL           reduce using rule 138 (literal -> INTEGER .)
    NOT_EQUAL       reduce using rule 138 (literal -> INTEGER .)
    LESS_THAN       reduce using rule 138 (literal -> INTEGER .)
    GREATER_THAN    reduce using rule 138 (literal -> INTEGER .)
    LESS_THAN_EQUAL reduce using rule 138 (literal -> INTEGER .)
    GREATER_THAN_EQUAL reduce using rule 138 (literal -> INTEGER .)
    CLOSE_PAREN     reduce using rule 138 (literal -> INTEGER .)
    CLOSE_BRACE     reduce using rule 138 (literal -> INTEGER .)
    COMMA           reduce using rule 138 (literal -> INTEGER .)
    CLOSE_BRACKET   reduce using rule 138 (literal -> INTEGER .)
    DOUBLE_AMPERSAND reduce using rule 138 (literal -> INTEGER .)
    DOUBLE_PIPE     reduce using rule 138 (literal -> INTEGER .)


state 88

    (139) literal -> FLOAT .

    SEMICOLON       reduce using rule 139 (literal -> FLOAT .)
    PLUS            reduce using rule 139 (literal -> FLOAT .)
    MINUS           reduce using rule 139 (literal -> FLOAT .)
    MULTIPLY        reduce using rule 139 (literal -> FLOAT .)
    DIVIDE          reduce using rule 139 (literal -> FLOAT .)
    PERCENT         reduce using rule 139 (literal -> FLOAT .)
    EQUAL           reduce using rule 139 (literal -> FLOAT .)
    NOT_EQUAL       reduce using rule 139 (literal -> FLOAT .)
    LESS_THAN       reduce using rule 139 (literal -> FLOAT .)
    GREATER_THAN    reduce using rule 139 (literal -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 139 (literal -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 139 (literal -> FLOAT .)
    CLOSE_PAREN     reduce using rule 139 (literal -> FLOAT .)
    CLOSE_BRACE     reduce using rule 139 (literal -> FLOAT .)
    COMMA           reduce using rule 139 (literal -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 139 (literal -> FLOAT .)
    DOUBLE_AMPERSAND reduce using rule 139 (literal -> FLOAT .)
    DOUBLE_PIPE     reduce using rule 139 (literal -> FLOAT .)


state 89

    (140) literal -> STRING .

    SEMICOLON       reduce using rule 140 (literal -> STRING .)
    PLUS            reduce using rule 140 (literal -> STRING .)
    MINUS           reduce using rule 140 (literal -> STRING .)
    MULTIPLY        reduce using rule 140 (literal -> STRING .)
    DIVIDE          reduce using rule 140 (literal -> STRING .)
    PERCENT         reduce using rule 140 (literal -> STRING .)
    EQUAL           reduce using rule 140 (literal -> STRING .)
    NOT_EQUAL       reduce using rule 140 (literal -> STRING .)
    LESS_THAN       reduce using rule 140 (literal -> STRING .)
    GREATER_THAN    reduce using rule 140 (literal -> STRING .)
    LESS_THAN_EQUAL reduce using rule 140 (literal -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 140 (literal -> STRING .)
    CLOSE_PAREN     reduce using rule 140 (literal -> STRING .)
    CLOSE_BRACE     reduce using rule 140 (literal -> STRING .)
    COMMA           reduce using rule 140 (literal -> STRING .)
    CLOSE_BRACKET   reduce using rule 140 (literal -> STRING .)
    DOUBLE_AMPERSAND reduce using rule 140 (literal -> STRING .)
    DOUBLE_PIPE     reduce using rule 140 (literal -> STRING .)


state 90

    (141) literal -> CHAR_LITERAL .

    SEMICOLON       reduce using rule 141 (literal -> CHAR_LITERAL .)
    PLUS            reduce using rule 141 (literal -> CHAR_LITERAL .)
    MINUS           reduce using rule 141 (literal -> CHAR_LITERAL .)
    MULTIPLY        reduce using rule 141 (literal -> CHAR_LITERAL .)
    DIVIDE          reduce using rule 141 (literal -> CHAR_LITERAL .)
    PERCENT         reduce using rule 141 (literal -> CHAR_LITERAL .)
    EQUAL           reduce using rule 141 (literal -> CHAR_LITERAL .)
    NOT_EQUAL       reduce using rule 141 (literal -> CHAR_LITERAL .)
    LESS_THAN       reduce using rule 141 (literal -> CHAR_LITERAL .)
    GREATER_THAN    reduce using rule 141 (literal -> CHAR_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 141 (literal -> CHAR_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 141 (literal -> CHAR_LITERAL .)
    CLOSE_PAREN     reduce using rule 141 (literal -> CHAR_LITERAL .)
    CLOSE_BRACE     reduce using rule 141 (literal -> CHAR_LITERAL .)
    COMMA           reduce using rule 141 (literal -> CHAR_LITERAL .)
    CLOSE_BRACKET   reduce using rule 141 (literal -> CHAR_LITERAL .)
    DOUBLE_AMPERSAND reduce using rule 141 (literal -> CHAR_LITERAL .)
    DOUBLE_PIPE     reduce using rule 141 (literal -> CHAR_LITERAL .)


state 91

    (142) literal -> NULL .

    SEMICOLON       reduce using rule 142 (literal -> NULL .)
    PLUS            reduce using rule 142 (literal -> NULL .)
    MINUS           reduce using rule 142 (literal -> NULL .)
    MULTIPLY        reduce using rule 142 (literal -> NULL .)
    DIVIDE          reduce using rule 142 (literal -> NULL .)
    PERCENT         reduce using rule 142 (literal -> NULL .)
    EQUAL           reduce using rule 142 (literal -> NULL .)
    NOT_EQUAL       reduce using rule 142 (literal -> NULL .)
    LESS_THAN       reduce using rule 142 (literal -> NULL .)
    GREATER_THAN    reduce using rule 142 (literal -> NULL .)
    LESS_THAN_EQUAL reduce using rule 142 (literal -> NULL .)
    GREATER_THAN_EQUAL reduce using rule 142 (literal -> NULL .)
    CLOSE_PAREN     reduce using rule 142 (literal -> NULL .)
    CLOSE_BRACE     reduce using rule 142 (literal -> NULL .)
    COMMA           reduce using rule 142 (literal -> NULL .)
    CLOSE_BRACKET   reduce using rule 142 (literal -> NULL .)
    DOUBLE_AMPERSAND reduce using rule 142 (literal -> NULL .)
    DOUBLE_PIPE     reduce using rule 142 (literal -> NULL .)


state 92

    (121) array_initialization -> OPEN_BRACE . expression_list CLOSE_BRACE
    (131) expression_list -> . expression_list COMMA expression
    (132) expression_list -> . expression
    (133) expression_list -> . empty
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (143) empty -> .
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    CLOSE_BRACE     reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression_list                shift and go to state 129
    expression                     shift and go to state 130
    empty                          shift and go to state 131
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 93

    (122) array_initialization -> NEW . type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> NEW . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> NEW . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    DICTIONARY      shift and go to state 133
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44

    type_specifier                 shift and go to state 132
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 94

    (91) input_statement -> CONSOLE . DOT READLINE OPEN_PAREN CLOSE_PAREN

    DOT             shift and go to state 134


state 95

    (92) input_statement -> CONVERT . DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    DOT             shift and go to state 135


state 96

    (31) method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (32) parameter_list -> . parameter_list COMMA parameter
    (33) parameter_list -> . parameter
    (34) parameter_list -> . empty
    (35) parameter -> . type_specifier IDENTIFIER
    (143) empty -> .
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    CLOSE_PAREN     reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 100
    parameter_list                 shift and go to state 136
    parameter                      shift and go to state 102
    empty                          shift and go to state 103
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 97

    (47) generic_type -> LIST LESS_THAN type_specifier GREATER_THAN .

    IDENTIFIER      reduce using rule 47 (generic_type -> LIST LESS_THAN type_specifier GREATER_THAN .)
    OPEN_BRACKET    reduce using rule 47 (generic_type -> LIST LESS_THAN type_specifier GREATER_THAN .)
    GREATER_THAN    reduce using rule 47 (generic_type -> LIST LESS_THAN type_specifier GREATER_THAN .)
    COMMA           reduce using rule 47 (generic_type -> LIST LESS_THAN type_specifier GREATER_THAN .)


state 98

    (48) generic_type -> DICTIONARY LESS_THAN type_specifier COMMA . type_specifier GREATER_THAN
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 137
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 99

    (26) field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       shift and go to state 138
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 100

    (35) parameter -> type_specifier . IDENTIFIER
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    IDENTIFIER      shift and go to state 139
    OPEN_BRACKET    shift and go to state 53


state 101

    (30) method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (32) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 140
    COMMA           shift and go to state 141


state 102

    (33) parameter_list -> parameter .

    CLOSE_PAREN     reduce using rule 33 (parameter_list -> parameter .)
    COMMA           reduce using rule 33 (parameter_list -> parameter .)


state 103

    (34) parameter_list -> empty .

    CLOSE_PAREN     reduce using rule 34 (parameter_list -> empty .)
    COMMA           reduce using rule 34 (parameter_list -> empty .)


state 104

    (21) property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 142


state 105

    (22) property_accessors -> GET . SEMICOLON SET SEMICOLON
    (23) property_accessors -> GET . SEMICOLON

    SEMICOLON       shift and go to state 143


state 106

    (24) property_accessors -> SET . SEMICOLON

    SEMICOLON       shift and go to state 144


state 107

    (29) method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (32) parameter_list -> . parameter_list COMMA parameter
    (33) parameter_list -> . parameter
    (34) parameter_list -> . empty
    (35) parameter -> . type_specifier IDENTIFIER
    (143) empty -> .
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    CLOSE_PAREN     reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 100
    parameter_list                 shift and go to state 145
    parameter                      shift and go to state 102
    empty                          shift and go to state 103
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 108

    (127) function_call -> IDENTIFIER OPEN_PAREN . argument_list CLOSE_PAREN
    (128) argument_list -> . argument_list COMMA expression
    (129) argument_list -> . expression
    (130) argument_list -> . empty
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (143) empty -> .
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    argument_list                  shift and go to state 146
    expression                     shift and go to state 147
    empty                          shift and go to state 148
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 109

    (125) array_access -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 149
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 110

    (126) member_access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 150


state 111

    (28) field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .

    CLOSE_BRACE     reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    STATIC          reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    PRIVATE         reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    PROTECTED       reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    INTERNAL        reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR            reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 28 (field_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)


state 112

    (106) arithmetic_expression -> expression PLUS . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 151
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 113

    (107) arithmetic_expression -> expression MINUS . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 152
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 114

    (108) arithmetic_expression -> expression MULTIPLY . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 153
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 115

    (109) arithmetic_expression -> expression DIVIDE . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 154
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 116

    (110) arithmetic_expression -> expression PERCENT . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 155
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 117

    (112) boolean_expression -> expression EQUAL . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 156
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 118

    (113) boolean_expression -> expression NOT_EQUAL . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 157
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 119

    (114) boolean_expression -> expression LESS_THAN . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 158
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 120

    (115) boolean_expression -> expression GREATER_THAN . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 159
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 121

    (116) boolean_expression -> expression LESS_THAN_EQUAL . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 160
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 122

    (117) boolean_expression -> expression GREATER_THAN_EQUAL . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 161
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 123

    (118) boolean_expression -> boolean_expression DOUBLE_AMPERSAND . boolean_expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    BANG            shift and go to state 86
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    boolean_expression             shift and go to state 162
    expression                     shift and go to state 128
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 124

    (119) boolean_expression -> boolean_expression DOUBLE_PIPE . boolean_expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    BANG            shift and go to state 86
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    boolean_expression             shift and go to state 163
    expression                     shift and go to state 128
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 125

    (105) primary_expression -> OPEN_PAREN expression . CLOSE_PAREN
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_PAREN     shift and go to state 164
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 126

    (111) arithmetic_expression -> MINUS expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    PLUS            reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    MINUS           reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    MULTIPLY        reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    DIVIDE          reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    PERCENT         reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    EQUAL           reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    LESS_THAN       reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    CLOSE_PAREN     reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    CLOSE_BRACE     reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    COMMA           reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    CLOSE_BRACKET   reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    DOUBLE_AMPERSAND reduce using rule 111 (arithmetic_expression -> MINUS expression .)
    DOUBLE_PIPE     reduce using rule 111 (arithmetic_expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 112 ]
  ! MINUS           [ shift and go to state 113 ]
  ! MULTIPLY        [ shift and go to state 114 ]
  ! DIVIDE          [ shift and go to state 115 ]
  ! PERCENT         [ shift and go to state 116 ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 127

    (120) boolean_expression -> BANG boolean_expression .
    (118) boolean_expression -> boolean_expression . DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> boolean_expression . DOUBLE_PIPE boolean_expression
    (95) expression -> boolean_expression .

  ! reduce/reduce conflict for EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for PERCENT resolved using rule 95 (expression -> boolean_expression .)
    DOUBLE_AMPERSAND reduce using rule 120 (boolean_expression -> BANG boolean_expression .)
    DOUBLE_PIPE     reduce using rule 120 (boolean_expression -> BANG boolean_expression .)
    SEMICOLON       reduce using rule 120 (boolean_expression -> BANG boolean_expression .)
    CLOSE_PAREN     reduce using rule 120 (boolean_expression -> BANG boolean_expression .)
    CLOSE_BRACE     reduce using rule 120 (boolean_expression -> BANG boolean_expression .)
    COMMA           reduce using rule 120 (boolean_expression -> BANG boolean_expression .)
    CLOSE_BRACKET   reduce using rule 120 (boolean_expression -> BANG boolean_expression .)
    EQUAL           reduce using rule 95 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN       reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN    reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    PLUS            reduce using rule 95 (expression -> boolean_expression .)
    MINUS           reduce using rule 95 (expression -> boolean_expression .)
    MULTIPLY        reduce using rule 95 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 95 (expression -> boolean_expression .)
    PERCENT         reduce using rule 95 (expression -> boolean_expression .)

  ! PLUS            [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! MINUS           [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! MULTIPLY        [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! DIVIDE          [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! PERCENT         [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! EQUAL           [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! NOT_EQUAL       [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! LESS_THAN       [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! GREATER_THAN    [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 120 (boolean_expression -> BANG boolean_expression .) ]
  ! DOUBLE_AMPERSAND [ shift and go to state 123 ]
  ! DOUBLE_PIPE     [ shift and go to state 124 ]


state 128

    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression

    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116


state 129

    (121) array_initialization -> OPEN_BRACE expression_list . CLOSE_BRACE
    (131) expression_list -> expression_list . COMMA expression

    CLOSE_BRACE     shift and go to state 165
    COMMA           shift and go to state 166


state 130

    (132) expression_list -> expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_BRACE     reduce using rule 132 (expression_list -> expression .)
    COMMA           reduce using rule 132 (expression_list -> expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 131

    (133) expression_list -> empty .

    CLOSE_BRACE     reduce using rule 133 (expression_list -> empty .)
    COMMA           reduce using rule 133 (expression_list -> empty .)


state 132

    (122) array_initialization -> NEW type_specifier . OPEN_BRACKET expression CLOSE_BRACKET
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 167


state 133

    (123) array_initialization -> NEW DICTIONARY . LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> NEW DICTIONARY . LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (48) generic_type -> DICTIONARY . LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    LESS_THAN       shift and go to state 168


state 134

    (91) input_statement -> CONSOLE DOT . READLINE OPEN_PAREN CLOSE_PAREN

    READLINE        shift and go to state 169


state 135

    (92) input_statement -> CONVERT DOT . TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    TOINT32         shift and go to state 170


state 136

    (31) method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (32) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 171
    COMMA           shift and go to state 141


state 137

    (48) generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier . GREATER_THAN
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    GREATER_THAN    shift and go to state 172
    OPEN_BRACKET    shift and go to state 53


state 138

    (26) field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .

    CLOSE_BRACE     reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    STATIC          reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    PRIVATE         reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    PROTECTED       reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    INTERNAL        reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR            reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 26 (field_declaration -> access_modifier type_specifier IDENTIFIER ASSIGN expression SEMICOLON .)


state 139

    (35) parameter -> type_specifier IDENTIFIER .

    CLOSE_PAREN     reduce using rule 35 (parameter -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 35 (parameter -> type_specifier IDENTIFIER .)


state 140

    (30) method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 173


state 141

    (32) parameter_list -> parameter_list COMMA . parameter
    (35) parameter -> . type_specifier IDENTIFIER
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    parameter                      shift and go to state 174
    type_specifier                 shift and go to state 100
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 142

    (21) property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    STATIC          reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    PUBLIC          reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    PRIVATE         reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    PROTECTED       reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    INTERNAL        reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    INT_TYPE        reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    DOUBLE          reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    CHAR            reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    VOID            reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    LIST            reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)
    DICTIONARY      reduce using rule 21 (property_declaration -> access_modifier type_specifier IDENTIFIER OPEN_BRACE property_accessors CLOSE_BRACE .)


state 143

    (22) property_accessors -> GET SEMICOLON . SET SEMICOLON
    (23) property_accessors -> GET SEMICOLON .

    SET             shift and go to state 175
    CLOSE_BRACE     reduce using rule 23 (property_accessors -> GET SEMICOLON .)


state 144

    (24) property_accessors -> SET SEMICOLON .

    CLOSE_BRACE     reduce using rule 24 (property_accessors -> SET SEMICOLON .)


state 145

    (29) method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (32) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 176
    COMMA           shift and go to state 141


state 146

    (127) function_call -> IDENTIFIER OPEN_PAREN argument_list . CLOSE_PAREN
    (128) argument_list -> argument_list . COMMA expression

    CLOSE_PAREN     shift and go to state 177
    COMMA           shift and go to state 178


state 147

    (129) argument_list -> expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_PAREN     reduce using rule 129 (argument_list -> expression .)
    COMMA           reduce using rule 129 (argument_list -> expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 148

    (130) argument_list -> empty .

    CLOSE_PAREN     reduce using rule 130 (argument_list -> empty .)
    COMMA           reduce using rule 130 (argument_list -> empty .)


state 149

    (125) array_access -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_BRACKET   shift and go to state 179
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 150

    (126) member_access -> IDENTIFIER DOT IDENTIFIER .

    SEMICOLON       reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    PLUS            reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    PERCENT         reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    EQUAL           reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    NOT_EQUAL       reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    LESS_THAN       reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    GREATER_THAN    reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)


state 151

    (106) arithmetic_expression -> expression PLUS expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    PLUS            reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    MINUS           reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    EQUAL           reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    LESS_THAN_EQUAL reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    GREATER_THAN_EQUAL reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    CLOSE_PAREN     reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    CLOSE_BRACE     reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    COMMA           reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    CLOSE_BRACKET   reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    DOUBLE_AMPERSAND reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    DOUBLE_PIPE     reduce using rule 106 (arithmetic_expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116

  ! MULTIPLY        [ reduce using rule 106 (arithmetic_expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 106 (arithmetic_expression -> expression PLUS expression .) ]
  ! PERCENT         [ reduce using rule 106 (arithmetic_expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 112 ]
  ! MINUS           [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 152

    (107) arithmetic_expression -> expression MINUS expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    PLUS            reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    MINUS           reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    EQUAL           reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    CLOSE_PAREN     reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    CLOSE_BRACE     reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    COMMA           reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    CLOSE_BRACKET   reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    DOUBLE_AMPERSAND reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    DOUBLE_PIPE     reduce using rule 107 (arithmetic_expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116

  ! MULTIPLY        [ reduce using rule 107 (arithmetic_expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 107 (arithmetic_expression -> expression MINUS expression .) ]
  ! PERCENT         [ reduce using rule 107 (arithmetic_expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 112 ]
  ! MINUS           [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 153

    (108) arithmetic_expression -> expression MULTIPLY expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    PERCENT         reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    EQUAL           reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    NOT_EQUAL       reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    LESS_THAN_EQUAL reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    GREATER_THAN_EQUAL reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    CLOSE_PAREN     reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    CLOSE_BRACE     reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    CLOSE_BRACKET   reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    DOUBLE_AMPERSAND reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)
    DOUBLE_PIPE     reduce using rule 108 (arithmetic_expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 112 ]
  ! MINUS           [ shift and go to state 113 ]
  ! MULTIPLY        [ shift and go to state 114 ]
  ! DIVIDE          [ shift and go to state 115 ]
  ! PERCENT         [ shift and go to state 116 ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 154

    (109) arithmetic_expression -> expression DIVIDE expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    PERCENT         reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    CLOSE_PAREN     reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    CLOSE_BRACE     reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    CLOSE_BRACKET   reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    DOUBLE_AMPERSAND reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)
    DOUBLE_PIPE     reduce using rule 109 (arithmetic_expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 112 ]
  ! MINUS           [ shift and go to state 113 ]
  ! MULTIPLY        [ shift and go to state 114 ]
  ! DIVIDE          [ shift and go to state 115 ]
  ! PERCENT         [ shift and go to state 116 ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 155

    (110) arithmetic_expression -> expression PERCENT expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    PLUS            reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    MINUS           reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    MULTIPLY        reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    DIVIDE          reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    PERCENT         reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    EQUAL           reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    NOT_EQUAL       reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    LESS_THAN       reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    GREATER_THAN    reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    LESS_THAN_EQUAL reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    GREATER_THAN_EQUAL reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    CLOSE_PAREN     reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    CLOSE_BRACE     reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    COMMA           reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    CLOSE_BRACKET   reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    DOUBLE_AMPERSAND reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)
    DOUBLE_PIPE     reduce using rule 110 (arithmetic_expression -> expression PERCENT expression .)

  ! PLUS            [ shift and go to state 112 ]
  ! MINUS           [ shift and go to state 113 ]
  ! MULTIPLY        [ shift and go to state 114 ]
  ! DIVIDE          [ shift and go to state 115 ]
  ! PERCENT         [ shift and go to state 116 ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 156

    (112) boolean_expression -> expression EQUAL expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    DOUBLE_AMPERSAND reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    CLOSE_PAREN     reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    CLOSE_BRACE     reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    COMMA           reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    CLOSE_BRACKET   reduce using rule 112 (boolean_expression -> expression EQUAL expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122

  ! PLUS            [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! PERCENT         [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 112 (boolean_expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]


state 157

    (113) boolean_expression -> expression NOT_EQUAL expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    DOUBLE_AMPERSAND reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    SEMICOLON       reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    CLOSE_PAREN     reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    CLOSE_BRACE     reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    CLOSE_BRACKET   reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122

  ! PLUS            [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! PERCENT         [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 113 (boolean_expression -> expression NOT_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]


state 158

    (114) boolean_expression -> expression LESS_THAN expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    DOUBLE_AMPERSAND reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    DOUBLE_PIPE     reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    SEMICOLON       reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    EQUAL           reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    NOT_EQUAL       reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    CLOSE_PAREN     reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    CLOSE_BRACE     reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    CLOSE_BRACKET   reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116

  ! PLUS            [ reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .) ]
  ! PERCENT         [ reduce using rule 114 (boolean_expression -> expression LESS_THAN expression .) ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 159

    (115) boolean_expression -> expression GREATER_THAN expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    DOUBLE_AMPERSAND reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    DOUBLE_PIPE     reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    SEMICOLON       reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    CLOSE_PAREN     reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    CLOSE_BRACE     reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    CLOSE_BRACKET   reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116

  ! PLUS            [ reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .) ]
  ! PERCENT         [ reduce using rule 115 (boolean_expression -> expression GREATER_THAN expression .) ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 160

    (116) boolean_expression -> expression LESS_THAN_EQUAL expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    DOUBLE_AMPERSAND reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    EQUAL           reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    CLOSE_PAREN     reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    CLOSE_BRACE     reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    COMMA           reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    CLOSE_BRACKET   reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116

  ! PLUS            [ reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .) ]
  ! PERCENT         [ reduce using rule 116 (boolean_expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 161

    (117) boolean_expression -> expression GREATER_THAN_EQUAL expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    DOUBLE_AMPERSAND reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    EQUAL           reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    CLOSE_PAREN     reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    CLOSE_BRACE     reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    COMMA           reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    CLOSE_BRACKET   reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116

  ! PLUS            [ reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! PERCENT         [ reduce using rule 117 (boolean_expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 117 ]
  ! NOT_EQUAL       [ shift and go to state 118 ]
  ! LESS_THAN       [ shift and go to state 119 ]
  ! GREATER_THAN    [ shift and go to state 120 ]
  ! LESS_THAN_EQUAL [ shift and go to state 121 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 122 ]


state 162

    (118) boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .
    (118) boolean_expression -> boolean_expression . DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> boolean_expression . DOUBLE_PIPE boolean_expression
    (95) expression -> boolean_expression .

  ! reduce/reduce conflict for EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for PERCENT resolved using rule 95 (expression -> boolean_expression .)
    DOUBLE_AMPERSAND reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .)
    DOUBLE_PIPE     reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .)
    SEMICOLON       reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .)
    CLOSE_PAREN     reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .)
    CLOSE_BRACE     reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .)
    COMMA           reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .)
    CLOSE_BRACKET   reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .)
    EQUAL           reduce using rule 95 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN       reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN    reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    PLUS            reduce using rule 95 (expression -> boolean_expression .)
    MINUS           reduce using rule 95 (expression -> boolean_expression .)
    MULTIPLY        reduce using rule 95 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 95 (expression -> boolean_expression .)
    PERCENT         reduce using rule 95 (expression -> boolean_expression .)

  ! PLUS            [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! MINUS           [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! MULTIPLY        [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! DIVIDE          [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! PERCENT         [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! EQUAL           [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! NOT_EQUAL       [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! LESS_THAN       [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! GREATER_THAN    [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 118 (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression .) ]
  ! DOUBLE_AMPERSAND [ shift and go to state 123 ]
  ! DOUBLE_PIPE     [ shift and go to state 124 ]


state 163

    (119) boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .
    (118) boolean_expression -> boolean_expression . DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> boolean_expression . DOUBLE_PIPE boolean_expression
    (95) expression -> boolean_expression .

  ! reduce/reduce conflict for EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 95 (expression -> boolean_expression .)
  ! reduce/reduce conflict for PERCENT resolved using rule 95 (expression -> boolean_expression .)
    DOUBLE_PIPE     reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .)
    SEMICOLON       reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .)
    CLOSE_PAREN     reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .)
    CLOSE_BRACE     reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .)
    COMMA           reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .)
    CLOSE_BRACKET   reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .)
    DOUBLE_AMPERSAND shift and go to state 123
    EQUAL           reduce using rule 95 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN       reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN    reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    PLUS            reduce using rule 95 (expression -> boolean_expression .)
    MINUS           reduce using rule 95 (expression -> boolean_expression .)
    MULTIPLY        reduce using rule 95 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 95 (expression -> boolean_expression .)
    PERCENT         reduce using rule 95 (expression -> boolean_expression .)

  ! DOUBLE_AMPERSAND [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! PLUS            [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! MINUS           [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! MULTIPLY        [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! DIVIDE          [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! PERCENT         [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! EQUAL           [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! NOT_EQUAL       [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! LESS_THAN       [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! GREATER_THAN    [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 119 (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression .) ]
  ! DOUBLE_PIPE     [ shift and go to state 124 ]


state 164

    (105) primary_expression -> OPEN_PAREN expression CLOSE_PAREN .

    SEMICOLON       reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MULTIPLY        reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIVIDE          reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PERCENT         reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQUAL           reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS_THAN       reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 105 (primary_expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 165

    (121) array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .

    SEMICOLON       reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    PLUS            reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    MINUS           reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    MULTIPLY        reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    DIVIDE          reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    PERCENT         reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    EQUAL           reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    NOT_EQUAL       reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    LESS_THAN       reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    GREATER_THAN    reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    LESS_THAN_EQUAL reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    COMMA           reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    CLOSE_BRACKET   reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    DOUBLE_AMPERSAND reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)
    DOUBLE_PIPE     reduce using rule 121 (array_initialization -> OPEN_BRACE expression_list CLOSE_BRACE .)


state 166

    (131) expression_list -> expression_list COMMA . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 180
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 167

    (122) array_initialization -> NEW type_specifier OPEN_BRACKET . expression CLOSE_BRACKET
    (46) array_type -> type_specifier OPEN_BRACKET . CLOSE_BRACKET
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    CLOSE_BRACKET   shift and go to state 62
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 181
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 168

    (123) array_initialization -> NEW DICTIONARY LESS_THAN . type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> NEW DICTIONARY LESS_THAN . type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (48) generic_type -> DICTIONARY LESS_THAN . type_specifier COMMA type_specifier GREATER_THAN
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 182
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 169

    (91) input_statement -> CONSOLE DOT READLINE . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 183


state 170

    (92) input_statement -> CONVERT DOT TOINT32 . OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 184


state 171

    (31) method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 185


state 172

    (48) generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN .

    IDENTIFIER      reduce using rule 48 (generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN .)
    OPEN_BRACKET    reduce using rule 48 (generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN .)
    GREATER_THAN    reduce using rule 48 (generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN .)
    COMMA           reduce using rule 48 (generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN .)


state 173

    (30) method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (49) statement_list -> . statement_list statement
    (50) statement_list -> . statement
    (51) statement_list -> . empty
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (143) empty -> .
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for OPEN_BRACE resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for CONVERT resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for BANG resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for DICTIONARY resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR_LITERAL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
    CLOSE_BRACE     reduce using rule 143 (empty -> .)
    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! FOREACH         [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! OPEN_BRACE      [ reduce using rule 143 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 143 (empty -> .) ]
  ! CONVERT         [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! CHAR            [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! TRUE            [ reduce using rule 143 (empty -> .) ]
  ! FALSE           [ reduce using rule 143 (empty -> .) ]
  ! OPEN_PAREN      [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! BANG            [ reduce using rule 143 (empty -> .) ]
  ! LIST            [ reduce using rule 143 (empty -> .) ]
  ! DICTIONARY      [ reduce using rule 143 (empty -> .) ]
  ! INTEGER         [ reduce using rule 143 (empty -> .) ]
  ! FLOAT           [ reduce using rule 143 (empty -> .) ]
  ! STRING          [ reduce using rule 143 (empty -> .) ]
  ! CHAR_LITERAL    [ reduce using rule 143 (empty -> .) ]
  ! NULL            [ reduce using rule 143 (empty -> .) ]
  ! NEW             [ reduce using rule 143 (empty -> .) ]

    type_specifier                 shift and go to state 186
    statement_list                 shift and go to state 189
    statement                      shift and go to state 190
    empty                          shift and go to state 191
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    boolean_expression             shift and go to state 75
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 174

    (32) parameter_list -> parameter_list COMMA parameter .

    CLOSE_PAREN     reduce using rule 32 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 32 (parameter_list -> parameter_list COMMA parameter .)


state 175

    (22) property_accessors -> GET SEMICOLON SET . SEMICOLON

    SEMICOLON       shift and go to state 211


state 176

    (29) method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 212


state 177

    (127) function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .

    SEMICOLON       reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    PLUS            reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    MINUS           reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    MULTIPLY        reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    DIVIDE          reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    PERCENT         reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    EQUAL           reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    LESS_THAN       reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    COMMA           reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 127 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)


state 178

    (128) argument_list -> argument_list COMMA . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 213
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 179

    (125) array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .

    SEMICOLON       reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVIDE          reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PERCENT         reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    EQUAL           reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    NOT_EQUAL       reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACE     reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DOUBLE_AMPERSAND reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DOUBLE_PIPE     reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)


state 180

    (131) expression_list -> expression_list COMMA expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_BRACE     reduce using rule 131 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 131 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 181

    (122) array_initialization -> NEW type_specifier OPEN_BRACKET expression . CLOSE_BRACKET
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_BRACKET   shift and go to state 214
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 182

    (123) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier . COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier . COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (48) generic_type -> DICTIONARY LESS_THAN type_specifier . COMMA type_specifier GREATER_THAN
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    COMMA           shift and go to state 215
    OPEN_BRACKET    shift and go to state 53


state 183

    (91) input_statement -> CONSOLE DOT READLINE OPEN_PAREN . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 216


state 184

    (92) input_statement -> CONVERT DOT TOINT32 OPEN_PAREN . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    CONSOLE         shift and go to state 217


state 185

    (31) method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (49) statement_list -> . statement_list statement
    (50) statement_list -> . statement
    (51) statement_list -> . empty
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (143) empty -> .
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for OPEN_BRACE resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for CONVERT resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for BANG resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for DICTIONARY resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR_LITERAL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
    CLOSE_BRACE     reduce using rule 143 (empty -> .)
    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! FOREACH         [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! OPEN_BRACE      [ reduce using rule 143 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 143 (empty -> .) ]
  ! CONVERT         [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! CHAR            [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! TRUE            [ reduce using rule 143 (empty -> .) ]
  ! FALSE           [ reduce using rule 143 (empty -> .) ]
  ! OPEN_PAREN      [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! BANG            [ reduce using rule 143 (empty -> .) ]
  ! LIST            [ reduce using rule 143 (empty -> .) ]
  ! DICTIONARY      [ reduce using rule 143 (empty -> .) ]
  ! INTEGER         [ reduce using rule 143 (empty -> .) ]
  ! FLOAT           [ reduce using rule 143 (empty -> .) ]
  ! STRING          [ reduce using rule 143 (empty -> .) ]
  ! CHAR_LITERAL    [ reduce using rule 143 (empty -> .) ]
  ! NULL            [ reduce using rule 143 (empty -> .) ]
  ! NEW             [ reduce using rule 143 (empty -> .) ]

    type_specifier                 shift and go to state 186
    statement_list                 shift and go to state 218
    statement                      shift and go to state 190
    empty                          shift and go to state 191
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    boolean_expression             shift and go to state 75
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 186

    (65) declaration_statement -> type_specifier . variable_declarator_list SEMICOLON
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET
    (67) variable_declarator_list -> . variable_declarator_list COMMA variable_declarator
    (68) variable_declarator_list -> . variable_declarator
    (69) variable_declarator -> . IDENTIFIER
    (70) variable_declarator -> . IDENTIFIER ASSIGN expression

    OPEN_BRACKET    shift and go to state 53
    IDENTIFIER      shift and go to state 221

    variable_declarator_list       shift and go to state 219
    variable_declarator            shift and go to state 220

state 187

    (71) assignment_statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (72) assignment_statement -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> IDENTIFIER . DOT IDENTIFIER ASSIGN expression SEMICOLON
    (43) type_specifier -> IDENTIFIER .
    (97) primary_expression -> IDENTIFIER .
    (127) function_call -> IDENTIFIER . OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> IDENTIFIER . DOT IDENTIFIER

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    ASSIGN          shift and go to state 222
    OPEN_BRACKET    shift and go to state 223
    DOT             shift and go to state 224
    IDENTIFIER      reduce using rule 43 (type_specifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 97 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 97 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 97 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 97 (primary_expression -> IDENTIFIER .)
    PERCENT         reduce using rule 97 (primary_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 97 (primary_expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 97 (primary_expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 97 (primary_expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 97 (primary_expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 108

  ! OPEN_BRACKET    [ reduce using rule 43 (type_specifier -> IDENTIFIER .) ]


state 188

    (63) block_statement -> OPEN_BRACE . statement_list CLOSE_BRACE
    (121) array_initialization -> OPEN_BRACE . expression_list CLOSE_BRACE
    (49) statement_list -> . statement_list statement
    (50) statement_list -> . statement
    (51) statement_list -> . empty
    (131) expression_list -> . expression_list COMMA expression
    (132) expression_list -> . expression
    (133) expression_list -> . empty
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (143) empty -> .
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for OPEN_BRACE resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for CONVERT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for BANG resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR_LITERAL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for DICTIONARY resolved as shift
    CLOSE_BRACE     reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 228
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! FOREACH         [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! OPEN_BRACE      [ reduce using rule 143 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 143 (empty -> .) ]
  ! CONVERT         [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! CHAR            [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! TRUE            [ reduce using rule 143 (empty -> .) ]
  ! FALSE           [ reduce using rule 143 (empty -> .) ]
  ! OPEN_PAREN      [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! BANG            [ reduce using rule 143 (empty -> .) ]
  ! LIST            [ reduce using rule 143 (empty -> .) ]
  ! DICTIONARY      [ reduce using rule 143 (empty -> .) ]
  ! INTEGER         [ reduce using rule 143 (empty -> .) ]
  ! FLOAT           [ reduce using rule 143 (empty -> .) ]
  ! STRING          [ reduce using rule 143 (empty -> .) ]
  ! CHAR_LITERAL    [ reduce using rule 143 (empty -> .) ]
  ! NULL            [ reduce using rule 143 (empty -> .) ]
  ! NEW             [ reduce using rule 143 (empty -> .) ]

    statement_list                 shift and go to state 225
    expression_list                shift and go to state 129
    statement                      shift and go to state 190
    empty                          shift and go to state 226
    expression                     shift and go to state 227
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    type_specifier                 shift and go to state 186
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 189

    (30) method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (49) statement_list -> statement_list . statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 229
    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    type_specifier                 shift and go to state 186
    statement                      shift and go to state 230
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    boolean_expression             shift and go to state 75
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 190

    (50) statement_list -> statement .

    CLOSE_BRACE     reduce using rule 50 (statement_list -> statement .)
    VAR             reduce using rule 50 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 50 (statement_list -> statement .)
    IF              reduce using rule 50 (statement_list -> statement .)
    WHILE           reduce using rule 50 (statement_list -> statement .)
    FOR             reduce using rule 50 (statement_list -> statement .)
    FOREACH         reduce using rule 50 (statement_list -> statement .)
    RETURN          reduce using rule 50 (statement_list -> statement .)
    OPEN_BRACE      reduce using rule 50 (statement_list -> statement .)
    CONSOLE         reduce using rule 50 (statement_list -> statement .)
    CONVERT         reduce using rule 50 (statement_list -> statement .)
    INT_TYPE        reduce using rule 50 (statement_list -> statement .)
    FLOAT_TYPE      reduce using rule 50 (statement_list -> statement .)
    DOUBLE          reduce using rule 50 (statement_list -> statement .)
    STRING_TYPE     reduce using rule 50 (statement_list -> statement .)
    BOOL_TYPE       reduce using rule 50 (statement_list -> statement .)
    CHAR            reduce using rule 50 (statement_list -> statement .)
    VOID            reduce using rule 50 (statement_list -> statement .)
    TRUE            reduce using rule 50 (statement_list -> statement .)
    FALSE           reduce using rule 50 (statement_list -> statement .)
    OPEN_PAREN      reduce using rule 50 (statement_list -> statement .)
    MINUS           reduce using rule 50 (statement_list -> statement .)
    BANG            reduce using rule 50 (statement_list -> statement .)
    LIST            reduce using rule 50 (statement_list -> statement .)
    DICTIONARY      reduce using rule 50 (statement_list -> statement .)
    INTEGER         reduce using rule 50 (statement_list -> statement .)
    FLOAT           reduce using rule 50 (statement_list -> statement .)
    STRING          reduce using rule 50 (statement_list -> statement .)
    CHAR_LITERAL    reduce using rule 50 (statement_list -> statement .)
    NULL            reduce using rule 50 (statement_list -> statement .)
    NEW             reduce using rule 50 (statement_list -> statement .)


state 191

    (51) statement_list -> empty .

    CLOSE_BRACE     reduce using rule 51 (statement_list -> empty .)
    VAR             reduce using rule 51 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 51 (statement_list -> empty .)
    IF              reduce using rule 51 (statement_list -> empty .)
    WHILE           reduce using rule 51 (statement_list -> empty .)
    FOR             reduce using rule 51 (statement_list -> empty .)
    FOREACH         reduce using rule 51 (statement_list -> empty .)
    RETURN          reduce using rule 51 (statement_list -> empty .)
    OPEN_BRACE      reduce using rule 51 (statement_list -> empty .)
    CONSOLE         reduce using rule 51 (statement_list -> empty .)
    CONVERT         reduce using rule 51 (statement_list -> empty .)
    INT_TYPE        reduce using rule 51 (statement_list -> empty .)
    FLOAT_TYPE      reduce using rule 51 (statement_list -> empty .)
    DOUBLE          reduce using rule 51 (statement_list -> empty .)
    STRING_TYPE     reduce using rule 51 (statement_list -> empty .)
    BOOL_TYPE       reduce using rule 51 (statement_list -> empty .)
    CHAR            reduce using rule 51 (statement_list -> empty .)
    VOID            reduce using rule 51 (statement_list -> empty .)
    TRUE            reduce using rule 51 (statement_list -> empty .)
    FALSE           reduce using rule 51 (statement_list -> empty .)
    OPEN_PAREN      reduce using rule 51 (statement_list -> empty .)
    MINUS           reduce using rule 51 (statement_list -> empty .)
    BANG            reduce using rule 51 (statement_list -> empty .)
    LIST            reduce using rule 51 (statement_list -> empty .)
    DICTIONARY      reduce using rule 51 (statement_list -> empty .)
    INTEGER         reduce using rule 51 (statement_list -> empty .)
    FLOAT           reduce using rule 51 (statement_list -> empty .)
    STRING          reduce using rule 51 (statement_list -> empty .)
    CHAR_LITERAL    reduce using rule 51 (statement_list -> empty .)
    NULL            reduce using rule 51 (statement_list -> empty .)
    NEW             reduce using rule 51 (statement_list -> empty .)


state 192

    (52) statement -> expression_statement .

    CLOSE_BRACE     reduce using rule 52 (statement -> expression_statement .)
    VAR             reduce using rule 52 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 52 (statement -> expression_statement .)
    IF              reduce using rule 52 (statement -> expression_statement .)
    WHILE           reduce using rule 52 (statement -> expression_statement .)
    FOR             reduce using rule 52 (statement -> expression_statement .)
    FOREACH         reduce using rule 52 (statement -> expression_statement .)
    RETURN          reduce using rule 52 (statement -> expression_statement .)
    OPEN_BRACE      reduce using rule 52 (statement -> expression_statement .)
    CONSOLE         reduce using rule 52 (statement -> expression_statement .)
    CONVERT         reduce using rule 52 (statement -> expression_statement .)
    INT_TYPE        reduce using rule 52 (statement -> expression_statement .)
    FLOAT_TYPE      reduce using rule 52 (statement -> expression_statement .)
    DOUBLE          reduce using rule 52 (statement -> expression_statement .)
    STRING_TYPE     reduce using rule 52 (statement -> expression_statement .)
    BOOL_TYPE       reduce using rule 52 (statement -> expression_statement .)
    CHAR            reduce using rule 52 (statement -> expression_statement .)
    VOID            reduce using rule 52 (statement -> expression_statement .)
    TRUE            reduce using rule 52 (statement -> expression_statement .)
    FALSE           reduce using rule 52 (statement -> expression_statement .)
    OPEN_PAREN      reduce using rule 52 (statement -> expression_statement .)
    MINUS           reduce using rule 52 (statement -> expression_statement .)
    BANG            reduce using rule 52 (statement -> expression_statement .)
    LIST            reduce using rule 52 (statement -> expression_statement .)
    DICTIONARY      reduce using rule 52 (statement -> expression_statement .)
    INTEGER         reduce using rule 52 (statement -> expression_statement .)
    FLOAT           reduce using rule 52 (statement -> expression_statement .)
    STRING          reduce using rule 52 (statement -> expression_statement .)
    CHAR_LITERAL    reduce using rule 52 (statement -> expression_statement .)
    NULL            reduce using rule 52 (statement -> expression_statement .)
    NEW             reduce using rule 52 (statement -> expression_statement .)
    ELSE            reduce using rule 52 (statement -> expression_statement .)


state 193

    (53) statement -> declaration_statement .

    CLOSE_BRACE     reduce using rule 53 (statement -> declaration_statement .)
    VAR             reduce using rule 53 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 53 (statement -> declaration_statement .)
    IF              reduce using rule 53 (statement -> declaration_statement .)
    WHILE           reduce using rule 53 (statement -> declaration_statement .)
    FOR             reduce using rule 53 (statement -> declaration_statement .)
    FOREACH         reduce using rule 53 (statement -> declaration_statement .)
    RETURN          reduce using rule 53 (statement -> declaration_statement .)
    OPEN_BRACE      reduce using rule 53 (statement -> declaration_statement .)
    CONSOLE         reduce using rule 53 (statement -> declaration_statement .)
    CONVERT         reduce using rule 53 (statement -> declaration_statement .)
    INT_TYPE        reduce using rule 53 (statement -> declaration_statement .)
    FLOAT_TYPE      reduce using rule 53 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 53 (statement -> declaration_statement .)
    STRING_TYPE     reduce using rule 53 (statement -> declaration_statement .)
    BOOL_TYPE       reduce using rule 53 (statement -> declaration_statement .)
    CHAR            reduce using rule 53 (statement -> declaration_statement .)
    VOID            reduce using rule 53 (statement -> declaration_statement .)
    TRUE            reduce using rule 53 (statement -> declaration_statement .)
    FALSE           reduce using rule 53 (statement -> declaration_statement .)
    OPEN_PAREN      reduce using rule 53 (statement -> declaration_statement .)
    MINUS           reduce using rule 53 (statement -> declaration_statement .)
    BANG            reduce using rule 53 (statement -> declaration_statement .)
    LIST            reduce using rule 53 (statement -> declaration_statement .)
    DICTIONARY      reduce using rule 53 (statement -> declaration_statement .)
    INTEGER         reduce using rule 53 (statement -> declaration_statement .)
    FLOAT           reduce using rule 53 (statement -> declaration_statement .)
    STRING          reduce using rule 53 (statement -> declaration_statement .)
    CHAR_LITERAL    reduce using rule 53 (statement -> declaration_statement .)
    NULL            reduce using rule 53 (statement -> declaration_statement .)
    NEW             reduce using rule 53 (statement -> declaration_statement .)
    ELSE            reduce using rule 53 (statement -> declaration_statement .)


state 194

    (54) statement -> assignment_statement .

    CLOSE_BRACE     reduce using rule 54 (statement -> assignment_statement .)
    VAR             reduce using rule 54 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 54 (statement -> assignment_statement .)
    IF              reduce using rule 54 (statement -> assignment_statement .)
    WHILE           reduce using rule 54 (statement -> assignment_statement .)
    FOR             reduce using rule 54 (statement -> assignment_statement .)
    FOREACH         reduce using rule 54 (statement -> assignment_statement .)
    RETURN          reduce using rule 54 (statement -> assignment_statement .)
    OPEN_BRACE      reduce using rule 54 (statement -> assignment_statement .)
    CONSOLE         reduce using rule 54 (statement -> assignment_statement .)
    CONVERT         reduce using rule 54 (statement -> assignment_statement .)
    INT_TYPE        reduce using rule 54 (statement -> assignment_statement .)
    FLOAT_TYPE      reduce using rule 54 (statement -> assignment_statement .)
    DOUBLE          reduce using rule 54 (statement -> assignment_statement .)
    STRING_TYPE     reduce using rule 54 (statement -> assignment_statement .)
    BOOL_TYPE       reduce using rule 54 (statement -> assignment_statement .)
    CHAR            reduce using rule 54 (statement -> assignment_statement .)
    VOID            reduce using rule 54 (statement -> assignment_statement .)
    TRUE            reduce using rule 54 (statement -> assignment_statement .)
    FALSE           reduce using rule 54 (statement -> assignment_statement .)
    OPEN_PAREN      reduce using rule 54 (statement -> assignment_statement .)
    MINUS           reduce using rule 54 (statement -> assignment_statement .)
    BANG            reduce using rule 54 (statement -> assignment_statement .)
    LIST            reduce using rule 54 (statement -> assignment_statement .)
    DICTIONARY      reduce using rule 54 (statement -> assignment_statement .)
    INTEGER         reduce using rule 54 (statement -> assignment_statement .)
    FLOAT           reduce using rule 54 (statement -> assignment_statement .)
    STRING          reduce using rule 54 (statement -> assignment_statement .)
    CHAR_LITERAL    reduce using rule 54 (statement -> assignment_statement .)
    NULL            reduce using rule 54 (statement -> assignment_statement .)
    NEW             reduce using rule 54 (statement -> assignment_statement .)
    ELSE            reduce using rule 54 (statement -> assignment_statement .)


state 195

    (55) statement -> if_statement .

    CLOSE_BRACE     reduce using rule 55 (statement -> if_statement .)
    VAR             reduce using rule 55 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 55 (statement -> if_statement .)
    IF              reduce using rule 55 (statement -> if_statement .)
    WHILE           reduce using rule 55 (statement -> if_statement .)
    FOR             reduce using rule 55 (statement -> if_statement .)
    FOREACH         reduce using rule 55 (statement -> if_statement .)
    RETURN          reduce using rule 55 (statement -> if_statement .)
    OPEN_BRACE      reduce using rule 55 (statement -> if_statement .)
    CONSOLE         reduce using rule 55 (statement -> if_statement .)
    CONVERT         reduce using rule 55 (statement -> if_statement .)
    INT_TYPE        reduce using rule 55 (statement -> if_statement .)
    FLOAT_TYPE      reduce using rule 55 (statement -> if_statement .)
    DOUBLE          reduce using rule 55 (statement -> if_statement .)
    STRING_TYPE     reduce using rule 55 (statement -> if_statement .)
    BOOL_TYPE       reduce using rule 55 (statement -> if_statement .)
    CHAR            reduce using rule 55 (statement -> if_statement .)
    VOID            reduce using rule 55 (statement -> if_statement .)
    TRUE            reduce using rule 55 (statement -> if_statement .)
    FALSE           reduce using rule 55 (statement -> if_statement .)
    OPEN_PAREN      reduce using rule 55 (statement -> if_statement .)
    MINUS           reduce using rule 55 (statement -> if_statement .)
    BANG            reduce using rule 55 (statement -> if_statement .)
    LIST            reduce using rule 55 (statement -> if_statement .)
    DICTIONARY      reduce using rule 55 (statement -> if_statement .)
    INTEGER         reduce using rule 55 (statement -> if_statement .)
    FLOAT           reduce using rule 55 (statement -> if_statement .)
    STRING          reduce using rule 55 (statement -> if_statement .)
    CHAR_LITERAL    reduce using rule 55 (statement -> if_statement .)
    NULL            reduce using rule 55 (statement -> if_statement .)
    NEW             reduce using rule 55 (statement -> if_statement .)
    ELSE            reduce using rule 55 (statement -> if_statement .)


state 196

    (56) statement -> while_statement .

    CLOSE_BRACE     reduce using rule 56 (statement -> while_statement .)
    VAR             reduce using rule 56 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 56 (statement -> while_statement .)
    IF              reduce using rule 56 (statement -> while_statement .)
    WHILE           reduce using rule 56 (statement -> while_statement .)
    FOR             reduce using rule 56 (statement -> while_statement .)
    FOREACH         reduce using rule 56 (statement -> while_statement .)
    RETURN          reduce using rule 56 (statement -> while_statement .)
    OPEN_BRACE      reduce using rule 56 (statement -> while_statement .)
    CONSOLE         reduce using rule 56 (statement -> while_statement .)
    CONVERT         reduce using rule 56 (statement -> while_statement .)
    INT_TYPE        reduce using rule 56 (statement -> while_statement .)
    FLOAT_TYPE      reduce using rule 56 (statement -> while_statement .)
    DOUBLE          reduce using rule 56 (statement -> while_statement .)
    STRING_TYPE     reduce using rule 56 (statement -> while_statement .)
    BOOL_TYPE       reduce using rule 56 (statement -> while_statement .)
    CHAR            reduce using rule 56 (statement -> while_statement .)
    VOID            reduce using rule 56 (statement -> while_statement .)
    TRUE            reduce using rule 56 (statement -> while_statement .)
    FALSE           reduce using rule 56 (statement -> while_statement .)
    OPEN_PAREN      reduce using rule 56 (statement -> while_statement .)
    MINUS           reduce using rule 56 (statement -> while_statement .)
    BANG            reduce using rule 56 (statement -> while_statement .)
    LIST            reduce using rule 56 (statement -> while_statement .)
    DICTIONARY      reduce using rule 56 (statement -> while_statement .)
    INTEGER         reduce using rule 56 (statement -> while_statement .)
    FLOAT           reduce using rule 56 (statement -> while_statement .)
    STRING          reduce using rule 56 (statement -> while_statement .)
    CHAR_LITERAL    reduce using rule 56 (statement -> while_statement .)
    NULL            reduce using rule 56 (statement -> while_statement .)
    NEW             reduce using rule 56 (statement -> while_statement .)
    ELSE            reduce using rule 56 (statement -> while_statement .)


state 197

    (57) statement -> for_statement .

    CLOSE_BRACE     reduce using rule 57 (statement -> for_statement .)
    VAR             reduce using rule 57 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 57 (statement -> for_statement .)
    IF              reduce using rule 57 (statement -> for_statement .)
    WHILE           reduce using rule 57 (statement -> for_statement .)
    FOR             reduce using rule 57 (statement -> for_statement .)
    FOREACH         reduce using rule 57 (statement -> for_statement .)
    RETURN          reduce using rule 57 (statement -> for_statement .)
    OPEN_BRACE      reduce using rule 57 (statement -> for_statement .)
    CONSOLE         reduce using rule 57 (statement -> for_statement .)
    CONVERT         reduce using rule 57 (statement -> for_statement .)
    INT_TYPE        reduce using rule 57 (statement -> for_statement .)
    FLOAT_TYPE      reduce using rule 57 (statement -> for_statement .)
    DOUBLE          reduce using rule 57 (statement -> for_statement .)
    STRING_TYPE     reduce using rule 57 (statement -> for_statement .)
    BOOL_TYPE       reduce using rule 57 (statement -> for_statement .)
    CHAR            reduce using rule 57 (statement -> for_statement .)
    VOID            reduce using rule 57 (statement -> for_statement .)
    TRUE            reduce using rule 57 (statement -> for_statement .)
    FALSE           reduce using rule 57 (statement -> for_statement .)
    OPEN_PAREN      reduce using rule 57 (statement -> for_statement .)
    MINUS           reduce using rule 57 (statement -> for_statement .)
    BANG            reduce using rule 57 (statement -> for_statement .)
    LIST            reduce using rule 57 (statement -> for_statement .)
    DICTIONARY      reduce using rule 57 (statement -> for_statement .)
    INTEGER         reduce using rule 57 (statement -> for_statement .)
    FLOAT           reduce using rule 57 (statement -> for_statement .)
    STRING          reduce using rule 57 (statement -> for_statement .)
    CHAR_LITERAL    reduce using rule 57 (statement -> for_statement .)
    NULL            reduce using rule 57 (statement -> for_statement .)
    NEW             reduce using rule 57 (statement -> for_statement .)
    ELSE            reduce using rule 57 (statement -> for_statement .)


state 198

    (58) statement -> foreach_statement .

    CLOSE_BRACE     reduce using rule 58 (statement -> foreach_statement .)
    VAR             reduce using rule 58 (statement -> foreach_statement .)
    IDENTIFIER      reduce using rule 58 (statement -> foreach_statement .)
    IF              reduce using rule 58 (statement -> foreach_statement .)
    WHILE           reduce using rule 58 (statement -> foreach_statement .)
    FOR             reduce using rule 58 (statement -> foreach_statement .)
    FOREACH         reduce using rule 58 (statement -> foreach_statement .)
    RETURN          reduce using rule 58 (statement -> foreach_statement .)
    OPEN_BRACE      reduce using rule 58 (statement -> foreach_statement .)
    CONSOLE         reduce using rule 58 (statement -> foreach_statement .)
    CONVERT         reduce using rule 58 (statement -> foreach_statement .)
    INT_TYPE        reduce using rule 58 (statement -> foreach_statement .)
    FLOAT_TYPE      reduce using rule 58 (statement -> foreach_statement .)
    DOUBLE          reduce using rule 58 (statement -> foreach_statement .)
    STRING_TYPE     reduce using rule 58 (statement -> foreach_statement .)
    BOOL_TYPE       reduce using rule 58 (statement -> foreach_statement .)
    CHAR            reduce using rule 58 (statement -> foreach_statement .)
    VOID            reduce using rule 58 (statement -> foreach_statement .)
    TRUE            reduce using rule 58 (statement -> foreach_statement .)
    FALSE           reduce using rule 58 (statement -> foreach_statement .)
    OPEN_PAREN      reduce using rule 58 (statement -> foreach_statement .)
    MINUS           reduce using rule 58 (statement -> foreach_statement .)
    BANG            reduce using rule 58 (statement -> foreach_statement .)
    LIST            reduce using rule 58 (statement -> foreach_statement .)
    DICTIONARY      reduce using rule 58 (statement -> foreach_statement .)
    INTEGER         reduce using rule 58 (statement -> foreach_statement .)
    FLOAT           reduce using rule 58 (statement -> foreach_statement .)
    STRING          reduce using rule 58 (statement -> foreach_statement .)
    CHAR_LITERAL    reduce using rule 58 (statement -> foreach_statement .)
    NULL            reduce using rule 58 (statement -> foreach_statement .)
    NEW             reduce using rule 58 (statement -> foreach_statement .)
    ELSE            reduce using rule 58 (statement -> foreach_statement .)


state 199

    (59) statement -> return_statement .

    CLOSE_BRACE     reduce using rule 59 (statement -> return_statement .)
    VAR             reduce using rule 59 (statement -> return_statement .)
    IDENTIFIER      reduce using rule 59 (statement -> return_statement .)
    IF              reduce using rule 59 (statement -> return_statement .)
    WHILE           reduce using rule 59 (statement -> return_statement .)
    FOR             reduce using rule 59 (statement -> return_statement .)
    FOREACH         reduce using rule 59 (statement -> return_statement .)
    RETURN          reduce using rule 59 (statement -> return_statement .)
    OPEN_BRACE      reduce using rule 59 (statement -> return_statement .)
    CONSOLE         reduce using rule 59 (statement -> return_statement .)
    CONVERT         reduce using rule 59 (statement -> return_statement .)
    INT_TYPE        reduce using rule 59 (statement -> return_statement .)
    FLOAT_TYPE      reduce using rule 59 (statement -> return_statement .)
    DOUBLE          reduce using rule 59 (statement -> return_statement .)
    STRING_TYPE     reduce using rule 59 (statement -> return_statement .)
    BOOL_TYPE       reduce using rule 59 (statement -> return_statement .)
    CHAR            reduce using rule 59 (statement -> return_statement .)
    VOID            reduce using rule 59 (statement -> return_statement .)
    TRUE            reduce using rule 59 (statement -> return_statement .)
    FALSE           reduce using rule 59 (statement -> return_statement .)
    OPEN_PAREN      reduce using rule 59 (statement -> return_statement .)
    MINUS           reduce using rule 59 (statement -> return_statement .)
    BANG            reduce using rule 59 (statement -> return_statement .)
    LIST            reduce using rule 59 (statement -> return_statement .)
    DICTIONARY      reduce using rule 59 (statement -> return_statement .)
    INTEGER         reduce using rule 59 (statement -> return_statement .)
    FLOAT           reduce using rule 59 (statement -> return_statement .)
    STRING          reduce using rule 59 (statement -> return_statement .)
    CHAR_LITERAL    reduce using rule 59 (statement -> return_statement .)
    NULL            reduce using rule 59 (statement -> return_statement .)
    NEW             reduce using rule 59 (statement -> return_statement .)
    ELSE            reduce using rule 59 (statement -> return_statement .)


state 200

    (60) statement -> block_statement .

    CLOSE_BRACE     reduce using rule 60 (statement -> block_statement .)
    VAR             reduce using rule 60 (statement -> block_statement .)
    IDENTIFIER      reduce using rule 60 (statement -> block_statement .)
    IF              reduce using rule 60 (statement -> block_statement .)
    WHILE           reduce using rule 60 (statement -> block_statement .)
    FOR             reduce using rule 60 (statement -> block_statement .)
    FOREACH         reduce using rule 60 (statement -> block_statement .)
    RETURN          reduce using rule 60 (statement -> block_statement .)
    OPEN_BRACE      reduce using rule 60 (statement -> block_statement .)
    CONSOLE         reduce using rule 60 (statement -> block_statement .)
    CONVERT         reduce using rule 60 (statement -> block_statement .)
    INT_TYPE        reduce using rule 60 (statement -> block_statement .)
    FLOAT_TYPE      reduce using rule 60 (statement -> block_statement .)
    DOUBLE          reduce using rule 60 (statement -> block_statement .)
    STRING_TYPE     reduce using rule 60 (statement -> block_statement .)
    BOOL_TYPE       reduce using rule 60 (statement -> block_statement .)
    CHAR            reduce using rule 60 (statement -> block_statement .)
    VOID            reduce using rule 60 (statement -> block_statement .)
    TRUE            reduce using rule 60 (statement -> block_statement .)
    FALSE           reduce using rule 60 (statement -> block_statement .)
    OPEN_PAREN      reduce using rule 60 (statement -> block_statement .)
    MINUS           reduce using rule 60 (statement -> block_statement .)
    BANG            reduce using rule 60 (statement -> block_statement .)
    LIST            reduce using rule 60 (statement -> block_statement .)
    DICTIONARY      reduce using rule 60 (statement -> block_statement .)
    INTEGER         reduce using rule 60 (statement -> block_statement .)
    FLOAT           reduce using rule 60 (statement -> block_statement .)
    STRING          reduce using rule 60 (statement -> block_statement .)
    CHAR_LITERAL    reduce using rule 60 (statement -> block_statement .)
    NULL            reduce using rule 60 (statement -> block_statement .)
    NEW             reduce using rule 60 (statement -> block_statement .)
    ELSE            reduce using rule 60 (statement -> block_statement .)


state 201

    (61) statement -> print_statement .

    CLOSE_BRACE     reduce using rule 61 (statement -> print_statement .)
    VAR             reduce using rule 61 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 61 (statement -> print_statement .)
    IF              reduce using rule 61 (statement -> print_statement .)
    WHILE           reduce using rule 61 (statement -> print_statement .)
    FOR             reduce using rule 61 (statement -> print_statement .)
    FOREACH         reduce using rule 61 (statement -> print_statement .)
    RETURN          reduce using rule 61 (statement -> print_statement .)
    OPEN_BRACE      reduce using rule 61 (statement -> print_statement .)
    CONSOLE         reduce using rule 61 (statement -> print_statement .)
    CONVERT         reduce using rule 61 (statement -> print_statement .)
    INT_TYPE        reduce using rule 61 (statement -> print_statement .)
    FLOAT_TYPE      reduce using rule 61 (statement -> print_statement .)
    DOUBLE          reduce using rule 61 (statement -> print_statement .)
    STRING_TYPE     reduce using rule 61 (statement -> print_statement .)
    BOOL_TYPE       reduce using rule 61 (statement -> print_statement .)
    CHAR            reduce using rule 61 (statement -> print_statement .)
    VOID            reduce using rule 61 (statement -> print_statement .)
    TRUE            reduce using rule 61 (statement -> print_statement .)
    FALSE           reduce using rule 61 (statement -> print_statement .)
    OPEN_PAREN      reduce using rule 61 (statement -> print_statement .)
    MINUS           reduce using rule 61 (statement -> print_statement .)
    BANG            reduce using rule 61 (statement -> print_statement .)
    LIST            reduce using rule 61 (statement -> print_statement .)
    DICTIONARY      reduce using rule 61 (statement -> print_statement .)
    INTEGER         reduce using rule 61 (statement -> print_statement .)
    FLOAT           reduce using rule 61 (statement -> print_statement .)
    STRING          reduce using rule 61 (statement -> print_statement .)
    CHAR_LITERAL    reduce using rule 61 (statement -> print_statement .)
    NULL            reduce using rule 61 (statement -> print_statement .)
    NEW             reduce using rule 61 (statement -> print_statement .)
    ELSE            reduce using rule 61 (statement -> print_statement .)


state 202

    (62) statement -> input_statement .
    (102) primary_expression -> input_statement .

  ! reduce/reduce conflict for MINUS resolved using rule 62 (statement -> input_statement .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 62 (statement -> input_statement .)
    CLOSE_BRACE     reduce using rule 62 (statement -> input_statement .)
    VAR             reduce using rule 62 (statement -> input_statement .)
    IDENTIFIER      reduce using rule 62 (statement -> input_statement .)
    IF              reduce using rule 62 (statement -> input_statement .)
    WHILE           reduce using rule 62 (statement -> input_statement .)
    FOR             reduce using rule 62 (statement -> input_statement .)
    FOREACH         reduce using rule 62 (statement -> input_statement .)
    RETURN          reduce using rule 62 (statement -> input_statement .)
    OPEN_BRACE      reduce using rule 62 (statement -> input_statement .)
    CONSOLE         reduce using rule 62 (statement -> input_statement .)
    CONVERT         reduce using rule 62 (statement -> input_statement .)
    INT_TYPE        reduce using rule 62 (statement -> input_statement .)
    FLOAT_TYPE      reduce using rule 62 (statement -> input_statement .)
    DOUBLE          reduce using rule 62 (statement -> input_statement .)
    STRING_TYPE     reduce using rule 62 (statement -> input_statement .)
    BOOL_TYPE       reduce using rule 62 (statement -> input_statement .)
    CHAR            reduce using rule 62 (statement -> input_statement .)
    VOID            reduce using rule 62 (statement -> input_statement .)
    TRUE            reduce using rule 62 (statement -> input_statement .)
    FALSE           reduce using rule 62 (statement -> input_statement .)
    OPEN_PAREN      reduce using rule 62 (statement -> input_statement .)
    MINUS           reduce using rule 62 (statement -> input_statement .)
    BANG            reduce using rule 62 (statement -> input_statement .)
    LIST            reduce using rule 62 (statement -> input_statement .)
    DICTIONARY      reduce using rule 62 (statement -> input_statement .)
    INTEGER         reduce using rule 62 (statement -> input_statement .)
    FLOAT           reduce using rule 62 (statement -> input_statement .)
    STRING          reduce using rule 62 (statement -> input_statement .)
    CHAR_LITERAL    reduce using rule 62 (statement -> input_statement .)
    NULL            reduce using rule 62 (statement -> input_statement .)
    NEW             reduce using rule 62 (statement -> input_statement .)
    ELSE            reduce using rule 62 (statement -> input_statement .)
    SEMICOLON       reduce using rule 102 (primary_expression -> input_statement .)
    PLUS            reduce using rule 102 (primary_expression -> input_statement .)
    MULTIPLY        reduce using rule 102 (primary_expression -> input_statement .)
    DIVIDE          reduce using rule 102 (primary_expression -> input_statement .)
    PERCENT         reduce using rule 102 (primary_expression -> input_statement .)
    EQUAL           reduce using rule 102 (primary_expression -> input_statement .)
    NOT_EQUAL       reduce using rule 102 (primary_expression -> input_statement .)
    LESS_THAN       reduce using rule 102 (primary_expression -> input_statement .)
    GREATER_THAN    reduce using rule 102 (primary_expression -> input_statement .)
    LESS_THAN_EQUAL reduce using rule 102 (primary_expression -> input_statement .)
    GREATER_THAN_EQUAL reduce using rule 102 (primary_expression -> input_statement .)
    COMMA           reduce using rule 102 (primary_expression -> input_statement .)

  ! MINUS           [ reduce using rule 102 (primary_expression -> input_statement .) ]
  ! CLOSE_BRACE     [ reduce using rule 102 (primary_expression -> input_statement .) ]


state 203

    (64) expression_statement -> expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       shift and go to state 231
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 204

    (66) declaration_statement -> VAR . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 232


state 205

    (74) if_statement -> IF . OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> IF . OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement

    OPEN_PAREN      shift and go to state 233


state 206

    (76) while_statement -> WHILE . OPEN_PAREN boolean_expression CLOSE_PAREN statement

    OPEN_PAREN      shift and go to state 234


state 207

    (77) for_statement -> FOR . OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement

    OPEN_PAREN      shift and go to state 235


state 208

    (85) foreach_statement -> FOREACH . OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement

    OPEN_PAREN      shift and go to state 236


state 209

    (86) return_statement -> RETURN . expression SEMICOLON
    (87) return_statement -> RETURN . SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    SEMICOLON       shift and go to state 238
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 237
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 210

    (88) print_statement -> CONSOLE . DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> CONSOLE . DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> CONSOLE . DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> CONSOLE . DOT READLINE OPEN_PAREN CLOSE_PAREN

    DOT             shift and go to state 239


state 211

    (22) property_accessors -> GET SEMICOLON SET SEMICOLON .

    CLOSE_BRACE     reduce using rule 22 (property_accessors -> GET SEMICOLON SET SEMICOLON .)


state 212

    (29) method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (49) statement_list -> . statement_list statement
    (50) statement_list -> . statement
    (51) statement_list -> . empty
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (143) empty -> .
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for OPEN_BRACE resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for CONVERT resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for BANG resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for DICTIONARY resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR_LITERAL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
    CLOSE_BRACE     reduce using rule 143 (empty -> .)
    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! FOREACH         [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! OPEN_BRACE      [ reduce using rule 143 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 143 (empty -> .) ]
  ! CONVERT         [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! CHAR            [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! TRUE            [ reduce using rule 143 (empty -> .) ]
  ! FALSE           [ reduce using rule 143 (empty -> .) ]
  ! OPEN_PAREN      [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! BANG            [ reduce using rule 143 (empty -> .) ]
  ! LIST            [ reduce using rule 143 (empty -> .) ]
  ! DICTIONARY      [ reduce using rule 143 (empty -> .) ]
  ! INTEGER         [ reduce using rule 143 (empty -> .) ]
  ! FLOAT           [ reduce using rule 143 (empty -> .) ]
  ! STRING          [ reduce using rule 143 (empty -> .) ]
  ! CHAR_LITERAL    [ reduce using rule 143 (empty -> .) ]
  ! NULL            [ reduce using rule 143 (empty -> .) ]
  ! NEW             [ reduce using rule 143 (empty -> .) ]

    type_specifier                 shift and go to state 186
    statement_list                 shift and go to state 240
    statement                      shift and go to state 190
    empty                          shift and go to state 191
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    boolean_expression             shift and go to state 75
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 213

    (128) argument_list -> argument_list COMMA expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_PAREN     reduce using rule 128 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 128 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 214

    (122) array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .

    SEMICOLON       reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVIDE          reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    PERCENT         reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    EQUAL           reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    NOT_EQUAL       reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACE     reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    DOUBLE_AMPERSAND reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)
    DOUBLE_PIPE     reduce using rule 122 (array_initialization -> NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET .)


state 215

    (123) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA . type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA . type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (48) generic_type -> DICTIONARY LESS_THAN type_specifier COMMA . type_specifier GREATER_THAN
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 241
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 216

    (91) input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .

    SEMICOLON       reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    MULTIPLY        reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    PERCENT         reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    EQUAL           reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN       reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    VAR             reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    IF              reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    WHILE           reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    FOR             reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    FOREACH         reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    RETURN          reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    OPEN_BRACE      reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    CONSOLE         reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    CONVERT         reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    INT_TYPE        reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    FLOAT_TYPE      reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    DOUBLE          reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    STRING_TYPE     reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    BOOL_TYPE       reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    VOID            reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    TRUE            reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    FALSE           reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    BANG            reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    LIST            reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    DICTIONARY      reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    CHAR_LITERAL    reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    NULL            reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    NEW             reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 91 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)


state 217

    (92) input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE . DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    DOT             shift and go to state 242


state 218

    (31) method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (49) statement_list -> statement_list . statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 243
    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    type_specifier                 shift and go to state 186
    statement                      shift and go to state 230
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    boolean_expression             shift and go to state 75
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 219

    (65) declaration_statement -> type_specifier variable_declarator_list . SEMICOLON
    (67) variable_declarator_list -> variable_declarator_list . COMMA variable_declarator

    SEMICOLON       shift and go to state 244
    COMMA           shift and go to state 245


state 220

    (68) variable_declarator_list -> variable_declarator .

    SEMICOLON       reduce using rule 68 (variable_declarator_list -> variable_declarator .)
    COMMA           reduce using rule 68 (variable_declarator_list -> variable_declarator .)


state 221

    (69) variable_declarator -> IDENTIFIER .
    (70) variable_declarator -> IDENTIFIER . ASSIGN expression

    SEMICOLON       reduce using rule 69 (variable_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 69 (variable_declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 246


state 222

    (71) assignment_statement -> IDENTIFIER ASSIGN . expression SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 247
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 223

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (125) array_access -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 248
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 224

    (73) assignment_statement -> IDENTIFIER DOT . IDENTIFIER ASSIGN expression SEMICOLON
    (126) member_access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 249


state 225

    (63) block_statement -> OPEN_BRACE statement_list . CLOSE_BRACE
    (49) statement_list -> statement_list . statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 250
    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    statement                      shift and go to state 230
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    type_specifier                 shift and go to state 186
    boolean_expression             shift and go to state 75
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 226

    (51) statement_list -> empty .
    (133) expression_list -> empty .

  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 51 (statement_list -> empty .)
    CLOSE_BRACE     reduce using rule 51 (statement_list -> empty .)
    VAR             reduce using rule 51 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 51 (statement_list -> empty .)
    IF              reduce using rule 51 (statement_list -> empty .)
    WHILE           reduce using rule 51 (statement_list -> empty .)
    FOR             reduce using rule 51 (statement_list -> empty .)
    FOREACH         reduce using rule 51 (statement_list -> empty .)
    RETURN          reduce using rule 51 (statement_list -> empty .)
    OPEN_BRACE      reduce using rule 51 (statement_list -> empty .)
    CONSOLE         reduce using rule 51 (statement_list -> empty .)
    CONVERT         reduce using rule 51 (statement_list -> empty .)
    INT_TYPE        reduce using rule 51 (statement_list -> empty .)
    FLOAT_TYPE      reduce using rule 51 (statement_list -> empty .)
    DOUBLE          reduce using rule 51 (statement_list -> empty .)
    STRING_TYPE     reduce using rule 51 (statement_list -> empty .)
    BOOL_TYPE       reduce using rule 51 (statement_list -> empty .)
    CHAR            reduce using rule 51 (statement_list -> empty .)
    VOID            reduce using rule 51 (statement_list -> empty .)
    TRUE            reduce using rule 51 (statement_list -> empty .)
    FALSE           reduce using rule 51 (statement_list -> empty .)
    OPEN_PAREN      reduce using rule 51 (statement_list -> empty .)
    MINUS           reduce using rule 51 (statement_list -> empty .)
    BANG            reduce using rule 51 (statement_list -> empty .)
    LIST            reduce using rule 51 (statement_list -> empty .)
    DICTIONARY      reduce using rule 51 (statement_list -> empty .)
    INTEGER         reduce using rule 51 (statement_list -> empty .)
    FLOAT           reduce using rule 51 (statement_list -> empty .)
    STRING          reduce using rule 51 (statement_list -> empty .)
    CHAR_LITERAL    reduce using rule 51 (statement_list -> empty .)
    NULL            reduce using rule 51 (statement_list -> empty .)
    NEW             reduce using rule 51 (statement_list -> empty .)
    COMMA           reduce using rule 133 (expression_list -> empty .)

  ! CLOSE_BRACE     [ reduce using rule 133 (expression_list -> empty .) ]


state 227

    (132) expression_list -> expression .
    (64) expression_statement -> expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_BRACE     reduce using rule 132 (expression_list -> expression .)
    COMMA           reduce using rule 132 (expression_list -> expression .)
    SEMICOLON       shift and go to state 231
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 228

    (71) assignment_statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (72) assignment_statement -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> IDENTIFIER . DOT IDENTIFIER ASSIGN expression SEMICOLON
    (97) primary_expression -> IDENTIFIER .
    (43) type_specifier -> IDENTIFIER .
    (127) function_call -> IDENTIFIER . OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> IDENTIFIER . DOT IDENTIFIER

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    ASSIGN          shift and go to state 222
    OPEN_BRACKET    shift and go to state 223
    DOT             shift and go to state 224
    SEMICOLON       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 97 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 97 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 97 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 97 (primary_expression -> IDENTIFIER .)
    PERCENT         reduce using rule 97 (primary_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 97 (primary_expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 97 (primary_expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 97 (primary_expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 97 (primary_expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 97 (primary_expression -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 97 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 97 (primary_expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 43 (type_specifier -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 108

  ! OPEN_BRACKET    [ reduce using rule 43 (type_specifier -> IDENTIFIER .) ]


state 229

    (30) method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PRIVATE         reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PROTECTED       reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INTERNAL        reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DOUBLE          reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CHAR            reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 30 (method_declaration -> access_modifier type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 230

    (49) statement_list -> statement_list statement .

    CLOSE_BRACE     reduce using rule 49 (statement_list -> statement_list statement .)
    VAR             reduce using rule 49 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 49 (statement_list -> statement_list statement .)
    IF              reduce using rule 49 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 49 (statement_list -> statement_list statement .)
    FOR             reduce using rule 49 (statement_list -> statement_list statement .)
    FOREACH         reduce using rule 49 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 49 (statement_list -> statement_list statement .)
    OPEN_BRACE      reduce using rule 49 (statement_list -> statement_list statement .)
    CONSOLE         reduce using rule 49 (statement_list -> statement_list statement .)
    CONVERT         reduce using rule 49 (statement_list -> statement_list statement .)
    INT_TYPE        reduce using rule 49 (statement_list -> statement_list statement .)
    FLOAT_TYPE      reduce using rule 49 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 49 (statement_list -> statement_list statement .)
    STRING_TYPE     reduce using rule 49 (statement_list -> statement_list statement .)
    BOOL_TYPE       reduce using rule 49 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 49 (statement_list -> statement_list statement .)
    VOID            reduce using rule 49 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 49 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 49 (statement_list -> statement_list statement .)
    OPEN_PAREN      reduce using rule 49 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 49 (statement_list -> statement_list statement .)
    BANG            reduce using rule 49 (statement_list -> statement_list statement .)
    LIST            reduce using rule 49 (statement_list -> statement_list statement .)
    DICTIONARY      reduce using rule 49 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 49 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 49 (statement_list -> statement_list statement .)
    STRING          reduce using rule 49 (statement_list -> statement_list statement .)
    CHAR_LITERAL    reduce using rule 49 (statement_list -> statement_list statement .)
    NULL            reduce using rule 49 (statement_list -> statement_list statement .)
    NEW             reduce using rule 49 (statement_list -> statement_list statement .)


state 231

    (64) expression_statement -> expression SEMICOLON .

    CLOSE_BRACE     reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    VAR             reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    FOREACH         reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    OPEN_BRACE      reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    CONSOLE         reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    CONVERT         reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    INT_TYPE        reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    STRING_TYPE     reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    BANG            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    LIST            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    DICTIONARY      reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    INTEGER         reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    NULL            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 64 (expression_statement -> expression SEMICOLON .)


state 232

    (66) declaration_statement -> VAR IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 251


state 233

    (74) if_statement -> IF OPEN_PAREN . boolean_expression CLOSE_PAREN statement
    (75) if_statement -> IF OPEN_PAREN . boolean_expression CLOSE_PAREN statement ELSE statement
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    BANG            shift and go to state 86
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    boolean_expression             shift and go to state 252
    expression                     shift and go to state 128
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 234

    (76) while_statement -> WHILE OPEN_PAREN . boolean_expression CLOSE_PAREN statement
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    BANG            shift and go to state 86
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    boolean_expression             shift and go to state 253
    expression                     shift and go to state 128
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 235

    (77) for_statement -> FOR OPEN_PAREN . for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (78) for_init -> . type_specifier IDENTIFIER ASSIGN expression
    (79) for_init -> . assignment_statement
    (80) for_init -> . empty
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (143) empty -> .
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 256
    SEMICOLON       reduce using rule 143 (empty -> .)
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    for_init                       shift and go to state 254
    type_specifier                 shift and go to state 255
    assignment_statement           shift and go to state 257
    empty                          shift and go to state 258
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 236

    (85) foreach_statement -> FOREACH OPEN_PAREN . type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN

    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    IDENTIFIER      shift and go to state 25
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45

    type_specifier                 shift and go to state 259
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43

state 237

    (86) return_statement -> RETURN expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       shift and go to state 260
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 238

    (87) return_statement -> RETURN SEMICOLON .

    CLOSE_BRACE     reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    VAR             reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    OPEN_BRACE      reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    CONSOLE         reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    CONVERT         reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    INT_TYPE        reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    STRING_TYPE     reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    BOOL_TYPE       reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    OPEN_PAREN      reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    BANG            reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    LIST            reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    DICTIONARY      reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    INTEGER         reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    CHAR_LITERAL    reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    NULL            reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 87 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 87 (return_statement -> RETURN SEMICOLON .)


state 239

    (88) print_statement -> CONSOLE DOT . WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> CONSOLE DOT . WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> CONSOLE DOT . WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> CONSOLE DOT . READLINE OPEN_PAREN CLOSE_PAREN

    WRITELINE       shift and go to state 261
    WRITE           shift and go to state 262
    READLINE        shift and go to state 169


state 240

    (29) method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (49) statement_list -> statement_list . statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 263
    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    type_specifier                 shift and go to state 186
    statement                      shift and go to state 230
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    boolean_expression             shift and go to state 75
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 241

    (123) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier . GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier . GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (48) generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier . GREATER_THAN
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    GREATER_THAN    shift and go to state 264
    OPEN_BRACKET    shift and go to state 53


state 242

    (92) input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT . READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    READLINE        shift and go to state 265


state 243

    (31) method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PRIVATE         reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PROTECTED       reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INTERNAL        reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DOUBLE          reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CHAR            reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 31 (method_declaration -> STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 244

    (65) declaration_statement -> type_specifier variable_declarator_list SEMICOLON .

    CLOSE_BRACE     reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    VAR             reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    IF              reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    WHILE           reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    FOR             reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    FOREACH         reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    RETURN          reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    OPEN_BRACE      reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    CONSOLE         reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    CONVERT         reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    INT_TYPE        reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    FLOAT_TYPE      reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    STRING_TYPE     reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    BOOL_TYPE       reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    CHAR            reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    VOID            reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    TRUE            reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    FALSE           reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    OPEN_PAREN      reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    MINUS           reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    BANG            reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    LIST            reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    DICTIONARY      reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    INTEGER         reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    STRING          reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    CHAR_LITERAL    reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    NULL            reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    NEW             reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)
    ELSE            reduce using rule 65 (declaration_statement -> type_specifier variable_declarator_list SEMICOLON .)


state 245

    (67) variable_declarator_list -> variable_declarator_list COMMA . variable_declarator
    (69) variable_declarator -> . IDENTIFIER
    (70) variable_declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 221

    variable_declarator            shift and go to state 266

state 246

    (70) variable_declarator -> IDENTIFIER ASSIGN . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 267
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 247

    (71) assignment_statement -> IDENTIFIER ASSIGN expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       shift and go to state 268
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 248

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET ASSIGN expression SEMICOLON
    (125) array_access -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_BRACKET   shift and go to state 269
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 249

    (73) assignment_statement -> IDENTIFIER DOT IDENTIFIER . ASSIGN expression SEMICOLON
    (126) member_access -> IDENTIFIER DOT IDENTIFIER .

    ASSIGN          shift and go to state 270
    SEMICOLON       reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    PLUS            reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    PERCENT         reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    EQUAL           reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    NOT_EQUAL       reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    LESS_THAN       reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    GREATER_THAN    reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 126 (member_access -> IDENTIFIER DOT IDENTIFIER .)


state 250

    (63) block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    VAR             reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    FOREACH         reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    CONVERT         reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    DOUBLE          reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    CHAR            reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    TRUE            reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    FALSE           reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    OPEN_PAREN      reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    MINUS           reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    BANG            reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    INTEGER         reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT           reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING          reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    CHAR_LITERAL    reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    NULL            reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    NEW             reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)
    ELSE            reduce using rule 63 (block_statement -> OPEN_BRACE statement_list CLOSE_BRACE .)


state 251

    (66) declaration_statement -> VAR IDENTIFIER ASSIGN . expression SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 271
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 252

    (74) if_statement -> IF OPEN_PAREN boolean_expression . CLOSE_PAREN statement
    (75) if_statement -> IF OPEN_PAREN boolean_expression . CLOSE_PAREN statement ELSE statement
    (118) boolean_expression -> boolean_expression . DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> boolean_expression . DOUBLE_PIPE boolean_expression
    (95) expression -> boolean_expression .

    CLOSE_PAREN     shift and go to state 272
    DOUBLE_AMPERSAND shift and go to state 123
    DOUBLE_PIPE     shift and go to state 124
    EQUAL           reduce using rule 95 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN       reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN    reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    PLUS            reduce using rule 95 (expression -> boolean_expression .)
    MINUS           reduce using rule 95 (expression -> boolean_expression .)
    MULTIPLY        reduce using rule 95 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 95 (expression -> boolean_expression .)
    PERCENT         reduce using rule 95 (expression -> boolean_expression .)


state 253

    (76) while_statement -> WHILE OPEN_PAREN boolean_expression . CLOSE_PAREN statement
    (118) boolean_expression -> boolean_expression . DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> boolean_expression . DOUBLE_PIPE boolean_expression
    (95) expression -> boolean_expression .

    CLOSE_PAREN     shift and go to state 273
    DOUBLE_AMPERSAND shift and go to state 123
    DOUBLE_PIPE     shift and go to state 124
    EQUAL           reduce using rule 95 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN       reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN    reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    PLUS            reduce using rule 95 (expression -> boolean_expression .)
    MINUS           reduce using rule 95 (expression -> boolean_expression .)
    MULTIPLY        reduce using rule 95 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 95 (expression -> boolean_expression .)
    PERCENT         reduce using rule 95 (expression -> boolean_expression .)


state 254

    (77) for_statement -> FOR OPEN_PAREN for_init . SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement

    SEMICOLON       shift and go to state 274


state 255

    (78) for_init -> type_specifier . IDENTIFIER ASSIGN expression
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    IDENTIFIER      shift and go to state 275
    OPEN_BRACKET    shift and go to state 53


state 256

    (43) type_specifier -> IDENTIFIER .
    (71) assignment_statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (72) assignment_statement -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> IDENTIFIER . DOT IDENTIFIER ASSIGN expression SEMICOLON

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    IDENTIFIER      reduce using rule 43 (type_specifier -> IDENTIFIER .)
    ASSIGN          shift and go to state 222
    OPEN_BRACKET    shift and go to state 276
    DOT             shift and go to state 277

  ! OPEN_BRACKET    [ reduce using rule 43 (type_specifier -> IDENTIFIER .) ]


state 257

    (79) for_init -> assignment_statement .

    SEMICOLON       reduce using rule 79 (for_init -> assignment_statement .)


state 258

    (80) for_init -> empty .

    SEMICOLON       reduce using rule 80 (for_init -> empty .)


state 259

    (85) foreach_statement -> FOREACH OPEN_PAREN type_specifier . IDENTIFIER IN expression CLOSE_PAREN statement
    (46) array_type -> type_specifier . OPEN_BRACKET CLOSE_BRACKET

    IDENTIFIER      shift and go to state 278
    OPEN_BRACKET    shift and go to state 53


state 260

    (86) return_statement -> RETURN expression SEMICOLON .

    CLOSE_BRACE     reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    FOREACH         reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    OPEN_BRACE      reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    CONVERT         reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    INT_TYPE        reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    BANG            reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    LIST            reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    DICTIONARY      reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    INTEGER         reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    NULL            reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 86 (return_statement -> RETURN expression SEMICOLON .)


state 261

    (88) print_statement -> CONSOLE DOT WRITELINE . OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> CONSOLE DOT WRITELINE . OPEN_PAREN CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 279


state 262

    (89) print_statement -> CONSOLE DOT WRITE . OPEN_PAREN expression CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 280


state 263

    (29) method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PRIVATE         reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PROTECTED       reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INTERNAL        reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DOUBLE          reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CHAR            reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 29 (method_declaration -> access_modifier STATIC type_specifier IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 264

    (123) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN . OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN . OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (48) generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN .

    OPEN_PAREN      shift and go to state 281
    OPEN_BRACE      shift and go to state 282
    OPEN_BRACKET    reduce using rule 48 (generic_type -> DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN .)


state 265

    (92) input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE . OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 283


state 266

    (67) variable_declarator_list -> variable_declarator_list COMMA variable_declarator .

    SEMICOLON       reduce using rule 67 (variable_declarator_list -> variable_declarator_list COMMA variable_declarator .)
    COMMA           reduce using rule 67 (variable_declarator_list -> variable_declarator_list COMMA variable_declarator .)


state 267

    (70) variable_declarator -> IDENTIFIER ASSIGN expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       reduce using rule 70 (variable_declarator -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 70 (variable_declarator -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 268

    (71) assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .

    CLOSE_BRACE     reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FOREACH         reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    OPEN_BRACE      reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CONVERT         reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR            reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    BANG            reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    INTEGER         reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NULL            reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NEW             reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CLOSE_PAREN     reduce using rule 71 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 269

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET . ASSIGN expression SEMICOLON
    (125) array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .

    ASSIGN          shift and go to state 284
    SEMICOLON       reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVIDE          reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PERCENT         reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    EQUAL           reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    NOT_EQUAL       reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACE     reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 125 (array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)


state 270

    (73) assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN . expression SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 285
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 271

    (66) declaration_statement -> VAR IDENTIFIER ASSIGN expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       shift and go to state 286
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 272

    (74) if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN . statement
    (75) if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN . statement ELSE statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    boolean_expression             shift and go to state 75
    statement                      shift and go to state 287
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    type_specifier                 shift and go to state 186
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 273

    (76) while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    boolean_expression             shift and go to state 75
    statement                      shift and go to state 288
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    type_specifier                 shift and go to state 186
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 274

    (77) for_statement -> FOR OPEN_PAREN for_init SEMICOLON . boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    BANG            shift and go to state 86
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    boolean_expression             shift and go to state 289
    expression                     shift and go to state 128
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 275

    (78) for_init -> type_specifier IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 290


state 276

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 291
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 277

    (73) assignment_statement -> IDENTIFIER DOT . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 292


state 278

    (85) foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER . IN expression CLOSE_PAREN statement

    IN              shift and go to state 293


state 279

    (88) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN . expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN . CLOSE_PAREN SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 295
    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 294
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 280

    (89) print_statement -> CONSOLE DOT WRITE OPEN_PAREN . expression CLOSE_PAREN SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 296
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 281

    (123) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 297


state 282

    (124) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE . dictionary_initializer_list CLOSE_BRACE
    (134) dictionary_initializer_list -> . dictionary_initializer_list COMMA dictionary_initializer
    (135) dictionary_initializer_list -> . dictionary_initializer
    (136) dictionary_initializer_list -> . empty
    (137) dictionary_initializer -> . OPEN_BRACE expression COMMA expression CLOSE_BRACE
    (143) empty -> .

    OPEN_BRACE      shift and go to state 298
    CLOSE_BRACE     reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)

    dictionary_initializer_list    shift and go to state 299
    dictionary_initializer         shift and go to state 300
    empty                          shift and go to state 301

state 283

    (92) input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN . CLOSE_PAREN CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 302


state 284

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN . expression SEMICOLON
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 303
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 285

    (73) assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       shift and go to state 304
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 286

    (66) declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .

    CLOSE_BRACE     reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    FOREACH         reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    OPEN_BRACE      reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    CONVERT         reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR            reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    BANG            reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    INTEGER         reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    NULL            reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    NEW             reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 66 (declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)


state 287

    (74) if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .
    (75) if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    CLOSE_BRACE     reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    VAR             reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    IDENTIFIER      reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    IF              reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    WHILE           reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FOR             reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FOREACH         reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    RETURN          reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    OPEN_BRACE      reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    CONSOLE         reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    CONVERT         reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    INT_TYPE        reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FLOAT_TYPE      reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    DOUBLE          reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    STRING_TYPE     reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    BOOL_TYPE       reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    CHAR            reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    VOID            reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    TRUE            reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FALSE           reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    OPEN_PAREN      reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    MINUS           reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    BANG            reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    LIST            reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    DICTIONARY      reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    INTEGER         reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FLOAT           reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    STRING          reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    CHAR_LITERAL    reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    NULL            reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    NEW             reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    ELSE            shift and go to state 305

  ! ELSE            [ reduce using rule 74 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement .) ]


state 288

    (76) while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .

    CLOSE_BRACE     reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    VAR             reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    IDENTIFIER      reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    IF              reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    WHILE           reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FOR             reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FOREACH         reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    RETURN          reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    OPEN_BRACE      reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    CONSOLE         reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    CONVERT         reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    INT_TYPE        reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FLOAT_TYPE      reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    DOUBLE          reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    STRING_TYPE     reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    BOOL_TYPE       reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    CHAR            reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    VOID            reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    TRUE            reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FALSE           reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    OPEN_PAREN      reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    MINUS           reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    BANG            reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    LIST            reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    DICTIONARY      reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    INTEGER         reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    FLOAT           reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    STRING          reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    CHAR_LITERAL    reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    NULL            reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    NEW             reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)
    ELSE            reduce using rule 76 (while_statement -> WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement .)


state 289

    (77) for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression . SEMICOLON for_update CLOSE_PAREN statement
    (118) boolean_expression -> boolean_expression . DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> boolean_expression . DOUBLE_PIPE boolean_expression
    (95) expression -> boolean_expression .

    SEMICOLON       shift and go to state 306
    DOUBLE_AMPERSAND shift and go to state 123
    DOUBLE_PIPE     shift and go to state 124
    EQUAL           reduce using rule 95 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN       reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN    reduce using rule 95 (expression -> boolean_expression .)
    LESS_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    GREATER_THAN_EQUAL reduce using rule 95 (expression -> boolean_expression .)
    PLUS            reduce using rule 95 (expression -> boolean_expression .)
    MINUS           reduce using rule 95 (expression -> boolean_expression .)
    MULTIPLY        reduce using rule 95 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 95 (expression -> boolean_expression .)
    PERCENT         reduce using rule 95 (expression -> boolean_expression .)


state 290

    (78) for_init -> type_specifier IDENTIFIER ASSIGN . expression
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 307
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 291

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET ASSIGN expression SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_BRACKET   shift and go to state 308
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 292

    (73) assignment_statement -> IDENTIFIER DOT IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 270


state 293

    (85) foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN . expression CLOSE_PAREN statement
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 309
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 294

    (88) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression . CLOSE_PAREN SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_PAREN     shift and go to state 310
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 295

    (90) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 311


state 296

    (89) print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression . CLOSE_PAREN SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_PAREN     shift and go to state 312
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 297

    (123) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .

    SEMICOLON       reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    MULTIPLY        reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    PERCENT         reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    EQUAL           reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN       reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 123 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN .)


state 298

    (137) dictionary_initializer -> OPEN_BRACE . expression COMMA expression CLOSE_BRACE
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 313
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 299

    (124) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list . CLOSE_BRACE
    (134) dictionary_initializer_list -> dictionary_initializer_list . COMMA dictionary_initializer

    CLOSE_BRACE     shift and go to state 315
    COMMA           shift and go to state 314


state 300

    (135) dictionary_initializer_list -> dictionary_initializer .

    CLOSE_BRACE     reduce using rule 135 (dictionary_initializer_list -> dictionary_initializer .)
    COMMA           reduce using rule 135 (dictionary_initializer_list -> dictionary_initializer .)


state 301

    (136) dictionary_initializer_list -> empty .

    CLOSE_BRACE     reduce using rule 136 (dictionary_initializer_list -> empty .)
    COMMA           reduce using rule 136 (dictionary_initializer_list -> empty .)


state 302

    (92) input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 316


state 303

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression . SEMICOLON
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       shift and go to state 317
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 304

    (73) assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .

    CLOSE_BRACE     reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    FOREACH         reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    OPEN_BRACE      reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    CONVERT         reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR            reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    BANG            reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    INTEGER         reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    NULL            reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    NEW             reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)
    CLOSE_PAREN     reduce using rule 73 (assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON .)


state 305

    (75) if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE . statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    boolean_expression             shift and go to state 75
    statement                      shift and go to state 318
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    type_specifier                 shift and go to state 186
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 306

    (77) for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON . for_update CLOSE_PAREN statement
    (81) for_update -> . assignment_statement
    (82) for_update -> . IDENTIFIER INCREMENT
    (83) for_update -> . IDENTIFIER DECREMENT
    (84) for_update -> . empty
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (143) empty -> .

    IDENTIFIER      shift and go to state 321
    CLOSE_PAREN     reduce using rule 143 (empty -> .)

    for_update                     shift and go to state 319
    assignment_statement           shift and go to state 320
    empty                          shift and go to state 322

state 307

    (78) for_init -> type_specifier IDENTIFIER ASSIGN expression .
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    SEMICOLON       reduce using rule 78 (for_init -> type_specifier IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 308

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 284


state 309

    (85) foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression . CLOSE_PAREN statement
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_PAREN     shift and go to state 323
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 310

    (88) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 324


state 311

    (90) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .

    CLOSE_BRACE     reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    VAR             reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FOREACH         reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    OPEN_BRACE      reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CONVERT         reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    DOUBLE          reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CHAR            reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    TRUE            reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FALSE           reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    OPEN_PAREN      reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    MINUS           reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BANG            reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    INTEGER         reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FLOAT           reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    STRING          reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CHAR_LITERAL    reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    NULL            reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    NEW             reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    ELSE            reduce using rule 90 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON .)


state 312

    (89) print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 325


state 313

    (137) dictionary_initializer -> OPEN_BRACE expression . COMMA expression CLOSE_BRACE
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    COMMA           shift and go to state 326
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 314

    (134) dictionary_initializer_list -> dictionary_initializer_list COMMA . dictionary_initializer
    (137) dictionary_initializer -> . OPEN_BRACE expression COMMA expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 298

    dictionary_initializer         shift and go to state 327

state 315

    (124) array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .

    SEMICOLON       reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    PLUS            reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    MINUS           reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    MULTIPLY        reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    DIVIDE          reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    PERCENT         reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    EQUAL           reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    NOT_EQUAL       reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    LESS_THAN       reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    GREATER_THAN    reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    LESS_THAN_EQUAL reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    COMMA           reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    CLOSE_BRACKET   reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    DOUBLE_AMPERSAND reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)
    DOUBLE_PIPE     reduce using rule 124 (array_initialization -> NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE .)


state 316

    (92) input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .

    SEMICOLON       reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    MULTIPLY        reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    PERCENT         reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    EQUAL           reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    LESS_THAN       reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    VAR             reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    IF              reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    WHILE           reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    FOR             reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    FOREACH         reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    RETURN          reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    OPEN_BRACE      reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    CONSOLE         reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    CONVERT         reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    INT_TYPE        reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    FLOAT_TYPE      reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    DOUBLE          reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    STRING_TYPE     reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    BOOL_TYPE       reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    VOID            reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    TRUE            reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    FALSE           reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    BANG            reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    LIST            reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    DICTIONARY      reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    CHAR_LITERAL    reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    NULL            reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    NEW             reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 92 (input_statement -> CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN .)


state 317

    (72) assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .

    CLOSE_BRACE     reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    IF              reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    FOREACH         reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    OPEN_BRACE      reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CONVERT         reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CHAR            reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    BANG            reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    INTEGER         reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CHAR_LITERAL    reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    NULL            reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    NEW             reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CLOSE_PAREN     reduce using rule 72 (assignment_statement -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)


state 318

    (75) if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .

    CLOSE_BRACE     reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    VAR             reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    IF              reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    WHILE           reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    FOR             reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    FOREACH         reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    RETURN          reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    OPEN_BRACE      reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    CONSOLE         reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    CONVERT         reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    INT_TYPE        reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    FLOAT_TYPE      reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    DOUBLE          reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    STRING_TYPE     reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    BOOL_TYPE       reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    CHAR            reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    VOID            reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    TRUE            reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    FALSE           reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    OPEN_PAREN      reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    MINUS           reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    BANG            reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    LIST            reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    DICTIONARY      reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    INTEGER         reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    FLOAT           reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    STRING          reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    CHAR_LITERAL    reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    NULL            reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    NEW             reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)
    ELSE            reduce using rule 75 (if_statement -> IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement .)


state 319

    (77) for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update . CLOSE_PAREN statement

    CLOSE_PAREN     shift and go to state 328


state 320

    (81) for_update -> assignment_statement .

    CLOSE_PAREN     reduce using rule 81 (for_update -> assignment_statement .)


state 321

    (82) for_update -> IDENTIFIER . INCREMENT
    (83) for_update -> IDENTIFIER . DECREMENT
    (71) assignment_statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (72) assignment_statement -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> IDENTIFIER . DOT IDENTIFIER ASSIGN expression SEMICOLON

    INCREMENT       shift and go to state 329
    DECREMENT       shift and go to state 330
    ASSIGN          shift and go to state 222
    OPEN_BRACKET    shift and go to state 276
    DOT             shift and go to state 277


state 322

    (84) for_update -> empty .

    CLOSE_PAREN     reduce using rule 84 (for_update -> empty .)


state 323

    (85) foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    type_specifier                 shift and go to state 186
    expression                     shift and go to state 203
    statement                      shift and go to state 331
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    boolean_expression             shift and go to state 75
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 324

    (88) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .

    CLOSE_BRACE     reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    VAR             reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FOREACH         reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    OPEN_BRACE      reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CONVERT         reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    DOUBLE          reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CHAR            reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    TRUE            reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FALSE           reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    OPEN_PAREN      reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    MINUS           reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BANG            reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    INTEGER         reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FLOAT           reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    STRING          reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CHAR_LITERAL    reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    NULL            reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    NEW             reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    ELSE            reduce using rule 88 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)


state 325

    (89) print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .

    CLOSE_BRACE     reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    VAR             reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FOREACH         reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    OPEN_BRACE      reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CONVERT         reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    DOUBLE          reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CHAR            reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    TRUE            reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FALSE           reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    OPEN_PAREN      reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    MINUS           reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BANG            reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    INTEGER         reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FLOAT           reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    STRING          reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CHAR_LITERAL    reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    NULL            reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    NEW             reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    ELSE            reduce using rule 89 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)


state 326

    (137) dictionary_initializer -> OPEN_BRACE expression COMMA . expression CLOSE_BRACE
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    OPEN_BRACE      shift and go to state 92
    NEW             shift and go to state 93
    CONSOLE         shift and go to state 94
    CONVERT         shift and go to state 95

    expression                     shift and go to state 332
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    boolean_expression             shift and go to state 75
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80
    input_statement                shift and go to state 81

state 327

    (134) dictionary_initializer_list -> dictionary_initializer_list COMMA dictionary_initializer .

    CLOSE_BRACE     reduce using rule 134 (dictionary_initializer_list -> dictionary_initializer_list COMMA dictionary_initializer .)
    COMMA           reduce using rule 134 (dictionary_initializer_list -> dictionary_initializer_list COMMA dictionary_initializer .)


state 328

    (77) for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . declaration_statement
    (54) statement -> . assignment_statement
    (55) statement -> . if_statement
    (56) statement -> . while_statement
    (57) statement -> . for_statement
    (58) statement -> . foreach_statement
    (59) statement -> . return_statement
    (60) statement -> . block_statement
    (61) statement -> . print_statement
    (62) statement -> . input_statement
    (64) expression_statement -> . expression SEMICOLON
    (65) declaration_statement -> . type_specifier variable_declarator_list SEMICOLON
    (66) declaration_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (71) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (72) assignment_statement -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (73) assignment_statement -> . IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON
    (74) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (75) if_statement -> . IF OPEN_PAREN boolean_expression CLOSE_PAREN statement ELSE statement
    (76) while_statement -> . WHILE OPEN_PAREN boolean_expression CLOSE_PAREN statement
    (77) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement
    (85) foreach_statement -> . FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement
    (86) return_statement -> . RETURN expression SEMICOLON
    (87) return_statement -> . RETURN SEMICOLON
    (63) block_statement -> . OPEN_BRACE statement_list CLOSE_BRACE
    (88) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (89) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (90) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN CLOSE_PAREN SEMICOLON
    (91) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (92) input_statement -> . CONVERT DOT TOINT32 OPEN_PAREN CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN CLOSE_PAREN
    (93) expression -> . primary_expression
    (94) expression -> . arithmetic_expression
    (95) expression -> . boolean_expression
    (36) type_specifier -> . INT_TYPE
    (37) type_specifier -> . FLOAT_TYPE
    (38) type_specifier -> . DOUBLE
    (39) type_specifier -> . STRING_TYPE
    (40) type_specifier -> . BOOL_TYPE
    (41) type_specifier -> . CHAR
    (42) type_specifier -> . VOID
    (43) type_specifier -> . IDENTIFIER
    (44) type_specifier -> . array_type
    (45) type_specifier -> . generic_type
    (96) primary_expression -> . literal
    (97) primary_expression -> . IDENTIFIER
    (98) primary_expression -> . function_call
    (99) primary_expression -> . array_access
    (100) primary_expression -> . member_access
    (101) primary_expression -> . array_initialization
    (102) primary_expression -> . input_statement
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . OPEN_PAREN expression CLOSE_PAREN
    (106) arithmetic_expression -> . expression PLUS expression
    (107) arithmetic_expression -> . expression MINUS expression
    (108) arithmetic_expression -> . expression MULTIPLY expression
    (109) arithmetic_expression -> . expression DIVIDE expression
    (110) arithmetic_expression -> . expression PERCENT expression
    (111) arithmetic_expression -> . MINUS expression
    (112) boolean_expression -> . expression EQUAL expression
    (113) boolean_expression -> . expression NOT_EQUAL expression
    (114) boolean_expression -> . expression LESS_THAN expression
    (115) boolean_expression -> . expression GREATER_THAN expression
    (116) boolean_expression -> . expression LESS_THAN_EQUAL expression
    (117) boolean_expression -> . expression GREATER_THAN_EQUAL expression
    (118) boolean_expression -> . boolean_expression DOUBLE_AMPERSAND boolean_expression
    (119) boolean_expression -> . boolean_expression DOUBLE_PIPE boolean_expression
    (120) boolean_expression -> . BANG boolean_expression
    (46) array_type -> . type_specifier OPEN_BRACKET CLOSE_BRACKET
    (47) generic_type -> . LIST LESS_THAN type_specifier GREATER_THAN
    (48) generic_type -> . DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN
    (138) literal -> . INTEGER
    (139) literal -> . FLOAT
    (140) literal -> . STRING
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . NULL
    (127) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (125) array_access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (126) member_access -> . IDENTIFIER DOT IDENTIFIER
    (121) array_initialization -> . OPEN_BRACE expression_list CLOSE_BRACE
    (122) array_initialization -> . NEW type_specifier OPEN_BRACKET expression CLOSE_BRACKET
    (123) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_PAREN CLOSE_PAREN
    (124) array_initialization -> . NEW DICTIONARY LESS_THAN type_specifier COMMA type_specifier GREATER_THAN OPEN_BRACE dictionary_initializer_list CLOSE_BRACE

    VAR             shift and go to state 204
    IDENTIFIER      shift and go to state 187
    IF              shift and go to state 205
    WHILE           shift and go to state 206
    FOR             shift and go to state 207
    FOREACH         shift and go to state 208
    RETURN          shift and go to state 209
    OPEN_BRACE      shift and go to state 188
    CONSOLE         shift and go to state 210
    CONVERT         shift and go to state 95
    INT_TYPE        shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    DOUBLE          shift and go to state 37
    STRING_TYPE     shift and go to state 38
    BOOL_TYPE       shift and go to state 39
    CHAR            shift and go to state 40
    VOID            shift and go to state 41
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_PAREN      shift and go to state 84
    MINUS           shift and go to state 85
    BANG            shift and go to state 86
    LIST            shift and go to state 44
    DICTIONARY      shift and go to state 45
    INTEGER         shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 89
    CHAR_LITERAL    shift and go to state 90
    NULL            shift and go to state 91
    NEW             shift and go to state 93

    boolean_expression             shift and go to state 75
    statement                      shift and go to state 333
    expression_statement           shift and go to state 192
    declaration_statement          shift and go to state 193
    assignment_statement           shift and go to state 194
    if_statement                   shift and go to state 195
    while_statement                shift and go to state 196
    for_statement                  shift and go to state 197
    foreach_statement              shift and go to state 198
    return_statement               shift and go to state 199
    block_statement                shift and go to state 200
    print_statement                shift and go to state 201
    input_statement                shift and go to state 202
    expression                     shift and go to state 203
    type_specifier                 shift and go to state 186
    primary_expression             shift and go to state 73
    arithmetic_expression          shift and go to state 74
    array_type                     shift and go to state 42
    generic_type                   shift and go to state 43
    literal                        shift and go to state 76
    function_call                  shift and go to state 77
    array_access                   shift and go to state 78
    member_access                  shift and go to state 79
    array_initialization           shift and go to state 80

state 329

    (82) for_update -> IDENTIFIER INCREMENT .

    CLOSE_PAREN     reduce using rule 82 (for_update -> IDENTIFIER INCREMENT .)


state 330

    (83) for_update -> IDENTIFIER DECREMENT .

    CLOSE_PAREN     reduce using rule 83 (for_update -> IDENTIFIER DECREMENT .)


state 331

    (85) foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .

    CLOSE_BRACE     reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    VAR             reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    IDENTIFIER      reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    IF              reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    WHILE           reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    FOR             reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    FOREACH         reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    RETURN          reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    OPEN_BRACE      reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    CONSOLE         reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    CONVERT         reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    INT_TYPE        reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    FLOAT_TYPE      reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    DOUBLE          reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    STRING_TYPE     reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    BOOL_TYPE       reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    CHAR            reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    VOID            reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    TRUE            reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    FALSE           reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    OPEN_PAREN      reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    MINUS           reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    BANG            reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    LIST            reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    DICTIONARY      reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    INTEGER         reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    FLOAT           reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    STRING          reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    CHAR_LITERAL    reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    NULL            reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    NEW             reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)
    ELSE            reduce using rule 85 (foreach_statement -> FOREACH OPEN_PAREN type_specifier IDENTIFIER IN expression CLOSE_PAREN statement .)


state 332

    (137) dictionary_initializer -> OPEN_BRACE expression COMMA expression . CLOSE_BRACE
    (106) arithmetic_expression -> expression . PLUS expression
    (107) arithmetic_expression -> expression . MINUS expression
    (108) arithmetic_expression -> expression . MULTIPLY expression
    (109) arithmetic_expression -> expression . DIVIDE expression
    (110) arithmetic_expression -> expression . PERCENT expression
    (112) boolean_expression -> expression . EQUAL expression
    (113) boolean_expression -> expression . NOT_EQUAL expression
    (114) boolean_expression -> expression . LESS_THAN expression
    (115) boolean_expression -> expression . GREATER_THAN expression
    (116) boolean_expression -> expression . LESS_THAN_EQUAL expression
    (117) boolean_expression -> expression . GREATER_THAN_EQUAL expression

    CLOSE_BRACE     shift and go to state 334
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    PERCENT         shift and go to state 116
    EQUAL           shift and go to state 117
    NOT_EQUAL       shift and go to state 118
    LESS_THAN       shift and go to state 119
    GREATER_THAN    shift and go to state 120
    LESS_THAN_EQUAL shift and go to state 121
    GREATER_THAN_EQUAL shift and go to state 122


state 333

    (77) for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .

    CLOSE_BRACE     reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    VAR             reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    IDENTIFIER      reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    IF              reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    WHILE           reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    FOR             reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    FOREACH         reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    RETURN          reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    OPEN_BRACE      reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    CONSOLE         reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    CONVERT         reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    INT_TYPE        reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    FLOAT_TYPE      reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    DOUBLE          reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    STRING_TYPE     reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    BOOL_TYPE       reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    CHAR            reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    VOID            reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    TRUE            reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    FALSE           reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    OPEN_PAREN      reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    MINUS           reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    BANG            reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    LIST            reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    DICTIONARY      reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    INTEGER         reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    FLOAT           reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    STRING          reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    CHAR_LITERAL    reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    NULL            reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    NEW             reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)
    ELSE            reduce using rule 77 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON boolean_expression SEMICOLON for_update CLOSE_PAREN statement .)


state 334

    (137) dictionary_initializer -> OPEN_BRACE expression COMMA expression CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 137 (dictionary_initializer -> OPEN_BRACE expression COMMA expression CLOSE_BRACE .)
    COMMA           reduce using rule 137 (dictionary_initializer -> OPEN_BRACE expression COMMA expression CLOSE_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USING in state 0 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 22 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 22 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 22 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 22 resolved as shift
WARNING: shift/reduce conflict for INTERNAL in state 22 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 22 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 22 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 22 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 22 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 22 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 22 resolved as shift
WARNING: shift/reduce conflict for VOID in state 22 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 22 resolved as shift
WARNING: shift/reduce conflict for LIST in state 22 resolved as shift
WARNING: shift/reduce conflict for DICTIONARY in state 22 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 24 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 24 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 24 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 24 resolved as shift
WARNING: shift/reduce conflict for INTERNAL in state 24 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 24 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 24 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 24 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 24 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 24 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 24 resolved as shift
WARNING: shift/reduce conflict for VOID in state 24 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 24 resolved as shift
WARNING: shift/reduce conflict for LIST in state 24 resolved as shift
WARNING: shift/reduce conflict for DICTIONARY in state 24 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_AMPERSAND in state 75 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_PIPE in state 75 resolved as shift
WARNING: shift/reduce conflict for VAR in state 173 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 173 resolved as shift
WARNING: shift/reduce conflict for IF in state 173 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 173 resolved as shift
WARNING: shift/reduce conflict for FOR in state 173 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 173 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 173 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACE in state 173 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 173 resolved as shift
WARNING: shift/reduce conflict for CONVERT in state 173 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 173 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 173 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 173 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 173 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 173 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 173 resolved as shift
WARNING: shift/reduce conflict for VOID in state 173 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 173 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 173 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for BANG in state 173 resolved as shift
WARNING: shift/reduce conflict for LIST in state 173 resolved as shift
WARNING: shift/reduce conflict for DICTIONARY in state 173 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 173 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 173 resolved as shift
WARNING: shift/reduce conflict for STRING in state 173 resolved as shift
WARNING: shift/reduce conflict for CHAR_LITERAL in state 173 resolved as shift
WARNING: shift/reduce conflict for NULL in state 173 resolved as shift
WARNING: shift/reduce conflict for NEW in state 173 resolved as shift
WARNING: shift/reduce conflict for VAR in state 185 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for FOR in state 185 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 185 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 185 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACE in state 185 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 185 resolved as shift
WARNING: shift/reduce conflict for CONVERT in state 185 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 185 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 185 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 185 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 185 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 185 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 185 resolved as shift
WARNING: shift/reduce conflict for VOID in state 185 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 185 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 185 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 185 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for BANG in state 185 resolved as shift
WARNING: shift/reduce conflict for LIST in state 185 resolved as shift
WARNING: shift/reduce conflict for DICTIONARY in state 185 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 185 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 185 resolved as shift
WARNING: shift/reduce conflict for STRING in state 185 resolved as shift
WARNING: shift/reduce conflict for CHAR_LITERAL in state 185 resolved as shift
WARNING: shift/reduce conflict for NULL in state 185 resolved as shift
WARNING: shift/reduce conflict for NEW in state 185 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 187 resolved as shift
WARNING: shift/reduce conflict for VAR in state 188 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 188 resolved as shift
WARNING: shift/reduce conflict for IF in state 188 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 188 resolved as shift
WARNING: shift/reduce conflict for FOR in state 188 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 188 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 188 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACE in state 188 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 188 resolved as shift
WARNING: shift/reduce conflict for CONVERT in state 188 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 188 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 188 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 188 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 188 resolved as shift
WARNING: shift/reduce conflict for BANG in state 188 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 188 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 188 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 188 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 188 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 188 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 188 resolved as shift
WARNING: shift/reduce conflict for VOID in state 188 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 188 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 188 resolved as shift
WARNING: shift/reduce conflict for STRING in state 188 resolved as shift
WARNING: shift/reduce conflict for CHAR_LITERAL in state 188 resolved as shift
WARNING: shift/reduce conflict for NULL in state 188 resolved as shift
WARNING: shift/reduce conflict for NEW in state 188 resolved as shift
WARNING: shift/reduce conflict for LIST in state 188 resolved as shift
WARNING: shift/reduce conflict for DICTIONARY in state 188 resolved as shift
WARNING: shift/reduce conflict for VAR in state 212 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 212 resolved as shift
WARNING: shift/reduce conflict for IF in state 212 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 212 resolved as shift
WARNING: shift/reduce conflict for FOR in state 212 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 212 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 212 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACE in state 212 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 212 resolved as shift
WARNING: shift/reduce conflict for CONVERT in state 212 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 212 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 212 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 212 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 212 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 212 resolved as shift
WARNING: shift/reduce conflict for VOID in state 212 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 212 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 212 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 212 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 212 resolved as shift
WARNING: shift/reduce conflict for BANG in state 212 resolved as shift
WARNING: shift/reduce conflict for LIST in state 212 resolved as shift
WARNING: shift/reduce conflict for DICTIONARY in state 212 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 212 resolved as shift
WARNING: shift/reduce conflict for STRING in state 212 resolved as shift
WARNING: shift/reduce conflict for CHAR_LITERAL in state 212 resolved as shift
WARNING: shift/reduce conflict for NULL in state 212 resolved as shift
WARNING: shift/reduce conflict for NEW in state 212 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 228 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 256 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 287 resolved as shift
WARNING: reduce/reduce conflict in state 127 resolved using rule (expression -> boolean_expression)
WARNING: rejected rule (boolean_expression -> BANG boolean_expression) in state 127
WARNING: reduce/reduce conflict in state 162 resolved using rule (expression -> boolean_expression)
WARNING: rejected rule (boolean_expression -> boolean_expression DOUBLE_AMPERSAND boolean_expression) in state 162
WARNING: reduce/reduce conflict in state 163 resolved using rule (expression -> boolean_expression)
WARNING: rejected rule (boolean_expression -> boolean_expression DOUBLE_PIPE boolean_expression) in state 163
WARNING: reduce/reduce conflict in state 202 resolved using rule (statement -> input_statement)
WARNING: rejected rule (primary_expression -> input_statement) in state 202
WARNING: reduce/reduce conflict in state 226 resolved using rule (statement_list -> empty)
WARNING: rejected rule (expression_list -> empty) in state 226
