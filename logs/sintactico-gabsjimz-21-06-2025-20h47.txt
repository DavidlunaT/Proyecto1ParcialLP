Syntactic Analysis Log
User: gabsjimz
File: algoritmos/algoritmo3.cs
Date: 21-06-2025-20h47

No syntactic errors detected.
Parse result: ('program', [('using', 'System'), ('class', 'Test', [('static_method', 'void', 'Main', [], [('array_decl_values', 'int', 'array', ('new_array_init', 'int', [1, 2, 3])), ('declare_assign', 'int', 'len', ('dot_access', 'array', 'Length')), ('declare_assign', 'int', 'val', ('array_access', 'array', 0)), ('print', ('array_access', 'array', 1))])])])

=== PARSER DEBUG INFO ===
Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ALIAS
    AMPERSAND
    AMPERSAND_ASSIGN
    ARROW
    AS
    ASCENDING
    ASYNC
    AWAIT
    BANG
    BASE
    BY
    BYTE
    CARET
    CARET_ASSIGN
    CATCH
    CHAR
    CHAR_LITERAL
    CHECKED
    CONST
    CONTINUE
    DECIMAL
    DELEGATE
    DESCENDING
    DIVIDE_ASSIGN
    DO
    DOUBLE
    DOUBLE_COLON
    DOUBLE_QUESTION
    DYNAMIC
    ENUM
    EQUALS
    EVENT
    EXPLICIT
    EXTERN
    FALSE
    FINALLY
    FIXED
    FOREACH
    FROM
    GLOBAL
    GOTO
    GROUP
    IMPLICIT
    IN
    INTERFACE
    INTERNAL
    INTO
    IS
    JOIN
    LAMBDA_ARROW
    LEFT_SHIFT
    LEFT_SHIFT_ASSIGN
    LET
    LOCK
    LONG
    MINUS_ASSIGN
    MULTIPLY_ASSIGN
    NAMEOF
    NAMESPACE
    NOTNULL
    NULL
    NULLABLE_OPERATOR
    OBJECT
    ON
    OPERATOR
    ORDERBY
    OUT
    OVERRIDE
    PARAMS
    PARTIAL
    PERCENT
    PERCENT_ASSIGN
    PIPE
    PIPE_ASSIGN
    PLUS_ASSIGN
    PRIVATE
    PROTECTED
    QUESTION
    READONLY
    REF
    REMOVE
    RIGHT_SHIFT
    RIGHT_SHIFT_ASSIGN
    SBYTE
    SEALED
    SELECT
    SHORT
    SIZEOF
    STACKALLOC
    STRUCT
    THIS
    THROW
    TILDE
    TRUE
    TRY
    TYPEOF
    UINT
    ULONG
    UNCHECKED
    UNMANAGED
    UNSAFE
    USHORT
    VALUE
    VAR
    VERBATIM_STRING
    VIRTUAL
    VOLATILE
    WHEN
    WHERE
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     program -> empty
Rule 3     empty -> <empty>
Rule 4     expression -> expression PLUS term
Rule 5     expression -> expression MINUS term
Rule 6     expression -> term
Rule 7     expression -> IDENTIFIER
Rule 8     expression -> function_call
Rule 9     term -> term MULTIPLY factor
Rule 10    term -> term DIVIDE factor
Rule 11    term -> factor
Rule 12    factor -> INTEGER
Rule 13    factor -> FLOAT
Rule 14    factor -> STRING
Rule 15    factor -> IDENTIFIER
Rule 16    factor -> OPEN_PAREN expression CLOSE_PAREN
Rule 17    using_statement -> USING IDENTIFIER SEMICOLON
Rule 18    using_statement -> USING CLASS_NAME SEMICOLON
Rule 19    function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN
Rule 20    function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
Rule 21    function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN
Rule 22    function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
Rule 23    function_call_statement -> function_call SEMICOLON
Rule 24    argument_list -> expression
Rule 25    argument_list -> argument_list COMMA expression
Rule 26    print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
Rule 27    print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
Rule 28    input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
Rule 29    convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN
Rule 30    assignment -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 31    assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON
Rule 32    assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
Rule 33    assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
Rule 34    assignment -> INT_TYPE multiple_var_declaration SEMICOLON
Rule 35    assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
Rule 36    assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
Rule 37    assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
Rule 38    assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
Rule 39    multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression
Rule 40    multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression
Rule 41    condition -> expression EQUAL expression
Rule 42    condition -> expression NOT_EQUAL expression
Rule 43    condition -> expression LESS_THAN expression
Rule 44    condition -> expression GREATER_THAN expression
Rule 45    condition -> expression LESS_THAN_EQUAL expression
Rule 46    condition -> expression GREATER_THAN_EQUAL expression
Rule 47    condition -> expression EQUAL STRING
Rule 48    condition -> STRING EQUAL expression
Rule 49    logical_condition -> condition
Rule 50    logical_condition -> condition DOUBLE_AMPERSAND condition
Rule 51    logical_condition -> condition DOUBLE_PIPE condition
Rule 52    array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
Rule 53    array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
Rule 54    array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 55    array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
Rule 56    if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 57    if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 58    if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
Rule 59    basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 60    list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 61    list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 62    list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
Rule 63    while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 64    for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 65    for_init -> INT_TYPE IDENTIFIER ASSIGN expression
Rule 66    for_init -> assignment_no_semicolon
Rule 67    assignment_no_semicolon -> IDENTIFIER ASSIGN expression
Rule 68    for_update -> IDENTIFIER INCREMENT
Rule 69    for_update -> IDENTIFIER DECREMENT
Rule 70    for_update -> INCREMENT IDENTIFIER
Rule 71    for_update -> DECREMENT IDENTIFIER
Rule 72    param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 73    param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 74    parameter_list -> parameter
Rule 75    parameter_list -> parameter_list COMMA parameter
Rule 76    parameter -> INT_TYPE IDENTIFIER
Rule 77    parameter -> STRING_TYPE IDENTIFIER
Rule 78    parameter -> FLOAT_TYPE IDENTIFIER
Rule 79    dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 80    dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 81    dictionary_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 82    dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
Rule 83    switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
Rule 84    case_list -> case_statement
Rule 85    case_list -> case_list case_statement
Rule 86    case_statement -> CASE expression COLON statement_list BREAK SEMICOLON
Rule 87    case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON
Rule 88    return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
Rule 89    return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
Rule 90    return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
Rule 91    return_statement -> RETURN SEMICOLON
Rule 92    expression -> expression OPEN_BRACKET expression CLOSE_BRACKET
Rule 93    expression -> expression DOT IDENTIFIER
Rule 94    array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
Rule 95    value_list -> expression
Rule 96    value_list -> value_list COMMA expression
Rule 97    expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
Rule 98    static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 99    static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 100   static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 101   static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 102   static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 103   static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 104   static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 105   static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 106   main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 107   main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 108   main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 109   main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 110   class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
Rule 111   class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
Rule 112   class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
Rule 113   class_body -> class_member
Rule 114   class_body -> class_body class_member
Rule 115   class_member -> property_definition
Rule 116   class_member -> method_definition
Rule 117   class_member -> main_method
Rule 118   class_member -> static_method
Rule 119   property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
Rule 120   property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
Rule 121   method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 122   method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 123   statement_list -> statement
Rule 124   statement_list -> statement_list statement
Rule 125   statement -> assignment
Rule 126   statement -> print_statement
Rule 127   statement -> array_declaration
Rule 128   statement -> if_statement
Rule 129   statement -> while_statement
Rule 130   statement -> for_statement
Rule 131   statement -> switch_statement
Rule 132   statement -> array_assignment
Rule 133   statement -> list_declaration
Rule 134   statement -> list_add
Rule 135   statement -> dictionary_declaration
Rule 136   statement -> dict_assignment
Rule 137   statement -> class_definition
Rule 138   statement -> basic_function
Rule 139   statement -> param_function
Rule 140   statement -> return_function
Rule 141   statement -> return_statement
Rule 142   statement -> using_statement
Rule 143   statement -> function_call_statement

Terminals, with rules where they appear

ABSTRACT             : 
ADD                  : 62
ALIAS                : 
AMPERSAND            : 
AMPERSAND_ASSIGN     : 
ARROW                : 
AS                   : 
ASCENDING            : 
ASSIGN               : 30 31 32 33 35 36 37 38 39 39 40 52 53 55 60 61 65 67 79 80 82 94
ASYNC                : 
AWAIT                : 
BANG                 : 
BASE                 : 
BOOL_TYPE            : 38
BREAK                : 86 87
BY                   : 
BYTE                 : 
CARET                : 
CARET_ASSIGN         : 
CASE                 : 86
CATCH                : 
CHAR                 : 
CHAR_LITERAL         : 
CHECKED              : 
CLASS                : 110 111 112
CLASS_NAME           : 18 21 22 100 101 104 105 108 109 110 112
CLOSE_BRACE          : 56 57 57 58 58 59 63 64 72 73 83 88 89 90 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 119 120 121 122
CLOSE_BRACKET        : 52 52 53 53 54 55 81 82 92 94 97 106 108
CLOSE_PAREN          : 16 19 20 21 22 26 27 28 29 56 57 57 58 59 60 61 62 63 64 72 73 79 80 83 88 89 90 98 99 100 101 102 103 104 105 106 107 108 109 121 122
COLON                : 86 87
COMMA                : 25 39 40 75 79 79 80 80 96
CONSOLE              : 26 27 28
CONST                : 
CONTINUE             : 
CONVERT              : 29
DECIMAL              : 
DECREMENT            : 69 71
DEFAULT              : 87
DELEGATE             : 
DESCENDING           : 
DICTIONARY           : 79 79 80 80
DIVIDE               : 10
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 26 27 28 29 62 93
DOUBLE               : 
DOUBLE_AMPERSAND     : 50
DOUBLE_COLON         : 
DOUBLE_PIPE          : 51
DOUBLE_QUESTION      : 
DYNAMIC              : 
ELSE                 : 57 58
ENUM                 : 
EQUAL                : 41 47 48
EQUALS               : 
EVENT                : 
EXPLICIT             : 
EXTERN               : 
FALSE                : 
FINALLY              : 
FIXED                : 
FLOAT                : 13
FLOAT_TYPE           : 35 78 90
FOR                  : 64
FOREACH              : 
FROM                 : 
GET                  : 119 120
GLOBAL               : 
GOTO                 : 
GREATER_THAN         : 44 60 60 61 61 79 79 80 80
GREATER_THAN_EQUAL   : 46
GROUP                : 
IDENTIFIER           : 7 15 17 19 20 30 31 32 33 35 36 37 38 39 39 40 52 53 54 55 59 60 61 62 65 67 68 69 70 71 72 73 76 77 78 79 80 81 82 88 89 90 93 94 98 99 102 103 106 106 107 108 111 119 120 121 122
IF                   : 56 57 57 58
IMPLICIT             : 
IN                   : 
INCREMENT            : 68 70
INTEGER              : 12 52 53
INTERFACE            : 
INTERNAL             : 
INTO                 : 
INT_TYPE             : 32 33 34 52 52 60 60 65 73 76 79 79 80 80 88 94 97 102 103 104 105 119 122
IS                   : 
JOIN                 : 
LAMBDA_ARROW         : 
LEFT_SHIFT           : 
LEFT_SHIFT_ASSIGN    : 
LESS_THAN            : 43 60 60 61 61 79 79 80 80
LESS_THAN_EQUAL      : 45
LET                  : 
LIST                 : 60 60 61 61
LOCK                 : 
LONG                 : 
MINUS                : 5
MINUS_ASSIGN         : 
MULTIPLY             : 9
MULTIPLY_ASSIGN      : 
NAMEOF               : 
NAMESPACE            : 
NEW                  : 52 53 60 61 79 80 97
NOTNULL              : 
NOT_EQUAL            : 42
NULL                 : 
NULLABLE_OPERATOR    : 
OBJECT               : 
ON                   : 
OPEN_BRACE           : 56 57 57 58 58 59 63 64 72 73 83 88 89 90 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 119 120 121 122
OPEN_BRACKET         : 52 52 53 53 54 55 81 82 92 94 97 106 108
OPEN_PAREN           : 16 19 20 21 22 26 27 28 29 56 57 57 58 59 60 61 62 63 64 72 73 79 80 83 88 89 90 98 99 100 101 102 103 104 105 106 107 108 109 121 122
OPERATOR             : 
ORDERBY              : 
OUT                  : 
OVERRIDE             : 
PARAMS               : 
PARTIAL              : 
PERCENT              : 
PERCENT_ASSIGN       : 
PIPE                 : 
PIPE_ASSIGN          : 
PLUS                 : 4
PLUS_ASSIGN          : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 112 119 120 121 122
QUESTION             : 
READLINE             : 28
READONLY             : 
REF                  : 
REMOVE               : 
RETURN               : 88 89 90 91
RIGHT_SHIFT          : 
RIGHT_SHIFT_ASSIGN   : 
SBYTE                : 
SEALED               : 
SELECT               : 
SEMICOLON            : 17 18 23 26 27 30 31 32 33 34 35 36 37 38 52 53 55 60 61 62 64 64 79 80 82 86 87 88 89 90 91 94 119 119 120 120
SET                  : 119 120
SHORT                : 
SIZEOF               : 
STACKALLOC           : 
STATIC               : 98 99 100 101 102 103 104 105 106 107 108 109
STRING               : 14 47 48
STRING_TYPE          : 36 37 53 53 61 61 77 79 79 80 80 89 106 108 120
STRUCT               : 
SWITCH               : 83
THIS                 : 
THROW                : 
TILDE                : 
TOINT32              : 29
TRUE                 : 
TRY                  : 
TYPEOF               : 
UINT                 : 
ULONG                : 
UNCHECKED            : 
UNMANAGED            : 
UNSAFE               : 
USHORT               : 
USING                : 17 18
VALUE                : 
VAR                  : 
VERBATIM_STRING      : 
VIRTUAL              : 
VOID                 : 59 72 98 99 100 101 106 107 108 109 121
VOLATILE             : 
WHEN                 : 
WHERE                : 
WHILE                : 63
WRITE                : 27
WRITELINE            : 26
YIELD                : 
error                : 

Nonterminals, with rules where they appear

argument_list        : 20 22 25
array_access         : 
array_assignment     : 132
array_declaration    : 127
assignment           : 125
assignment_no_semicolon : 66
basic_function       : 138
case_list            : 83 85
case_statement       : 84 85
class_body           : 110 111 112 114
class_definition     : 137
class_member         : 113 114
condition            : 49 50 50 51 51
convert_statement    : 31 33
dict_assignment      : 136
dictionary_access    : 
dictionary_declaration : 135
empty                : 2
expression           : 4 5 16 24 25 26 27 29 30 32 35 36 38 39 39 40 41 41 42 42 43 43 44 44 45 45 46 46 47 48 54 55 55 62 65 67 81 82 82 83 86 88 89 90 92 92 93 94 95 96
factor               : 9 10 11
for_init             : 64
for_statement        : 130
for_update           : 64
function_call        : 8 23
function_call_statement : 143
if_statement         : 128
input_statement      : 37
list_add             : 134
list_declaration     : 133
logical_condition    : 56 57 57 58 63 64
main_method          : 117
method_definition    : 116
multiple_var_declaration : 34 40
param_function       : 139
parameter            : 74 75
parameter_list       : 72 73 75 99 101 103 105
print_statement      : 126
program              : 0
property_definition  : 115
return_function      : 140
return_statement     : 141
statement            : 123 124
statement_list       : 1 56 57 57 58 58 59 63 64 72 73 86 87 88 89 90 98 99 100 101 102 103 104 105 106 107 108 109 121 122 124
static_method        : 118
switch_statement     : 131
term                 : 4 5 6 9 10
using_statement      : 142
value_list           : 96 97
while_statement      : 129

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) program -> . empty
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (3) empty -> .
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    $end            reduce using rule 3 (empty -> .)
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    empty                          shift and go to state 3
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 4

    (123) statement_list -> statement .

    IDENTIFIER      reduce using rule 123 (statement_list -> statement .)
    INT_TYPE        reduce using rule 123 (statement_list -> statement .)
    FLOAT_TYPE      reduce using rule 123 (statement_list -> statement .)
    STRING_TYPE     reduce using rule 123 (statement_list -> statement .)
    BOOL_TYPE       reduce using rule 123 (statement_list -> statement .)
    CONSOLE         reduce using rule 123 (statement_list -> statement .)
    IF              reduce using rule 123 (statement_list -> statement .)
    WHILE           reduce using rule 123 (statement_list -> statement .)
    FOR             reduce using rule 123 (statement_list -> statement .)
    SWITCH          reduce using rule 123 (statement_list -> statement .)
    LIST            reduce using rule 123 (statement_list -> statement .)
    DICTIONARY      reduce using rule 123 (statement_list -> statement .)
    CLASS           reduce using rule 123 (statement_list -> statement .)
    PUBLIC          reduce using rule 123 (statement_list -> statement .)
    VOID            reduce using rule 123 (statement_list -> statement .)
    RETURN          reduce using rule 123 (statement_list -> statement .)
    USING           reduce using rule 123 (statement_list -> statement .)
    CLASS_NAME      reduce using rule 123 (statement_list -> statement .)
    $end            reduce using rule 123 (statement_list -> statement .)
    CLOSE_BRACE     reduce using rule 123 (statement_list -> statement .)
    BREAK           reduce using rule 123 (statement_list -> statement .)


state 5

    (125) statement -> assignment .

    IDENTIFIER      reduce using rule 125 (statement -> assignment .)
    INT_TYPE        reduce using rule 125 (statement -> assignment .)
    FLOAT_TYPE      reduce using rule 125 (statement -> assignment .)
    STRING_TYPE     reduce using rule 125 (statement -> assignment .)
    BOOL_TYPE       reduce using rule 125 (statement -> assignment .)
    CONSOLE         reduce using rule 125 (statement -> assignment .)
    IF              reduce using rule 125 (statement -> assignment .)
    WHILE           reduce using rule 125 (statement -> assignment .)
    FOR             reduce using rule 125 (statement -> assignment .)
    SWITCH          reduce using rule 125 (statement -> assignment .)
    LIST            reduce using rule 125 (statement -> assignment .)
    DICTIONARY      reduce using rule 125 (statement -> assignment .)
    CLASS           reduce using rule 125 (statement -> assignment .)
    PUBLIC          reduce using rule 125 (statement -> assignment .)
    VOID            reduce using rule 125 (statement -> assignment .)
    RETURN          reduce using rule 125 (statement -> assignment .)
    USING           reduce using rule 125 (statement -> assignment .)
    CLASS_NAME      reduce using rule 125 (statement -> assignment .)
    $end            reduce using rule 125 (statement -> assignment .)
    CLOSE_BRACE     reduce using rule 125 (statement -> assignment .)
    BREAK           reduce using rule 125 (statement -> assignment .)


state 6

    (126) statement -> print_statement .

    IDENTIFIER      reduce using rule 126 (statement -> print_statement .)
    INT_TYPE        reduce using rule 126 (statement -> print_statement .)
    FLOAT_TYPE      reduce using rule 126 (statement -> print_statement .)
    STRING_TYPE     reduce using rule 126 (statement -> print_statement .)
    BOOL_TYPE       reduce using rule 126 (statement -> print_statement .)
    CONSOLE         reduce using rule 126 (statement -> print_statement .)
    IF              reduce using rule 126 (statement -> print_statement .)
    WHILE           reduce using rule 126 (statement -> print_statement .)
    FOR             reduce using rule 126 (statement -> print_statement .)
    SWITCH          reduce using rule 126 (statement -> print_statement .)
    LIST            reduce using rule 126 (statement -> print_statement .)
    DICTIONARY      reduce using rule 126 (statement -> print_statement .)
    CLASS           reduce using rule 126 (statement -> print_statement .)
    PUBLIC          reduce using rule 126 (statement -> print_statement .)
    VOID            reduce using rule 126 (statement -> print_statement .)
    RETURN          reduce using rule 126 (statement -> print_statement .)
    USING           reduce using rule 126 (statement -> print_statement .)
    CLASS_NAME      reduce using rule 126 (statement -> print_statement .)
    $end            reduce using rule 126 (statement -> print_statement .)
    CLOSE_BRACE     reduce using rule 126 (statement -> print_statement .)
    BREAK           reduce using rule 126 (statement -> print_statement .)


state 7

    (127) statement -> array_declaration .

    IDENTIFIER      reduce using rule 127 (statement -> array_declaration .)
    INT_TYPE        reduce using rule 127 (statement -> array_declaration .)
    FLOAT_TYPE      reduce using rule 127 (statement -> array_declaration .)
    STRING_TYPE     reduce using rule 127 (statement -> array_declaration .)
    BOOL_TYPE       reduce using rule 127 (statement -> array_declaration .)
    CONSOLE         reduce using rule 127 (statement -> array_declaration .)
    IF              reduce using rule 127 (statement -> array_declaration .)
    WHILE           reduce using rule 127 (statement -> array_declaration .)
    FOR             reduce using rule 127 (statement -> array_declaration .)
    SWITCH          reduce using rule 127 (statement -> array_declaration .)
    LIST            reduce using rule 127 (statement -> array_declaration .)
    DICTIONARY      reduce using rule 127 (statement -> array_declaration .)
    CLASS           reduce using rule 127 (statement -> array_declaration .)
    PUBLIC          reduce using rule 127 (statement -> array_declaration .)
    VOID            reduce using rule 127 (statement -> array_declaration .)
    RETURN          reduce using rule 127 (statement -> array_declaration .)
    USING           reduce using rule 127 (statement -> array_declaration .)
    CLASS_NAME      reduce using rule 127 (statement -> array_declaration .)
    $end            reduce using rule 127 (statement -> array_declaration .)
    CLOSE_BRACE     reduce using rule 127 (statement -> array_declaration .)
    BREAK           reduce using rule 127 (statement -> array_declaration .)


state 8

    (128) statement -> if_statement .

    IDENTIFIER      reduce using rule 128 (statement -> if_statement .)
    INT_TYPE        reduce using rule 128 (statement -> if_statement .)
    FLOAT_TYPE      reduce using rule 128 (statement -> if_statement .)
    STRING_TYPE     reduce using rule 128 (statement -> if_statement .)
    BOOL_TYPE       reduce using rule 128 (statement -> if_statement .)
    CONSOLE         reduce using rule 128 (statement -> if_statement .)
    IF              reduce using rule 128 (statement -> if_statement .)
    WHILE           reduce using rule 128 (statement -> if_statement .)
    FOR             reduce using rule 128 (statement -> if_statement .)
    SWITCH          reduce using rule 128 (statement -> if_statement .)
    LIST            reduce using rule 128 (statement -> if_statement .)
    DICTIONARY      reduce using rule 128 (statement -> if_statement .)
    CLASS           reduce using rule 128 (statement -> if_statement .)
    PUBLIC          reduce using rule 128 (statement -> if_statement .)
    VOID            reduce using rule 128 (statement -> if_statement .)
    RETURN          reduce using rule 128 (statement -> if_statement .)
    USING           reduce using rule 128 (statement -> if_statement .)
    CLASS_NAME      reduce using rule 128 (statement -> if_statement .)
    $end            reduce using rule 128 (statement -> if_statement .)
    CLOSE_BRACE     reduce using rule 128 (statement -> if_statement .)
    BREAK           reduce using rule 128 (statement -> if_statement .)


state 9

    (129) statement -> while_statement .

    IDENTIFIER      reduce using rule 129 (statement -> while_statement .)
    INT_TYPE        reduce using rule 129 (statement -> while_statement .)
    FLOAT_TYPE      reduce using rule 129 (statement -> while_statement .)
    STRING_TYPE     reduce using rule 129 (statement -> while_statement .)
    BOOL_TYPE       reduce using rule 129 (statement -> while_statement .)
    CONSOLE         reduce using rule 129 (statement -> while_statement .)
    IF              reduce using rule 129 (statement -> while_statement .)
    WHILE           reduce using rule 129 (statement -> while_statement .)
    FOR             reduce using rule 129 (statement -> while_statement .)
    SWITCH          reduce using rule 129 (statement -> while_statement .)
    LIST            reduce using rule 129 (statement -> while_statement .)
    DICTIONARY      reduce using rule 129 (statement -> while_statement .)
    CLASS           reduce using rule 129 (statement -> while_statement .)
    PUBLIC          reduce using rule 129 (statement -> while_statement .)
    VOID            reduce using rule 129 (statement -> while_statement .)
    RETURN          reduce using rule 129 (statement -> while_statement .)
    USING           reduce using rule 129 (statement -> while_statement .)
    CLASS_NAME      reduce using rule 129 (statement -> while_statement .)
    $end            reduce using rule 129 (statement -> while_statement .)
    CLOSE_BRACE     reduce using rule 129 (statement -> while_statement .)
    BREAK           reduce using rule 129 (statement -> while_statement .)


state 10

    (130) statement -> for_statement .

    IDENTIFIER      reduce using rule 130 (statement -> for_statement .)
    INT_TYPE        reduce using rule 130 (statement -> for_statement .)
    FLOAT_TYPE      reduce using rule 130 (statement -> for_statement .)
    STRING_TYPE     reduce using rule 130 (statement -> for_statement .)
    BOOL_TYPE       reduce using rule 130 (statement -> for_statement .)
    CONSOLE         reduce using rule 130 (statement -> for_statement .)
    IF              reduce using rule 130 (statement -> for_statement .)
    WHILE           reduce using rule 130 (statement -> for_statement .)
    FOR             reduce using rule 130 (statement -> for_statement .)
    SWITCH          reduce using rule 130 (statement -> for_statement .)
    LIST            reduce using rule 130 (statement -> for_statement .)
    DICTIONARY      reduce using rule 130 (statement -> for_statement .)
    CLASS           reduce using rule 130 (statement -> for_statement .)
    PUBLIC          reduce using rule 130 (statement -> for_statement .)
    VOID            reduce using rule 130 (statement -> for_statement .)
    RETURN          reduce using rule 130 (statement -> for_statement .)
    USING           reduce using rule 130 (statement -> for_statement .)
    CLASS_NAME      reduce using rule 130 (statement -> for_statement .)
    $end            reduce using rule 130 (statement -> for_statement .)
    CLOSE_BRACE     reduce using rule 130 (statement -> for_statement .)
    BREAK           reduce using rule 130 (statement -> for_statement .)


state 11

    (131) statement -> switch_statement .

    IDENTIFIER      reduce using rule 131 (statement -> switch_statement .)
    INT_TYPE        reduce using rule 131 (statement -> switch_statement .)
    FLOAT_TYPE      reduce using rule 131 (statement -> switch_statement .)
    STRING_TYPE     reduce using rule 131 (statement -> switch_statement .)
    BOOL_TYPE       reduce using rule 131 (statement -> switch_statement .)
    CONSOLE         reduce using rule 131 (statement -> switch_statement .)
    IF              reduce using rule 131 (statement -> switch_statement .)
    WHILE           reduce using rule 131 (statement -> switch_statement .)
    FOR             reduce using rule 131 (statement -> switch_statement .)
    SWITCH          reduce using rule 131 (statement -> switch_statement .)
    LIST            reduce using rule 131 (statement -> switch_statement .)
    DICTIONARY      reduce using rule 131 (statement -> switch_statement .)
    CLASS           reduce using rule 131 (statement -> switch_statement .)
    PUBLIC          reduce using rule 131 (statement -> switch_statement .)
    VOID            reduce using rule 131 (statement -> switch_statement .)
    RETURN          reduce using rule 131 (statement -> switch_statement .)
    USING           reduce using rule 131 (statement -> switch_statement .)
    CLASS_NAME      reduce using rule 131 (statement -> switch_statement .)
    $end            reduce using rule 131 (statement -> switch_statement .)
    CLOSE_BRACE     reduce using rule 131 (statement -> switch_statement .)
    BREAK           reduce using rule 131 (statement -> switch_statement .)


state 12

    (132) statement -> array_assignment .

    IDENTIFIER      reduce using rule 132 (statement -> array_assignment .)
    INT_TYPE        reduce using rule 132 (statement -> array_assignment .)
    FLOAT_TYPE      reduce using rule 132 (statement -> array_assignment .)
    STRING_TYPE     reduce using rule 132 (statement -> array_assignment .)
    BOOL_TYPE       reduce using rule 132 (statement -> array_assignment .)
    CONSOLE         reduce using rule 132 (statement -> array_assignment .)
    IF              reduce using rule 132 (statement -> array_assignment .)
    WHILE           reduce using rule 132 (statement -> array_assignment .)
    FOR             reduce using rule 132 (statement -> array_assignment .)
    SWITCH          reduce using rule 132 (statement -> array_assignment .)
    LIST            reduce using rule 132 (statement -> array_assignment .)
    DICTIONARY      reduce using rule 132 (statement -> array_assignment .)
    CLASS           reduce using rule 132 (statement -> array_assignment .)
    PUBLIC          reduce using rule 132 (statement -> array_assignment .)
    VOID            reduce using rule 132 (statement -> array_assignment .)
    RETURN          reduce using rule 132 (statement -> array_assignment .)
    USING           reduce using rule 132 (statement -> array_assignment .)
    CLASS_NAME      reduce using rule 132 (statement -> array_assignment .)
    $end            reduce using rule 132 (statement -> array_assignment .)
    CLOSE_BRACE     reduce using rule 132 (statement -> array_assignment .)
    BREAK           reduce using rule 132 (statement -> array_assignment .)


state 13

    (133) statement -> list_declaration .

    IDENTIFIER      reduce using rule 133 (statement -> list_declaration .)
    INT_TYPE        reduce using rule 133 (statement -> list_declaration .)
    FLOAT_TYPE      reduce using rule 133 (statement -> list_declaration .)
    STRING_TYPE     reduce using rule 133 (statement -> list_declaration .)
    BOOL_TYPE       reduce using rule 133 (statement -> list_declaration .)
    CONSOLE         reduce using rule 133 (statement -> list_declaration .)
    IF              reduce using rule 133 (statement -> list_declaration .)
    WHILE           reduce using rule 133 (statement -> list_declaration .)
    FOR             reduce using rule 133 (statement -> list_declaration .)
    SWITCH          reduce using rule 133 (statement -> list_declaration .)
    LIST            reduce using rule 133 (statement -> list_declaration .)
    DICTIONARY      reduce using rule 133 (statement -> list_declaration .)
    CLASS           reduce using rule 133 (statement -> list_declaration .)
    PUBLIC          reduce using rule 133 (statement -> list_declaration .)
    VOID            reduce using rule 133 (statement -> list_declaration .)
    RETURN          reduce using rule 133 (statement -> list_declaration .)
    USING           reduce using rule 133 (statement -> list_declaration .)
    CLASS_NAME      reduce using rule 133 (statement -> list_declaration .)
    $end            reduce using rule 133 (statement -> list_declaration .)
    CLOSE_BRACE     reduce using rule 133 (statement -> list_declaration .)
    BREAK           reduce using rule 133 (statement -> list_declaration .)


state 14

    (134) statement -> list_add .

    IDENTIFIER      reduce using rule 134 (statement -> list_add .)
    INT_TYPE        reduce using rule 134 (statement -> list_add .)
    FLOAT_TYPE      reduce using rule 134 (statement -> list_add .)
    STRING_TYPE     reduce using rule 134 (statement -> list_add .)
    BOOL_TYPE       reduce using rule 134 (statement -> list_add .)
    CONSOLE         reduce using rule 134 (statement -> list_add .)
    IF              reduce using rule 134 (statement -> list_add .)
    WHILE           reduce using rule 134 (statement -> list_add .)
    FOR             reduce using rule 134 (statement -> list_add .)
    SWITCH          reduce using rule 134 (statement -> list_add .)
    LIST            reduce using rule 134 (statement -> list_add .)
    DICTIONARY      reduce using rule 134 (statement -> list_add .)
    CLASS           reduce using rule 134 (statement -> list_add .)
    PUBLIC          reduce using rule 134 (statement -> list_add .)
    VOID            reduce using rule 134 (statement -> list_add .)
    RETURN          reduce using rule 134 (statement -> list_add .)
    USING           reduce using rule 134 (statement -> list_add .)
    CLASS_NAME      reduce using rule 134 (statement -> list_add .)
    $end            reduce using rule 134 (statement -> list_add .)
    CLOSE_BRACE     reduce using rule 134 (statement -> list_add .)
    BREAK           reduce using rule 134 (statement -> list_add .)


state 15

    (135) statement -> dictionary_declaration .

    IDENTIFIER      reduce using rule 135 (statement -> dictionary_declaration .)
    INT_TYPE        reduce using rule 135 (statement -> dictionary_declaration .)
    FLOAT_TYPE      reduce using rule 135 (statement -> dictionary_declaration .)
    STRING_TYPE     reduce using rule 135 (statement -> dictionary_declaration .)
    BOOL_TYPE       reduce using rule 135 (statement -> dictionary_declaration .)
    CONSOLE         reduce using rule 135 (statement -> dictionary_declaration .)
    IF              reduce using rule 135 (statement -> dictionary_declaration .)
    WHILE           reduce using rule 135 (statement -> dictionary_declaration .)
    FOR             reduce using rule 135 (statement -> dictionary_declaration .)
    SWITCH          reduce using rule 135 (statement -> dictionary_declaration .)
    LIST            reduce using rule 135 (statement -> dictionary_declaration .)
    DICTIONARY      reduce using rule 135 (statement -> dictionary_declaration .)
    CLASS           reduce using rule 135 (statement -> dictionary_declaration .)
    PUBLIC          reduce using rule 135 (statement -> dictionary_declaration .)
    VOID            reduce using rule 135 (statement -> dictionary_declaration .)
    RETURN          reduce using rule 135 (statement -> dictionary_declaration .)
    USING           reduce using rule 135 (statement -> dictionary_declaration .)
    CLASS_NAME      reduce using rule 135 (statement -> dictionary_declaration .)
    $end            reduce using rule 135 (statement -> dictionary_declaration .)
    CLOSE_BRACE     reduce using rule 135 (statement -> dictionary_declaration .)
    BREAK           reduce using rule 135 (statement -> dictionary_declaration .)


state 16

    (136) statement -> dict_assignment .

    IDENTIFIER      reduce using rule 136 (statement -> dict_assignment .)
    INT_TYPE        reduce using rule 136 (statement -> dict_assignment .)
    FLOAT_TYPE      reduce using rule 136 (statement -> dict_assignment .)
    STRING_TYPE     reduce using rule 136 (statement -> dict_assignment .)
    BOOL_TYPE       reduce using rule 136 (statement -> dict_assignment .)
    CONSOLE         reduce using rule 136 (statement -> dict_assignment .)
    IF              reduce using rule 136 (statement -> dict_assignment .)
    WHILE           reduce using rule 136 (statement -> dict_assignment .)
    FOR             reduce using rule 136 (statement -> dict_assignment .)
    SWITCH          reduce using rule 136 (statement -> dict_assignment .)
    LIST            reduce using rule 136 (statement -> dict_assignment .)
    DICTIONARY      reduce using rule 136 (statement -> dict_assignment .)
    CLASS           reduce using rule 136 (statement -> dict_assignment .)
    PUBLIC          reduce using rule 136 (statement -> dict_assignment .)
    VOID            reduce using rule 136 (statement -> dict_assignment .)
    RETURN          reduce using rule 136 (statement -> dict_assignment .)
    USING           reduce using rule 136 (statement -> dict_assignment .)
    CLASS_NAME      reduce using rule 136 (statement -> dict_assignment .)
    $end            reduce using rule 136 (statement -> dict_assignment .)
    CLOSE_BRACE     reduce using rule 136 (statement -> dict_assignment .)
    BREAK           reduce using rule 136 (statement -> dict_assignment .)


state 17

    (137) statement -> class_definition .

    IDENTIFIER      reduce using rule 137 (statement -> class_definition .)
    INT_TYPE        reduce using rule 137 (statement -> class_definition .)
    FLOAT_TYPE      reduce using rule 137 (statement -> class_definition .)
    STRING_TYPE     reduce using rule 137 (statement -> class_definition .)
    BOOL_TYPE       reduce using rule 137 (statement -> class_definition .)
    CONSOLE         reduce using rule 137 (statement -> class_definition .)
    IF              reduce using rule 137 (statement -> class_definition .)
    WHILE           reduce using rule 137 (statement -> class_definition .)
    FOR             reduce using rule 137 (statement -> class_definition .)
    SWITCH          reduce using rule 137 (statement -> class_definition .)
    LIST            reduce using rule 137 (statement -> class_definition .)
    DICTIONARY      reduce using rule 137 (statement -> class_definition .)
    CLASS           reduce using rule 137 (statement -> class_definition .)
    PUBLIC          reduce using rule 137 (statement -> class_definition .)
    VOID            reduce using rule 137 (statement -> class_definition .)
    RETURN          reduce using rule 137 (statement -> class_definition .)
    USING           reduce using rule 137 (statement -> class_definition .)
    CLASS_NAME      reduce using rule 137 (statement -> class_definition .)
    $end            reduce using rule 137 (statement -> class_definition .)
    CLOSE_BRACE     reduce using rule 137 (statement -> class_definition .)
    BREAK           reduce using rule 137 (statement -> class_definition .)


state 18

    (138) statement -> basic_function .

    IDENTIFIER      reduce using rule 138 (statement -> basic_function .)
    INT_TYPE        reduce using rule 138 (statement -> basic_function .)
    FLOAT_TYPE      reduce using rule 138 (statement -> basic_function .)
    STRING_TYPE     reduce using rule 138 (statement -> basic_function .)
    BOOL_TYPE       reduce using rule 138 (statement -> basic_function .)
    CONSOLE         reduce using rule 138 (statement -> basic_function .)
    IF              reduce using rule 138 (statement -> basic_function .)
    WHILE           reduce using rule 138 (statement -> basic_function .)
    FOR             reduce using rule 138 (statement -> basic_function .)
    SWITCH          reduce using rule 138 (statement -> basic_function .)
    LIST            reduce using rule 138 (statement -> basic_function .)
    DICTIONARY      reduce using rule 138 (statement -> basic_function .)
    CLASS           reduce using rule 138 (statement -> basic_function .)
    PUBLIC          reduce using rule 138 (statement -> basic_function .)
    VOID            reduce using rule 138 (statement -> basic_function .)
    RETURN          reduce using rule 138 (statement -> basic_function .)
    USING           reduce using rule 138 (statement -> basic_function .)
    CLASS_NAME      reduce using rule 138 (statement -> basic_function .)
    $end            reduce using rule 138 (statement -> basic_function .)
    CLOSE_BRACE     reduce using rule 138 (statement -> basic_function .)
    BREAK           reduce using rule 138 (statement -> basic_function .)


state 19

    (139) statement -> param_function .

    IDENTIFIER      reduce using rule 139 (statement -> param_function .)
    INT_TYPE        reduce using rule 139 (statement -> param_function .)
    FLOAT_TYPE      reduce using rule 139 (statement -> param_function .)
    STRING_TYPE     reduce using rule 139 (statement -> param_function .)
    BOOL_TYPE       reduce using rule 139 (statement -> param_function .)
    CONSOLE         reduce using rule 139 (statement -> param_function .)
    IF              reduce using rule 139 (statement -> param_function .)
    WHILE           reduce using rule 139 (statement -> param_function .)
    FOR             reduce using rule 139 (statement -> param_function .)
    SWITCH          reduce using rule 139 (statement -> param_function .)
    LIST            reduce using rule 139 (statement -> param_function .)
    DICTIONARY      reduce using rule 139 (statement -> param_function .)
    CLASS           reduce using rule 139 (statement -> param_function .)
    PUBLIC          reduce using rule 139 (statement -> param_function .)
    VOID            reduce using rule 139 (statement -> param_function .)
    RETURN          reduce using rule 139 (statement -> param_function .)
    USING           reduce using rule 139 (statement -> param_function .)
    CLASS_NAME      reduce using rule 139 (statement -> param_function .)
    $end            reduce using rule 139 (statement -> param_function .)
    CLOSE_BRACE     reduce using rule 139 (statement -> param_function .)
    BREAK           reduce using rule 139 (statement -> param_function .)


state 20

    (140) statement -> return_function .

    IDENTIFIER      reduce using rule 140 (statement -> return_function .)
    INT_TYPE        reduce using rule 140 (statement -> return_function .)
    FLOAT_TYPE      reduce using rule 140 (statement -> return_function .)
    STRING_TYPE     reduce using rule 140 (statement -> return_function .)
    BOOL_TYPE       reduce using rule 140 (statement -> return_function .)
    CONSOLE         reduce using rule 140 (statement -> return_function .)
    IF              reduce using rule 140 (statement -> return_function .)
    WHILE           reduce using rule 140 (statement -> return_function .)
    FOR             reduce using rule 140 (statement -> return_function .)
    SWITCH          reduce using rule 140 (statement -> return_function .)
    LIST            reduce using rule 140 (statement -> return_function .)
    DICTIONARY      reduce using rule 140 (statement -> return_function .)
    CLASS           reduce using rule 140 (statement -> return_function .)
    PUBLIC          reduce using rule 140 (statement -> return_function .)
    VOID            reduce using rule 140 (statement -> return_function .)
    RETURN          reduce using rule 140 (statement -> return_function .)
    USING           reduce using rule 140 (statement -> return_function .)
    CLASS_NAME      reduce using rule 140 (statement -> return_function .)
    $end            reduce using rule 140 (statement -> return_function .)
    CLOSE_BRACE     reduce using rule 140 (statement -> return_function .)
    BREAK           reduce using rule 140 (statement -> return_function .)


state 21

    (141) statement -> return_statement .

    IDENTIFIER      reduce using rule 141 (statement -> return_statement .)
    INT_TYPE        reduce using rule 141 (statement -> return_statement .)
    FLOAT_TYPE      reduce using rule 141 (statement -> return_statement .)
    STRING_TYPE     reduce using rule 141 (statement -> return_statement .)
    BOOL_TYPE       reduce using rule 141 (statement -> return_statement .)
    CONSOLE         reduce using rule 141 (statement -> return_statement .)
    IF              reduce using rule 141 (statement -> return_statement .)
    WHILE           reduce using rule 141 (statement -> return_statement .)
    FOR             reduce using rule 141 (statement -> return_statement .)
    SWITCH          reduce using rule 141 (statement -> return_statement .)
    LIST            reduce using rule 141 (statement -> return_statement .)
    DICTIONARY      reduce using rule 141 (statement -> return_statement .)
    CLASS           reduce using rule 141 (statement -> return_statement .)
    PUBLIC          reduce using rule 141 (statement -> return_statement .)
    VOID            reduce using rule 141 (statement -> return_statement .)
    RETURN          reduce using rule 141 (statement -> return_statement .)
    USING           reduce using rule 141 (statement -> return_statement .)
    CLASS_NAME      reduce using rule 141 (statement -> return_statement .)
    $end            reduce using rule 141 (statement -> return_statement .)
    CLOSE_BRACE     reduce using rule 141 (statement -> return_statement .)
    BREAK           reduce using rule 141 (statement -> return_statement .)


state 22

    (142) statement -> using_statement .

    IDENTIFIER      reduce using rule 142 (statement -> using_statement .)
    INT_TYPE        reduce using rule 142 (statement -> using_statement .)
    FLOAT_TYPE      reduce using rule 142 (statement -> using_statement .)
    STRING_TYPE     reduce using rule 142 (statement -> using_statement .)
    BOOL_TYPE       reduce using rule 142 (statement -> using_statement .)
    CONSOLE         reduce using rule 142 (statement -> using_statement .)
    IF              reduce using rule 142 (statement -> using_statement .)
    WHILE           reduce using rule 142 (statement -> using_statement .)
    FOR             reduce using rule 142 (statement -> using_statement .)
    SWITCH          reduce using rule 142 (statement -> using_statement .)
    LIST            reduce using rule 142 (statement -> using_statement .)
    DICTIONARY      reduce using rule 142 (statement -> using_statement .)
    CLASS           reduce using rule 142 (statement -> using_statement .)
    PUBLIC          reduce using rule 142 (statement -> using_statement .)
    VOID            reduce using rule 142 (statement -> using_statement .)
    RETURN          reduce using rule 142 (statement -> using_statement .)
    USING           reduce using rule 142 (statement -> using_statement .)
    CLASS_NAME      reduce using rule 142 (statement -> using_statement .)
    $end            reduce using rule 142 (statement -> using_statement .)
    CLOSE_BRACE     reduce using rule 142 (statement -> using_statement .)
    BREAK           reduce using rule 142 (statement -> using_statement .)


state 23

    (143) statement -> function_call_statement .

    IDENTIFIER      reduce using rule 143 (statement -> function_call_statement .)
    INT_TYPE        reduce using rule 143 (statement -> function_call_statement .)
    FLOAT_TYPE      reduce using rule 143 (statement -> function_call_statement .)
    STRING_TYPE     reduce using rule 143 (statement -> function_call_statement .)
    BOOL_TYPE       reduce using rule 143 (statement -> function_call_statement .)
    CONSOLE         reduce using rule 143 (statement -> function_call_statement .)
    IF              reduce using rule 143 (statement -> function_call_statement .)
    WHILE           reduce using rule 143 (statement -> function_call_statement .)
    FOR             reduce using rule 143 (statement -> function_call_statement .)
    SWITCH          reduce using rule 143 (statement -> function_call_statement .)
    LIST            reduce using rule 143 (statement -> function_call_statement .)
    DICTIONARY      reduce using rule 143 (statement -> function_call_statement .)
    CLASS           reduce using rule 143 (statement -> function_call_statement .)
    PUBLIC          reduce using rule 143 (statement -> function_call_statement .)
    VOID            reduce using rule 143 (statement -> function_call_statement .)
    RETURN          reduce using rule 143 (statement -> function_call_statement .)
    USING           reduce using rule 143 (statement -> function_call_statement .)
    CLASS_NAME      reduce using rule 143 (statement -> function_call_statement .)
    $end            reduce using rule 143 (statement -> function_call_statement .)
    CLOSE_BRACE     reduce using rule 143 (statement -> function_call_statement .)
    BREAK           reduce using rule 143 (statement -> function_call_statement .)


state 24

    (30) assignment -> IDENTIFIER . ASSIGN expression SEMICOLON
    (31) assignment -> IDENTIFIER . ASSIGN convert_statement SEMICOLON
    (55) array_assignment -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (62) list_add -> IDENTIFIER . DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (19) function_call -> IDENTIFIER . OPEN_PAREN CLOSE_PAREN
    (20) function_call -> IDENTIFIER . OPEN_PAREN argument_list CLOSE_PAREN

    ASSIGN          shift and go to state 44
    OPEN_BRACKET    shift and go to state 45
    DOT             shift and go to state 46
    OPEN_PAREN      shift and go to state 47


state 25

    (32) assignment -> INT_TYPE . IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> INT_TYPE . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> INT_TYPE . multiple_var_declaration SEMICOLON
    (52) array_declaration -> INT_TYPE . OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> INT_TYPE . OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (73) param_function -> INT_TYPE . IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> INT_TYPE . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (39) multiple_var_declaration -> . IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression
    (40) multiple_var_declaration -> . multiple_var_declaration COMMA IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 48
    OPEN_BRACKET    shift and go to state 50

    multiple_var_declaration       shift and go to state 49

state 26

    (35) assignment -> FLOAT_TYPE . IDENTIFIER ASSIGN expression SEMICOLON
    (90) return_function -> FLOAT_TYPE . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    IDENTIFIER      shift and go to state 51


state 27

    (36) assignment -> STRING_TYPE . IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> STRING_TYPE . IDENTIFIER ASSIGN input_statement SEMICOLON
    (53) array_declaration -> STRING_TYPE . OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (89) return_function -> STRING_TYPE . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    IDENTIFIER      shift and go to state 52
    OPEN_BRACKET    shift and go to state 53


state 28

    (38) assignment -> BOOL_TYPE . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 54


state 29

    (26) print_statement -> CONSOLE . DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> CONSOLE . DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON

    DOT             shift and go to state 55


state 30

    (56) if_statement -> IF . OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> IF . OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> IF . OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 56


state 31

    (63) while_statement -> WHILE . OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 57


state 32

    (64) for_statement -> FOR . OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 58


state 33

    (83) switch_statement -> SWITCH . OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 59


state 34

    (60) list_declaration -> LIST . LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> LIST . LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    LESS_THAN       shift and go to state 60


state 35

    (79) dictionary_declaration -> DICTIONARY . LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> DICTIONARY . LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    LESS_THAN       shift and go to state 61


state 36

    (110) class_definition -> CLASS . CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> CLASS . IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE

    CLASS_NAME      shift and go to state 62
    IDENTIFIER      shift and go to state 63


state 37

    (21) function_call -> CLASS_NAME . OPEN_PAREN CLOSE_PAREN
    (22) function_call -> CLASS_NAME . OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN      shift and go to state 64


state 38

    (112) class_definition -> PUBLIC . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE

    CLASS           shift and go to state 65


state 39

    (59) basic_function -> VOID . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> VOID . IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    IDENTIFIER      shift and go to state 66


state 40

    (91) return_statement -> RETURN . SEMICOLON

    SEMICOLON       shift and go to state 67


state 41

    (17) using_statement -> USING . IDENTIFIER SEMICOLON
    (18) using_statement -> USING . CLASS_NAME SEMICOLON

    IDENTIFIER      shift and go to state 68
    CLASS_NAME      shift and go to state 69


state 42

    (23) function_call_statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 70


state 43

    (124) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 124 (statement_list -> statement_list statement .)
    INT_TYPE        reduce using rule 124 (statement_list -> statement_list statement .)
    FLOAT_TYPE      reduce using rule 124 (statement_list -> statement_list statement .)
    STRING_TYPE     reduce using rule 124 (statement_list -> statement_list statement .)
    BOOL_TYPE       reduce using rule 124 (statement_list -> statement_list statement .)
    CONSOLE         reduce using rule 124 (statement_list -> statement_list statement .)
    IF              reduce using rule 124 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 124 (statement_list -> statement_list statement .)
    FOR             reduce using rule 124 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 124 (statement_list -> statement_list statement .)
    LIST            reduce using rule 124 (statement_list -> statement_list statement .)
    DICTIONARY      reduce using rule 124 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 124 (statement_list -> statement_list statement .)
    PUBLIC          reduce using rule 124 (statement_list -> statement_list statement .)
    VOID            reduce using rule 124 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 124 (statement_list -> statement_list statement .)
    USING           reduce using rule 124 (statement_list -> statement_list statement .)
    CLASS_NAME      reduce using rule 124 (statement_list -> statement_list statement .)
    $end            reduce using rule 124 (statement_list -> statement_list statement .)
    CLOSE_BRACE     reduce using rule 124 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 124 (statement_list -> statement_list statement .)


state 44

    (30) assignment -> IDENTIFIER ASSIGN . expression SEMICOLON
    (31) assignment -> IDENTIFIER ASSIGN . convert_statement SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (29) convert_statement -> . CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CONVERT         shift and go to state 77
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 72
    convert_statement              shift and go to state 73
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 45

    (55) array_assignment -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (82) dict_assignment -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 83
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 46

    (62) list_add -> IDENTIFIER DOT . ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON

    ADD             shift and go to state 84


state 47

    (19) function_call -> IDENTIFIER OPEN_PAREN . CLOSE_PAREN
    (20) function_call -> IDENTIFIER OPEN_PAREN . argument_list CLOSE_PAREN
    (24) argument_list -> . expression
    (25) argument_list -> . argument_list COMMA expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 85
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    argument_list                  shift and go to state 86
    expression                     shift and go to state 87
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 48

    (32) assignment -> INT_TYPE IDENTIFIER . ASSIGN expression SEMICOLON
    (33) assignment -> INT_TYPE IDENTIFIER . ASSIGN convert_statement SEMICOLON
    (73) param_function -> INT_TYPE IDENTIFIER . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> INT_TYPE IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (39) multiple_var_declaration -> IDENTIFIER . ASSIGN expression COMMA IDENTIFIER ASSIGN expression

    ASSIGN          shift and go to state 88
    OPEN_PAREN      shift and go to state 89


state 49

    (34) assignment -> INT_TYPE multiple_var_declaration . SEMICOLON
    (40) multiple_var_declaration -> multiple_var_declaration . COMMA IDENTIFIER ASSIGN expression

    SEMICOLON       shift and go to state 90
    COMMA           shift and go to state 91


state 50

    (52) array_declaration -> INT_TYPE OPEN_BRACKET . CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> INT_TYPE OPEN_BRACKET . CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON

    CLOSE_BRACKET   shift and go to state 92


state 51

    (35) assignment -> FLOAT_TYPE IDENTIFIER . ASSIGN expression SEMICOLON
    (90) return_function -> FLOAT_TYPE IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    ASSIGN          shift and go to state 93
    OPEN_PAREN      shift and go to state 94


state 52

    (36) assignment -> STRING_TYPE IDENTIFIER . ASSIGN expression SEMICOLON
    (37) assignment -> STRING_TYPE IDENTIFIER . ASSIGN input_statement SEMICOLON
    (89) return_function -> STRING_TYPE IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    ASSIGN          shift and go to state 95
    OPEN_PAREN      shift and go to state 96


state 53

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET . CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 97


state 54

    (38) assignment -> BOOL_TYPE IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 98


state 55

    (26) print_statement -> CONSOLE DOT . WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> CONSOLE DOT . WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON

    WRITELINE       shift and go to state 99
    WRITE           shift and go to state 100


state 56

    (56) if_statement -> IF OPEN_PAREN . logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> IF OPEN_PAREN . logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> IF OPEN_PAREN . logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (49) logical_condition -> . condition
    (50) logical_condition -> . condition DOUBLE_AMPERSAND condition
    (51) logical_condition -> . condition DOUBLE_PIPE condition
    (41) condition -> . expression EQUAL expression
    (42) condition -> . expression NOT_EQUAL expression
    (43) condition -> . expression LESS_THAN expression
    (44) condition -> . expression GREATER_THAN expression
    (45) condition -> . expression LESS_THAN_EQUAL expression
    (46) condition -> . expression GREATER_THAN_EQUAL expression
    (47) condition -> . expression EQUAL STRING
    (48) condition -> . STRING EQUAL expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    STRING          shift and go to state 104
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    OPEN_PAREN      shift and go to state 78

    logical_condition              shift and go to state 101
    condition                      shift and go to state 102
    expression                     shift and go to state 103
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 57

    (63) while_statement -> WHILE OPEN_PAREN . logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (49) logical_condition -> . condition
    (50) logical_condition -> . condition DOUBLE_AMPERSAND condition
    (51) logical_condition -> . condition DOUBLE_PIPE condition
    (41) condition -> . expression EQUAL expression
    (42) condition -> . expression NOT_EQUAL expression
    (43) condition -> . expression LESS_THAN expression
    (44) condition -> . expression GREATER_THAN expression
    (45) condition -> . expression LESS_THAN_EQUAL expression
    (46) condition -> . expression GREATER_THAN_EQUAL expression
    (47) condition -> . expression EQUAL STRING
    (48) condition -> . STRING EQUAL expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    STRING          shift and go to state 104
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    OPEN_PAREN      shift and go to state 78

    logical_condition              shift and go to state 105
    condition                      shift and go to state 102
    expression                     shift and go to state 103
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 58

    (64) for_statement -> FOR OPEN_PAREN . for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (65) for_init -> . INT_TYPE IDENTIFIER ASSIGN expression
    (66) for_init -> . assignment_no_semicolon
    (67) assignment_no_semicolon -> . IDENTIFIER ASSIGN expression

    INT_TYPE        shift and go to state 107
    IDENTIFIER      shift and go to state 108

    for_init                       shift and go to state 106
    assignment_no_semicolon        shift and go to state 109

state 59

    (83) switch_statement -> SWITCH OPEN_PAREN . expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 110
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 60

    (60) list_declaration -> LIST LESS_THAN . INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> LIST LESS_THAN . STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    INT_TYPE        shift and go to state 111
    STRING_TYPE     shift and go to state 112


state 61

    (79) dictionary_declaration -> DICTIONARY LESS_THAN . STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> DICTIONARY LESS_THAN . INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    STRING_TYPE     shift and go to state 113
    INT_TYPE        shift and go to state 114


state 62

    (110) class_definition -> CLASS CLASS_NAME . OPEN_BRACE class_body CLOSE_BRACE

    OPEN_BRACE      shift and go to state 115


state 63

    (111) class_definition -> CLASS IDENTIFIER . OPEN_BRACE class_body CLOSE_BRACE

    OPEN_BRACE      shift and go to state 116


state 64

    (21) function_call -> CLASS_NAME OPEN_PAREN . CLOSE_PAREN
    (22) function_call -> CLASS_NAME OPEN_PAREN . argument_list CLOSE_PAREN
    (24) argument_list -> . expression
    (25) argument_list -> . argument_list COMMA expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 117
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    argument_list                  shift and go to state 118
    expression                     shift and go to state 87
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 65

    (112) class_definition -> PUBLIC CLASS . CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE

    CLASS_NAME      shift and go to state 119


state 66

    (59) basic_function -> VOID IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> VOID IDENTIFIER . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 120


state 67

    (91) return_statement -> RETURN SEMICOLON .

    IDENTIFIER      reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    INT_TYPE        reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    STRING_TYPE     reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    BOOL_TYPE       reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    CONSOLE         reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    LIST            reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    DICTIONARY      reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    PUBLIC          reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    USING           reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    CLASS_NAME      reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    $end            reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    CLOSE_BRACE     reduce using rule 91 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 91 (return_statement -> RETURN SEMICOLON .)


state 68

    (17) using_statement -> USING IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 121


state 69

    (18) using_statement -> USING CLASS_NAME . SEMICOLON

    SEMICOLON       shift and go to state 122


state 70

    (23) function_call_statement -> function_call SEMICOLON .

    IDENTIFIER      reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    INT_TYPE        reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    FLOAT_TYPE      reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    STRING_TYPE     reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    BOOL_TYPE       reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    CONSOLE         reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    IF              reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    FOR             reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    SWITCH          reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    LIST            reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    DICTIONARY      reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    CLASS           reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    PUBLIC          reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    VOID            reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    USING           reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    CLASS_NAME      reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    $end            reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    CLOSE_BRACE     reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)
    BREAK           reduce using rule 23 (function_call_statement -> function_call SEMICOLON .)


state 71

    (7) expression -> IDENTIFIER .
    (19) function_call -> IDENTIFIER . OPEN_PAREN CLOSE_PAREN
    (20) function_call -> IDENTIFIER . OPEN_PAREN argument_list CLOSE_PAREN
    (15) factor -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for OPEN_BRACKET resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 7 (expression -> IDENTIFIER .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 7 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 7 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 7 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 7 (expression -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 7 (expression -> IDENTIFIER .)
    DOT             reduce using rule 7 (expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 7 (expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 7 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 7 (expression -> IDENTIFIER .)
    EQUAL           reduce using rule 7 (expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 7 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 7 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 7 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 7 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 7 (expression -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 7 (expression -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 7 (expression -> IDENTIFIER .)
    COLON           reduce using rule 7 (expression -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 7 (expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 47
    MULTIPLY        reduce using rule 15 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 15 (factor -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! OPEN_BRACKET    [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! CLOSE_BRACKET   [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! CLOSE_PAREN     [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! NOT_EQUAL       [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! LESS_THAN       [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! DOUBLE_PIPE     [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 15 (factor -> IDENTIFIER .) ]
  ! CLOSE_BRACE     [ reduce using rule 15 (factor -> IDENTIFIER .) ]


state 72

    (30) assignment -> IDENTIFIER ASSIGN expression . SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 123
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 73

    (31) assignment -> IDENTIFIER ASSIGN convert_statement . SEMICOLON

    SEMICOLON       shift and go to state 128


state 74

    (6) expression -> term .
    (9) term -> term . MULTIPLY factor
    (10) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 6 (expression -> term .)
    PLUS            reduce using rule 6 (expression -> term .)
    MINUS           reduce using rule 6 (expression -> term .)
    OPEN_BRACKET    reduce using rule 6 (expression -> term .)
    DOT             reduce using rule 6 (expression -> term .)
    CLOSE_BRACKET   reduce using rule 6 (expression -> term .)
    CLOSE_PAREN     reduce using rule 6 (expression -> term .)
    COMMA           reduce using rule 6 (expression -> term .)
    EQUAL           reduce using rule 6 (expression -> term .)
    NOT_EQUAL       reduce using rule 6 (expression -> term .)
    LESS_THAN       reduce using rule 6 (expression -> term .)
    GREATER_THAN    reduce using rule 6 (expression -> term .)
    LESS_THAN_EQUAL reduce using rule 6 (expression -> term .)
    GREATER_THAN_EQUAL reduce using rule 6 (expression -> term .)
    DOUBLE_AMPERSAND reduce using rule 6 (expression -> term .)
    DOUBLE_PIPE     reduce using rule 6 (expression -> term .)
    COLON           reduce using rule 6 (expression -> term .)
    CLOSE_BRACE     reduce using rule 6 (expression -> term .)
    MULTIPLY        shift and go to state 129
    DIVIDE          shift and go to state 130


state 75

    (8) expression -> function_call .

    SEMICOLON       reduce using rule 8 (expression -> function_call .)
    PLUS            reduce using rule 8 (expression -> function_call .)
    MINUS           reduce using rule 8 (expression -> function_call .)
    OPEN_BRACKET    reduce using rule 8 (expression -> function_call .)
    DOT             reduce using rule 8 (expression -> function_call .)
    CLOSE_BRACKET   reduce using rule 8 (expression -> function_call .)
    CLOSE_PAREN     reduce using rule 8 (expression -> function_call .)
    COMMA           reduce using rule 8 (expression -> function_call .)
    EQUAL           reduce using rule 8 (expression -> function_call .)
    NOT_EQUAL       reduce using rule 8 (expression -> function_call .)
    LESS_THAN       reduce using rule 8 (expression -> function_call .)
    GREATER_THAN    reduce using rule 8 (expression -> function_call .)
    LESS_THAN_EQUAL reduce using rule 8 (expression -> function_call .)
    GREATER_THAN_EQUAL reduce using rule 8 (expression -> function_call .)
    DOUBLE_AMPERSAND reduce using rule 8 (expression -> function_call .)
    DOUBLE_PIPE     reduce using rule 8 (expression -> function_call .)
    COLON           reduce using rule 8 (expression -> function_call .)
    CLOSE_BRACE     reduce using rule 8 (expression -> function_call .)


state 76

    (97) expression -> NEW . INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE

    INT_TYPE        shift and go to state 131


state 77

    (29) convert_statement -> CONVERT . DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN

    DOT             shift and go to state 132


state 78

    (16) factor -> OPEN_PAREN . expression CLOSE_PAREN
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 133
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 79

    (11) term -> factor .

    MULTIPLY        reduce using rule 11 (term -> factor .)
    DIVIDE          reduce using rule 11 (term -> factor .)
    SEMICOLON       reduce using rule 11 (term -> factor .)
    PLUS            reduce using rule 11 (term -> factor .)
    MINUS           reduce using rule 11 (term -> factor .)
    OPEN_BRACKET    reduce using rule 11 (term -> factor .)
    DOT             reduce using rule 11 (term -> factor .)
    CLOSE_BRACKET   reduce using rule 11 (term -> factor .)
    CLOSE_PAREN     reduce using rule 11 (term -> factor .)
    COMMA           reduce using rule 11 (term -> factor .)
    EQUAL           reduce using rule 11 (term -> factor .)
    NOT_EQUAL       reduce using rule 11 (term -> factor .)
    LESS_THAN       reduce using rule 11 (term -> factor .)
    GREATER_THAN    reduce using rule 11 (term -> factor .)
    LESS_THAN_EQUAL reduce using rule 11 (term -> factor .)
    GREATER_THAN_EQUAL reduce using rule 11 (term -> factor .)
    DOUBLE_AMPERSAND reduce using rule 11 (term -> factor .)
    DOUBLE_PIPE     reduce using rule 11 (term -> factor .)
    COLON           reduce using rule 11 (term -> factor .)
    CLOSE_BRACE     reduce using rule 11 (term -> factor .)


state 80

    (12) factor -> INTEGER .

    MULTIPLY        reduce using rule 12 (factor -> INTEGER .)
    DIVIDE          reduce using rule 12 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 12 (factor -> INTEGER .)
    PLUS            reduce using rule 12 (factor -> INTEGER .)
    MINUS           reduce using rule 12 (factor -> INTEGER .)
    OPEN_BRACKET    reduce using rule 12 (factor -> INTEGER .)
    DOT             reduce using rule 12 (factor -> INTEGER .)
    CLOSE_BRACKET   reduce using rule 12 (factor -> INTEGER .)
    CLOSE_PAREN     reduce using rule 12 (factor -> INTEGER .)
    COMMA           reduce using rule 12 (factor -> INTEGER .)
    EQUAL           reduce using rule 12 (factor -> INTEGER .)
    NOT_EQUAL       reduce using rule 12 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 12 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 12 (factor -> INTEGER .)
    LESS_THAN_EQUAL reduce using rule 12 (factor -> INTEGER .)
    GREATER_THAN_EQUAL reduce using rule 12 (factor -> INTEGER .)
    DOUBLE_AMPERSAND reduce using rule 12 (factor -> INTEGER .)
    DOUBLE_PIPE     reduce using rule 12 (factor -> INTEGER .)
    COLON           reduce using rule 12 (factor -> INTEGER .)
    CLOSE_BRACE     reduce using rule 12 (factor -> INTEGER .)


state 81

    (13) factor -> FLOAT .

    MULTIPLY        reduce using rule 13 (factor -> FLOAT .)
    DIVIDE          reduce using rule 13 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 13 (factor -> FLOAT .)
    PLUS            reduce using rule 13 (factor -> FLOAT .)
    MINUS           reduce using rule 13 (factor -> FLOAT .)
    OPEN_BRACKET    reduce using rule 13 (factor -> FLOAT .)
    DOT             reduce using rule 13 (factor -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 13 (factor -> FLOAT .)
    CLOSE_PAREN     reduce using rule 13 (factor -> FLOAT .)
    COMMA           reduce using rule 13 (factor -> FLOAT .)
    EQUAL           reduce using rule 13 (factor -> FLOAT .)
    NOT_EQUAL       reduce using rule 13 (factor -> FLOAT .)
    LESS_THAN       reduce using rule 13 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 13 (factor -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 13 (factor -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 13 (factor -> FLOAT .)
    DOUBLE_AMPERSAND reduce using rule 13 (factor -> FLOAT .)
    DOUBLE_PIPE     reduce using rule 13 (factor -> FLOAT .)
    COLON           reduce using rule 13 (factor -> FLOAT .)
    CLOSE_BRACE     reduce using rule 13 (factor -> FLOAT .)


state 82

    (14) factor -> STRING .

    MULTIPLY        reduce using rule 14 (factor -> STRING .)
    DIVIDE          reduce using rule 14 (factor -> STRING .)
    SEMICOLON       reduce using rule 14 (factor -> STRING .)
    PLUS            reduce using rule 14 (factor -> STRING .)
    MINUS           reduce using rule 14 (factor -> STRING .)
    OPEN_BRACKET    reduce using rule 14 (factor -> STRING .)
    DOT             reduce using rule 14 (factor -> STRING .)
    CLOSE_BRACKET   reduce using rule 14 (factor -> STRING .)
    CLOSE_PAREN     reduce using rule 14 (factor -> STRING .)
    COMMA           reduce using rule 14 (factor -> STRING .)
    EQUAL           reduce using rule 14 (factor -> STRING .)
    NOT_EQUAL       reduce using rule 14 (factor -> STRING .)
    LESS_THAN       reduce using rule 14 (factor -> STRING .)
    GREATER_THAN    reduce using rule 14 (factor -> STRING .)
    LESS_THAN_EQUAL reduce using rule 14 (factor -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 14 (factor -> STRING .)
    DOUBLE_AMPERSAND reduce using rule 14 (factor -> STRING .)
    DOUBLE_PIPE     reduce using rule 14 (factor -> STRING .)
    COLON           reduce using rule 14 (factor -> STRING .)
    CLOSE_BRACE     reduce using rule 14 (factor -> STRING .)


state 83

    (55) array_assignment -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET ASSIGN expression SEMICOLON
    (82) dict_assignment -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET ASSIGN expression SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_BRACKET   shift and go to state 134
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 84

    (62) list_add -> IDENTIFIER DOT ADD . OPEN_PAREN expression CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 135


state 85

    (19) function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .

    SEMICOLON       reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    OPEN_BRACKET    reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    DOT             reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    EQUAL           reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN       reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    COLON           reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 19 (function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN .)


state 86

    (20) function_call -> IDENTIFIER OPEN_PAREN argument_list . CLOSE_PAREN
    (25) argument_list -> argument_list . COMMA expression

    CLOSE_PAREN     shift and go to state 136
    COMMA           shift and go to state 137


state 87

    (24) argument_list -> expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_PAREN     reduce using rule 24 (argument_list -> expression .)
    COMMA           reduce using rule 24 (argument_list -> expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 88

    (32) assignment -> INT_TYPE IDENTIFIER ASSIGN . expression SEMICOLON
    (33) assignment -> INT_TYPE IDENTIFIER ASSIGN . convert_statement SEMICOLON
    (39) multiple_var_declaration -> IDENTIFIER ASSIGN . expression COMMA IDENTIFIER ASSIGN expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (29) convert_statement -> . CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CONVERT         shift and go to state 77
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 138
    convert_statement              shift and go to state 139
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 89

    (73) param_function -> INT_TYPE IDENTIFIER OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> INT_TYPE IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (74) parameter_list -> . parameter
    (75) parameter_list -> . parameter_list COMMA parameter
    (76) parameter -> . INT_TYPE IDENTIFIER
    (77) parameter -> . STRING_TYPE IDENTIFIER
    (78) parameter -> . FLOAT_TYPE IDENTIFIER

    CLOSE_PAREN     shift and go to state 142
    INT_TYPE        shift and go to state 140
    STRING_TYPE     shift and go to state 144
    FLOAT_TYPE      shift and go to state 145

    parameter_list                 shift and go to state 141
    parameter                      shift and go to state 143

state 90

    (34) assignment -> INT_TYPE multiple_var_declaration SEMICOLON .

    IDENTIFIER      reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    INT_TYPE        reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    FLOAT_TYPE      reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    STRING_TYPE     reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    BOOL_TYPE       reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    CONSOLE         reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    IF              reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    WHILE           reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    FOR             reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    SWITCH          reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    LIST            reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    DICTIONARY      reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    CLASS           reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    PUBLIC          reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    VOID            reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    RETURN          reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    USING           reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    CLASS_NAME      reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    $end            reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    CLOSE_BRACE     reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)
    BREAK           reduce using rule 34 (assignment -> INT_TYPE multiple_var_declaration SEMICOLON .)


state 91

    (40) multiple_var_declaration -> multiple_var_declaration COMMA . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 146


state 92

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET . IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 147


state 93

    (35) assignment -> FLOAT_TYPE IDENTIFIER ASSIGN . expression SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 148
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 94

    (90) return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 149


state 95

    (36) assignment -> STRING_TYPE IDENTIFIER ASSIGN . expression SEMICOLON
    (37) assignment -> STRING_TYPE IDENTIFIER ASSIGN . input_statement SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (28) input_statement -> . CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CONSOLE         shift and go to state 152
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 150
    input_statement                shift and go to state 151
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 96

    (89) return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 153


state 97

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET . IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON

    IDENTIFIER      shift and go to state 154


state 98

    (38) assignment -> BOOL_TYPE IDENTIFIER ASSIGN . expression SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 155
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 99

    (26) print_statement -> CONSOLE DOT WRITELINE . OPEN_PAREN expression CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 156


state 100

    (27) print_statement -> CONSOLE DOT WRITE . OPEN_PAREN expression CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 157


state 101

    (56) if_statement -> IF OPEN_PAREN logical_condition . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> IF OPEN_PAREN logical_condition . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> IF OPEN_PAREN logical_condition . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 158


state 102

    (49) logical_condition -> condition .
    (50) logical_condition -> condition . DOUBLE_AMPERSAND condition
    (51) logical_condition -> condition . DOUBLE_PIPE condition

    CLOSE_PAREN     reduce using rule 49 (logical_condition -> condition .)
    SEMICOLON       reduce using rule 49 (logical_condition -> condition .)
    DOUBLE_AMPERSAND shift and go to state 159
    DOUBLE_PIPE     shift and go to state 160


state 103

    (41) condition -> expression . EQUAL expression
    (42) condition -> expression . NOT_EQUAL expression
    (43) condition -> expression . LESS_THAN expression
    (44) condition -> expression . GREATER_THAN expression
    (45) condition -> expression . LESS_THAN_EQUAL expression
    (46) condition -> expression . GREATER_THAN_EQUAL expression
    (47) condition -> expression . EQUAL STRING
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    LESS_THAN       shift and go to state 163
    GREATER_THAN    shift and go to state 164
    LESS_THAN_EQUAL shift and go to state 165
    GREATER_THAN_EQUAL shift and go to state 166
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 104

    (48) condition -> STRING . EQUAL expression
    (14) factor -> STRING .

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 167
    MULTIPLY        reduce using rule 14 (factor -> STRING .)
    DIVIDE          reduce using rule 14 (factor -> STRING .)
    NOT_EQUAL       reduce using rule 14 (factor -> STRING .)
    LESS_THAN       reduce using rule 14 (factor -> STRING .)
    GREATER_THAN    reduce using rule 14 (factor -> STRING .)
    LESS_THAN_EQUAL reduce using rule 14 (factor -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 14 (factor -> STRING .)
    PLUS            reduce using rule 14 (factor -> STRING .)
    MINUS           reduce using rule 14 (factor -> STRING .)
    OPEN_BRACKET    reduce using rule 14 (factor -> STRING .)
    DOT             reduce using rule 14 (factor -> STRING .)

  ! EQUAL           [ reduce using rule 14 (factor -> STRING .) ]


state 105

    (63) while_statement -> WHILE OPEN_PAREN logical_condition . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 168


state 106

    (64) for_statement -> FOR OPEN_PAREN for_init . SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    SEMICOLON       shift and go to state 169


state 107

    (65) for_init -> INT_TYPE . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 170


state 108

    (67) assignment_no_semicolon -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 171


state 109

    (66) for_init -> assignment_no_semicolon .

    SEMICOLON       reduce using rule 66 (for_init -> assignment_no_semicolon .)


state 110

    (83) switch_statement -> SWITCH OPEN_PAREN expression . CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_PAREN     shift and go to state 172
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 111

    (60) list_declaration -> LIST LESS_THAN INT_TYPE . GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 173


state 112

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE . GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 174


state 113

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE . COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    COMMA           shift and go to state 175


state 114

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE . COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    COMMA           shift and go to state 176


state 115

    (110) class_definition -> CLASS CLASS_NAME OPEN_BRACE . class_body CLOSE_BRACE
    (113) class_body -> . class_member
    (114) class_body -> . class_body class_member
    (115) class_member -> . property_definition
    (116) class_member -> . method_definition
    (117) class_member -> . main_method
    (118) class_member -> . static_method
    (119) property_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (120) property_definition -> . PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (121) method_definition -> . PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (122) method_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (106) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (108) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (102) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (104) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    PUBLIC          shift and go to state 183
    STATIC          shift and go to state 184

    class_body                     shift and go to state 177
    class_member                   shift and go to state 178
    property_definition            shift and go to state 179
    method_definition              shift and go to state 180
    main_method                    shift and go to state 181
    static_method                  shift and go to state 182

state 116

    (111) class_definition -> CLASS IDENTIFIER OPEN_BRACE . class_body CLOSE_BRACE
    (113) class_body -> . class_member
    (114) class_body -> . class_body class_member
    (115) class_member -> . property_definition
    (116) class_member -> . method_definition
    (117) class_member -> . main_method
    (118) class_member -> . static_method
    (119) property_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (120) property_definition -> . PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (121) method_definition -> . PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (122) method_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (106) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (108) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (102) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (104) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    PUBLIC          shift and go to state 183
    STATIC          shift and go to state 184

    class_body                     shift and go to state 185
    class_member                   shift and go to state 178
    property_definition            shift and go to state 179
    method_definition              shift and go to state 180
    main_method                    shift and go to state 181
    static_method                  shift and go to state 182

state 117

    (21) function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .

    SEMICOLON       reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    OPEN_BRACKET    reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    DOT             reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    EQUAL           reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN       reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    COLON           reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 21 (function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN .)


state 118

    (22) function_call -> CLASS_NAME OPEN_PAREN argument_list . CLOSE_PAREN
    (25) argument_list -> argument_list . COMMA expression

    CLOSE_PAREN     shift and go to state 186
    COMMA           shift and go to state 137


state 119

    (112) class_definition -> PUBLIC CLASS CLASS_NAME . OPEN_BRACE class_body CLOSE_BRACE

    OPEN_BRACE      shift and go to state 187


state 120

    (59) basic_function -> VOID IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> VOID IDENTIFIER OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (74) parameter_list -> . parameter
    (75) parameter_list -> . parameter_list COMMA parameter
    (76) parameter -> . INT_TYPE IDENTIFIER
    (77) parameter -> . STRING_TYPE IDENTIFIER
    (78) parameter -> . FLOAT_TYPE IDENTIFIER

    CLOSE_PAREN     shift and go to state 188
    INT_TYPE        shift and go to state 140
    STRING_TYPE     shift and go to state 144
    FLOAT_TYPE      shift and go to state 145

    parameter_list                 shift and go to state 189
    parameter                      shift and go to state 143

state 121

    (17) using_statement -> USING IDENTIFIER SEMICOLON .

    IDENTIFIER      reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    INT_TYPE        reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    FLOAT_TYPE      reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    STRING_TYPE     reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    BOOL_TYPE       reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    CONSOLE         reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    IF              reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    LIST            reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    DICTIONARY      reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    USING           reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    CLASS_NAME      reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    $end            reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    CLOSE_BRACE     reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 17 (using_statement -> USING IDENTIFIER SEMICOLON .)


state 122

    (18) using_statement -> USING CLASS_NAME SEMICOLON .

    IDENTIFIER      reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    INT_TYPE        reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    FLOAT_TYPE      reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    STRING_TYPE     reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    BOOL_TYPE       reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    CONSOLE         reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    IF              reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    WHILE           reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    FOR             reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    SWITCH          reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    LIST            reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    DICTIONARY      reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    CLASS           reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    PUBLIC          reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    VOID            reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    RETURN          reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    USING           reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    CLASS_NAME      reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    $end            reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    CLOSE_BRACE     reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)
    BREAK           reduce using rule 18 (using_statement -> USING CLASS_NAME SEMICOLON .)


state 123

    (30) assignment -> IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    USING           reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS_NAME      reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CLOSE_BRACE     reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 30 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 124

    (4) expression -> expression PLUS . term
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    IDENTIFIER      shift and go to state 191
    OPEN_PAREN      shift and go to state 78

    term                           shift and go to state 190
    factor                         shift and go to state 79

state 125

    (5) expression -> expression MINUS . term
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    IDENTIFIER      shift and go to state 191
    OPEN_PAREN      shift and go to state 78

    term                           shift and go to state 192
    factor                         shift and go to state 79

state 126

    (92) expression -> expression OPEN_BRACKET . expression CLOSE_BRACKET
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 193
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 127

    (93) expression -> expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 194


state 128

    (31) assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .

    IDENTIFIER      reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    INT_TYPE        reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    FLOAT_TYPE      reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    STRING_TYPE     reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    BOOL_TYPE       reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    CONSOLE         reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    IF              reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    WHILE           reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    FOR             reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    SWITCH          reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    LIST            reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    DICTIONARY      reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    CLASS           reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    PUBLIC          reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    VOID            reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    RETURN          reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    USING           reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    CLASS_NAME      reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    $end            reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    CLOSE_BRACE     reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    BREAK           reduce using rule 31 (assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON .)


state 129

    (9) term -> term MULTIPLY . factor
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    IDENTIFIER      shift and go to state 191
    OPEN_PAREN      shift and go to state 78

    factor                         shift and go to state 195

state 130

    (10) term -> term DIVIDE . factor
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    IDENTIFIER      shift and go to state 191
    OPEN_PAREN      shift and go to state 78

    factor                         shift and go to state 196

state 131

    (97) expression -> NEW INT_TYPE . OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE

    OPEN_BRACKET    shift and go to state 197


state 132

    (29) convert_statement -> CONVERT DOT . TOINT32 OPEN_PAREN expression CLOSE_PAREN

    TOINT32         shift and go to state 198


state 133

    (16) factor -> OPEN_PAREN expression . CLOSE_PAREN
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_PAREN     shift and go to state 199
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 134

    (55) array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET . ASSIGN expression SEMICOLON
    (82) dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 200


state 135

    (62) list_add -> IDENTIFIER DOT ADD OPEN_PAREN . expression CLOSE_PAREN SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 201
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 136

    (20) function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .

    SEMICOLON       reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    PLUS            reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    MINUS           reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    OPEN_BRACKET    reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    DOT             reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    COMMA           reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    EQUAL           reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    LESS_THAN       reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    COLON           reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 20 (function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN .)


state 137

    (25) argument_list -> argument_list COMMA . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 202
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 138

    (32) assignment -> INT_TYPE IDENTIFIER ASSIGN expression . SEMICOLON
    (39) multiple_var_declaration -> IDENTIFIER ASSIGN expression . COMMA IDENTIFIER ASSIGN expression
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 203
    COMMA           shift and go to state 204
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 139

    (33) assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement . SEMICOLON

    SEMICOLON       shift and go to state 205


state 140

    (76) parameter -> INT_TYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 206


state 141

    (73) param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (75) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 207
    COMMA           shift and go to state 208


state 142

    (88) return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    OPEN_BRACE      shift and go to state 209


state 143

    (74) parameter_list -> parameter .

    CLOSE_PAREN     reduce using rule 74 (parameter_list -> parameter .)
    COMMA           reduce using rule 74 (parameter_list -> parameter .)


state 144

    (77) parameter -> STRING_TYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 210


state 145

    (78) parameter -> FLOAT_TYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 211


state 146

    (40) multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 212


state 147

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER . ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 213


state 148

    (35) assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression . SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 214
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 149

    (90) return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    OPEN_BRACE      shift and go to state 215


state 150

    (36) assignment -> STRING_TYPE IDENTIFIER ASSIGN expression . SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 216
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 151

    (37) assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement . SEMICOLON

    SEMICOLON       shift and go to state 217


state 152

    (28) input_statement -> CONSOLE . DOT READLINE OPEN_PAREN CLOSE_PAREN

    DOT             shift and go to state 218


state 153

    (89) return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE

    OPEN_BRACE      shift and go to state 219


state 154

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER . ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON

    ASSIGN          shift and go to state 220


state 155

    (38) assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression . SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 221
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 156

    (26) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN . expression CLOSE_PAREN SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 222
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 157

    (27) print_statement -> CONSOLE DOT WRITE OPEN_PAREN . expression CLOSE_PAREN SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 223
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 158

    (56) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 224


state 159

    (50) logical_condition -> condition DOUBLE_AMPERSAND . condition
    (41) condition -> . expression EQUAL expression
    (42) condition -> . expression NOT_EQUAL expression
    (43) condition -> . expression LESS_THAN expression
    (44) condition -> . expression GREATER_THAN expression
    (45) condition -> . expression LESS_THAN_EQUAL expression
    (46) condition -> . expression GREATER_THAN_EQUAL expression
    (47) condition -> . expression EQUAL STRING
    (48) condition -> . STRING EQUAL expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    STRING          shift and go to state 104
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    OPEN_PAREN      shift and go to state 78

    condition                      shift and go to state 225
    expression                     shift and go to state 103
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 160

    (51) logical_condition -> condition DOUBLE_PIPE . condition
    (41) condition -> . expression EQUAL expression
    (42) condition -> . expression NOT_EQUAL expression
    (43) condition -> . expression LESS_THAN expression
    (44) condition -> . expression GREATER_THAN expression
    (45) condition -> . expression LESS_THAN_EQUAL expression
    (46) condition -> . expression GREATER_THAN_EQUAL expression
    (47) condition -> . expression EQUAL STRING
    (48) condition -> . STRING EQUAL expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    STRING          shift and go to state 104
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    OPEN_PAREN      shift and go to state 78

    condition                      shift and go to state 226
    expression                     shift and go to state 103
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 161

    (41) condition -> expression EQUAL . expression
    (47) condition -> expression EQUAL . STRING
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    STRING          shift and go to state 228
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 227
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 162

    (42) condition -> expression NOT_EQUAL . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 229
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 163

    (43) condition -> expression LESS_THAN . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 230
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 164

    (44) condition -> expression GREATER_THAN . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 231
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 165

    (45) condition -> expression LESS_THAN_EQUAL . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 232
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 166

    (46) condition -> expression GREATER_THAN_EQUAL . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 233
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 167

    (48) condition -> STRING EQUAL . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 234
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 168

    (63) while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 235


state 169

    (64) for_statement -> FOR OPEN_PAREN for_init SEMICOLON . logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (49) logical_condition -> . condition
    (50) logical_condition -> . condition DOUBLE_AMPERSAND condition
    (51) logical_condition -> . condition DOUBLE_PIPE condition
    (41) condition -> . expression EQUAL expression
    (42) condition -> . expression NOT_EQUAL expression
    (43) condition -> . expression LESS_THAN expression
    (44) condition -> . expression GREATER_THAN expression
    (45) condition -> . expression LESS_THAN_EQUAL expression
    (46) condition -> . expression GREATER_THAN_EQUAL expression
    (47) condition -> . expression EQUAL STRING
    (48) condition -> . STRING EQUAL expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    STRING          shift and go to state 104
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    OPEN_PAREN      shift and go to state 78

    logical_condition              shift and go to state 236
    condition                      shift and go to state 102
    expression                     shift and go to state 103
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 170

    (65) for_init -> INT_TYPE IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 237


state 171

    (67) assignment_no_semicolon -> IDENTIFIER ASSIGN . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 238
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 172

    (83) switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN . OPEN_BRACE case_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 239


state 173

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN . IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 240


state 174

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN . IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 241


state 175

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA . INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    INT_TYPE        shift and go to state 242


state 176

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA . STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    STRING_TYPE     shift and go to state 243


state 177

    (110) class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body . CLOSE_BRACE
    (114) class_body -> class_body . class_member
    (115) class_member -> . property_definition
    (116) class_member -> . method_definition
    (117) class_member -> . main_method
    (118) class_member -> . static_method
    (119) property_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (120) property_definition -> . PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (121) method_definition -> . PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (122) method_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (106) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (108) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (102) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (104) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 244
    PUBLIC          shift and go to state 183
    STATIC          shift and go to state 184

    class_member                   shift and go to state 245
    property_definition            shift and go to state 179
    method_definition              shift and go to state 180
    main_method                    shift and go to state 181
    static_method                  shift and go to state 182

state 178

    (113) class_body -> class_member .

    CLOSE_BRACE     reduce using rule 113 (class_body -> class_member .)
    PUBLIC          reduce using rule 113 (class_body -> class_member .)
    STATIC          reduce using rule 113 (class_body -> class_member .)


state 179

    (115) class_member -> property_definition .

    CLOSE_BRACE     reduce using rule 115 (class_member -> property_definition .)
    PUBLIC          reduce using rule 115 (class_member -> property_definition .)
    STATIC          reduce using rule 115 (class_member -> property_definition .)


state 180

    (116) class_member -> method_definition .

    CLOSE_BRACE     reduce using rule 116 (class_member -> method_definition .)
    PUBLIC          reduce using rule 116 (class_member -> method_definition .)
    STATIC          reduce using rule 116 (class_member -> method_definition .)


state 181

    (117) class_member -> main_method .

    CLOSE_BRACE     reduce using rule 117 (class_member -> main_method .)
    PUBLIC          reduce using rule 117 (class_member -> main_method .)
    STATIC          reduce using rule 117 (class_member -> main_method .)


state 182

    (118) class_member -> static_method .

    CLOSE_BRACE     reduce using rule 118 (class_member -> static_method .)
    PUBLIC          reduce using rule 118 (class_member -> static_method .)
    STATIC          reduce using rule 118 (class_member -> static_method .)


state 183

    (119) property_definition -> PUBLIC . INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (120) property_definition -> PUBLIC . STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (121) method_definition -> PUBLIC . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (122) method_definition -> PUBLIC . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    INT_TYPE        shift and go to state 246
    STRING_TYPE     shift and go to state 247
    VOID            shift and go to state 248


state 184

    (106) main_method -> STATIC . VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> STATIC . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (108) main_method -> STATIC . VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> STATIC . VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> STATIC . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> STATIC . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> STATIC . VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> STATIC . VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (102) static_method -> STATIC . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> STATIC . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (104) static_method -> STATIC . INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> STATIC . INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    VOID            shift and go to state 249
    INT_TYPE        shift and go to state 250


state 185

    (111) class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body . CLOSE_BRACE
    (114) class_body -> class_body . class_member
    (115) class_member -> . property_definition
    (116) class_member -> . method_definition
    (117) class_member -> . main_method
    (118) class_member -> . static_method
    (119) property_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (120) property_definition -> . PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (121) method_definition -> . PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (122) method_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (106) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (108) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (102) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (104) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 251
    PUBLIC          shift and go to state 183
    STATIC          shift and go to state 184

    class_member                   shift and go to state 245
    property_definition            shift and go to state 179
    method_definition              shift and go to state 180
    main_method                    shift and go to state 181
    static_method                  shift and go to state 182

state 186

    (22) function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .

    SEMICOLON       reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    PLUS            reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    MINUS           reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    OPEN_BRACKET    reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    DOT             reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    COMMA           reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    EQUAL           reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    LESS_THAN       reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    COLON           reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 22 (function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN .)


state 187

    (112) class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE . class_body CLOSE_BRACE
    (113) class_body -> . class_member
    (114) class_body -> . class_body class_member
    (115) class_member -> . property_definition
    (116) class_member -> . method_definition
    (117) class_member -> . main_method
    (118) class_member -> . static_method
    (119) property_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (120) property_definition -> . PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (121) method_definition -> . PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (122) method_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (106) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (108) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (102) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (104) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    PUBLIC          shift and go to state 183
    STATIC          shift and go to state 184

    class_body                     shift and go to state 252
    class_member                   shift and go to state 178
    property_definition            shift and go to state 179
    method_definition              shift and go to state 180
    main_method                    shift and go to state 181
    static_method                  shift and go to state 182

state 188

    (59) basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 253


state 189

    (72) param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (75) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 254
    COMMA           shift and go to state 208


state 190

    (4) expression -> expression PLUS term .
    (9) term -> term . MULTIPLY factor
    (10) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 4 (expression -> expression PLUS term .)
    PLUS            reduce using rule 4 (expression -> expression PLUS term .)
    MINUS           reduce using rule 4 (expression -> expression PLUS term .)
    OPEN_BRACKET    reduce using rule 4 (expression -> expression PLUS term .)
    DOT             reduce using rule 4 (expression -> expression PLUS term .)
    CLOSE_BRACKET   reduce using rule 4 (expression -> expression PLUS term .)
    CLOSE_PAREN     reduce using rule 4 (expression -> expression PLUS term .)
    COMMA           reduce using rule 4 (expression -> expression PLUS term .)
    EQUAL           reduce using rule 4 (expression -> expression PLUS term .)
    NOT_EQUAL       reduce using rule 4 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 4 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 4 (expression -> expression PLUS term .)
    LESS_THAN_EQUAL reduce using rule 4 (expression -> expression PLUS term .)
    GREATER_THAN_EQUAL reduce using rule 4 (expression -> expression PLUS term .)
    DOUBLE_AMPERSAND reduce using rule 4 (expression -> expression PLUS term .)
    DOUBLE_PIPE     reduce using rule 4 (expression -> expression PLUS term .)
    COLON           reduce using rule 4 (expression -> expression PLUS term .)
    CLOSE_BRACE     reduce using rule 4 (expression -> expression PLUS term .)
    MULTIPLY        shift and go to state 129
    DIVIDE          shift and go to state 130


state 191

    (15) factor -> IDENTIFIER .

    MULTIPLY        reduce using rule 15 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 15 (factor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 15 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 15 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 15 (factor -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 15 (factor -> IDENTIFIER .)
    DOT             reduce using rule 15 (factor -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 15 (factor -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 15 (factor -> IDENTIFIER .)
    COMMA           reduce using rule 15 (factor -> IDENTIFIER .)
    EQUAL           reduce using rule 15 (factor -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 15 (factor -> IDENTIFIER .)
    LESS_THAN       reduce using rule 15 (factor -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 15 (factor -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 15 (factor -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 15 (factor -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 15 (factor -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 15 (factor -> IDENTIFIER .)
    COLON           reduce using rule 15 (factor -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 15 (factor -> IDENTIFIER .)


state 192

    (5) expression -> expression MINUS term .
    (9) term -> term . MULTIPLY factor
    (10) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 5 (expression -> expression MINUS term .)
    PLUS            reduce using rule 5 (expression -> expression MINUS term .)
    MINUS           reduce using rule 5 (expression -> expression MINUS term .)
    OPEN_BRACKET    reduce using rule 5 (expression -> expression MINUS term .)
    DOT             reduce using rule 5 (expression -> expression MINUS term .)
    CLOSE_BRACKET   reduce using rule 5 (expression -> expression MINUS term .)
    CLOSE_PAREN     reduce using rule 5 (expression -> expression MINUS term .)
    COMMA           reduce using rule 5 (expression -> expression MINUS term .)
    EQUAL           reduce using rule 5 (expression -> expression MINUS term .)
    NOT_EQUAL       reduce using rule 5 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 5 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 5 (expression -> expression MINUS term .)
    LESS_THAN_EQUAL reduce using rule 5 (expression -> expression MINUS term .)
    GREATER_THAN_EQUAL reduce using rule 5 (expression -> expression MINUS term .)
    DOUBLE_AMPERSAND reduce using rule 5 (expression -> expression MINUS term .)
    DOUBLE_PIPE     reduce using rule 5 (expression -> expression MINUS term .)
    COLON           reduce using rule 5 (expression -> expression MINUS term .)
    CLOSE_BRACE     reduce using rule 5 (expression -> expression MINUS term .)
    MULTIPLY        shift and go to state 129
    DIVIDE          shift and go to state 130


state 193

    (92) expression -> expression OPEN_BRACKET expression . CLOSE_BRACKET
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_BRACKET   shift and go to state 255
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 194

    (93) expression -> expression DOT IDENTIFIER .

    SEMICOLON       reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    PLUS            reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    MINUS           reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    DOT             reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    COMMA           reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    EQUAL           reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    NOT_EQUAL       reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    LESS_THAN       reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    GREATER_THAN    reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    COLON           reduce using rule 93 (expression -> expression DOT IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 93 (expression -> expression DOT IDENTIFIER .)


state 195

    (9) term -> term MULTIPLY factor .

    MULTIPLY        reduce using rule 9 (term -> term MULTIPLY factor .)
    DIVIDE          reduce using rule 9 (term -> term MULTIPLY factor .)
    SEMICOLON       reduce using rule 9 (term -> term MULTIPLY factor .)
    PLUS            reduce using rule 9 (term -> term MULTIPLY factor .)
    MINUS           reduce using rule 9 (term -> term MULTIPLY factor .)
    OPEN_BRACKET    reduce using rule 9 (term -> term MULTIPLY factor .)
    DOT             reduce using rule 9 (term -> term MULTIPLY factor .)
    CLOSE_BRACKET   reduce using rule 9 (term -> term MULTIPLY factor .)
    CLOSE_PAREN     reduce using rule 9 (term -> term MULTIPLY factor .)
    COMMA           reduce using rule 9 (term -> term MULTIPLY factor .)
    EQUAL           reduce using rule 9 (term -> term MULTIPLY factor .)
    NOT_EQUAL       reduce using rule 9 (term -> term MULTIPLY factor .)
    LESS_THAN       reduce using rule 9 (term -> term MULTIPLY factor .)
    GREATER_THAN    reduce using rule 9 (term -> term MULTIPLY factor .)
    LESS_THAN_EQUAL reduce using rule 9 (term -> term MULTIPLY factor .)
    GREATER_THAN_EQUAL reduce using rule 9 (term -> term MULTIPLY factor .)
    DOUBLE_AMPERSAND reduce using rule 9 (term -> term MULTIPLY factor .)
    DOUBLE_PIPE     reduce using rule 9 (term -> term MULTIPLY factor .)
    COLON           reduce using rule 9 (term -> term MULTIPLY factor .)
    CLOSE_BRACE     reduce using rule 9 (term -> term MULTIPLY factor .)


state 196

    (10) term -> term DIVIDE factor .

    MULTIPLY        reduce using rule 10 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 10 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 10 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 10 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 10 (term -> term DIVIDE factor .)
    OPEN_BRACKET    reduce using rule 10 (term -> term DIVIDE factor .)
    DOT             reduce using rule 10 (term -> term DIVIDE factor .)
    CLOSE_BRACKET   reduce using rule 10 (term -> term DIVIDE factor .)
    CLOSE_PAREN     reduce using rule 10 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 10 (term -> term DIVIDE factor .)
    EQUAL           reduce using rule 10 (term -> term DIVIDE factor .)
    NOT_EQUAL       reduce using rule 10 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 10 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 10 (term -> term DIVIDE factor .)
    LESS_THAN_EQUAL reduce using rule 10 (term -> term DIVIDE factor .)
    GREATER_THAN_EQUAL reduce using rule 10 (term -> term DIVIDE factor .)
    DOUBLE_AMPERSAND reduce using rule 10 (term -> term DIVIDE factor .)
    DOUBLE_PIPE     reduce using rule 10 (term -> term DIVIDE factor .)
    COLON           reduce using rule 10 (term -> term DIVIDE factor .)
    CLOSE_BRACE     reduce using rule 10 (term -> term DIVIDE factor .)


state 197

    (97) expression -> NEW INT_TYPE OPEN_BRACKET . CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE

    CLOSE_BRACKET   shift and go to state 256


state 198

    (29) convert_statement -> CONVERT DOT TOINT32 . OPEN_PAREN expression CLOSE_PAREN

    OPEN_PAREN      shift and go to state 257


state 199

    (16) factor -> OPEN_PAREN expression CLOSE_PAREN .

    MULTIPLY        reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    DIVIDE          reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    SEMICOLON       reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    OPEN_BRACKET    reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    DOT             reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    EQUAL           reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    NOT_EQUAL       reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS_THAN       reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    DOUBLE_AMPERSAND reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    DOUBLE_PIPE     reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 16 (factor -> OPEN_PAREN expression CLOSE_PAREN .)


state 200

    (55) array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN . expression SEMICOLON
    (82) dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN . expression SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 258
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 201

    (62) list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression . CLOSE_PAREN SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_PAREN     shift and go to state 259
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 202

    (25) argument_list -> argument_list COMMA expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_PAREN     reduce using rule 25 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 25 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 203

    (32) assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    USING           reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS_NAME      reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLOSE_BRACE     reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 32 (assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)


state 204

    (39) multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 260


state 205

    (33) assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .

    IDENTIFIER      reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    INT_TYPE        reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    FLOAT_TYPE      reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    STRING_TYPE     reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    BOOL_TYPE       reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    CONSOLE         reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    IF              reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    WHILE           reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    FOR             reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    SWITCH          reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    LIST            reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    DICTIONARY      reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    CLASS           reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    PUBLIC          reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    VOID            reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    RETURN          reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    USING           reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    CLASS_NAME      reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    $end            reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    CLOSE_BRACE     reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)
    BREAK           reduce using rule 33 (assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON .)


state 206

    (76) parameter -> INT_TYPE IDENTIFIER .

    CLOSE_PAREN     reduce using rule 76 (parameter -> INT_TYPE IDENTIFIER .)
    COMMA           reduce using rule 76 (parameter -> INT_TYPE IDENTIFIER .)


state 207

    (73) param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 261


state 208

    (75) parameter_list -> parameter_list COMMA . parameter
    (76) parameter -> . INT_TYPE IDENTIFIER
    (77) parameter -> . STRING_TYPE IDENTIFIER
    (78) parameter -> . FLOAT_TYPE IDENTIFIER

    INT_TYPE        shift and go to state 140
    STRING_TYPE     shift and go to state 144
    FLOAT_TYPE      shift and go to state 145

    parameter                      shift and go to state 262

state 209

    (88) return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 263
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 210

    (77) parameter -> STRING_TYPE IDENTIFIER .

    CLOSE_PAREN     reduce using rule 77 (parameter -> STRING_TYPE IDENTIFIER .)
    COMMA           reduce using rule 77 (parameter -> STRING_TYPE IDENTIFIER .)


state 211

    (78) parameter -> FLOAT_TYPE IDENTIFIER .

    CLOSE_PAREN     reduce using rule 78 (parameter -> FLOAT_TYPE IDENTIFIER .)
    COMMA           reduce using rule 78 (parameter -> FLOAT_TYPE IDENTIFIER .)


state 212

    (40) multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 264
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 213

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN . NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN . expression SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    NEW             shift and go to state 265
    IDENTIFIER      shift and go to state 71
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 266
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 214

    (35) assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    USING           reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS_NAME      reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLOSE_BRACE     reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 35 (assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)


state 215

    (90) return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 267
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 216

    (36) assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    USING           reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS_NAME      reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLOSE_BRACE     reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 36 (assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)


state 217

    (37) assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .

    IDENTIFIER      reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    INT_TYPE        reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    FLOAT_TYPE      reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    STRING_TYPE     reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    BOOL_TYPE       reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    CONSOLE         reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    IF              reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    WHILE           reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    FOR             reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    SWITCH          reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    LIST            reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    DICTIONARY      reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    CLASS           reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    PUBLIC          reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    VOID            reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    RETURN          reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    USING           reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    CLASS_NAME      reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    $end            reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    CLOSE_BRACE     reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)
    BREAK           reduce using rule 37 (assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON .)


state 218

    (28) input_statement -> CONSOLE DOT . READLINE OPEN_PAREN CLOSE_PAREN

    READLINE        shift and go to state 268


state 219

    (89) return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 269
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 220

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN . NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON

    NEW             shift and go to state 270


state 221

    (38) assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    USING           reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS_NAME      reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    CLOSE_BRACE     reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 38 (assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON .)


state 222

    (26) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression . CLOSE_PAREN SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_PAREN     shift and go to state 271
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 223

    (27) print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression . CLOSE_PAREN SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_PAREN     shift and go to state 272
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 224

    (56) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 273
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 225

    (50) logical_condition -> condition DOUBLE_AMPERSAND condition .

    CLOSE_PAREN     reduce using rule 50 (logical_condition -> condition DOUBLE_AMPERSAND condition .)
    SEMICOLON       reduce using rule 50 (logical_condition -> condition DOUBLE_AMPERSAND condition .)


state 226

    (51) logical_condition -> condition DOUBLE_PIPE condition .

    CLOSE_PAREN     reduce using rule 51 (logical_condition -> condition DOUBLE_PIPE condition .)
    SEMICOLON       reduce using rule 51 (logical_condition -> condition DOUBLE_PIPE condition .)


state 227

    (41) condition -> expression EQUAL expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    DOUBLE_AMPERSAND reduce using rule 41 (condition -> expression EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 41 (condition -> expression EQUAL expression .)
    CLOSE_PAREN     reduce using rule 41 (condition -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 41 (condition -> expression EQUAL expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 228

    (47) condition -> expression EQUAL STRING .
    (14) factor -> STRING .

  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 14 (factor -> STRING .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 14 (factor -> STRING .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 14 (factor -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (factor -> STRING .)
    MULTIPLY        reduce using rule 14 (factor -> STRING .)
    DIVIDE          reduce using rule 14 (factor -> STRING .)
    PLUS            reduce using rule 14 (factor -> STRING .)
    MINUS           reduce using rule 14 (factor -> STRING .)
    OPEN_BRACKET    reduce using rule 14 (factor -> STRING .)
    DOT             reduce using rule 14 (factor -> STRING .)
    DOUBLE_AMPERSAND reduce using rule 14 (factor -> STRING .)
    DOUBLE_PIPE     reduce using rule 14 (factor -> STRING .)
    CLOSE_PAREN     reduce using rule 14 (factor -> STRING .)
    SEMICOLON       reduce using rule 14 (factor -> STRING .)

  ! DOUBLE_AMPERSAND [ reduce using rule 47 (condition -> expression EQUAL STRING .) ]
  ! DOUBLE_PIPE     [ reduce using rule 47 (condition -> expression EQUAL STRING .) ]
  ! CLOSE_PAREN     [ reduce using rule 47 (condition -> expression EQUAL STRING .) ]
  ! SEMICOLON       [ reduce using rule 47 (condition -> expression EQUAL STRING .) ]


state 229

    (42) condition -> expression NOT_EQUAL expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    DOUBLE_AMPERSAND reduce using rule 42 (condition -> expression NOT_EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 42 (condition -> expression NOT_EQUAL expression .)
    CLOSE_PAREN     reduce using rule 42 (condition -> expression NOT_EQUAL expression .)
    SEMICOLON       reduce using rule 42 (condition -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 230

    (43) condition -> expression LESS_THAN expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    DOUBLE_AMPERSAND reduce using rule 43 (condition -> expression LESS_THAN expression .)
    DOUBLE_PIPE     reduce using rule 43 (condition -> expression LESS_THAN expression .)
    CLOSE_PAREN     reduce using rule 43 (condition -> expression LESS_THAN expression .)
    SEMICOLON       reduce using rule 43 (condition -> expression LESS_THAN expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 231

    (44) condition -> expression GREATER_THAN expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    DOUBLE_AMPERSAND reduce using rule 44 (condition -> expression GREATER_THAN expression .)
    DOUBLE_PIPE     reduce using rule 44 (condition -> expression GREATER_THAN expression .)
    CLOSE_PAREN     reduce using rule 44 (condition -> expression GREATER_THAN expression .)
    SEMICOLON       reduce using rule 44 (condition -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 232

    (45) condition -> expression LESS_THAN_EQUAL expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    DOUBLE_AMPERSAND reduce using rule 45 (condition -> expression LESS_THAN_EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 45 (condition -> expression LESS_THAN_EQUAL expression .)
    CLOSE_PAREN     reduce using rule 45 (condition -> expression LESS_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 45 (condition -> expression LESS_THAN_EQUAL expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 233

    (46) condition -> expression GREATER_THAN_EQUAL expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    DOUBLE_AMPERSAND reduce using rule 46 (condition -> expression GREATER_THAN_EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 46 (condition -> expression GREATER_THAN_EQUAL expression .)
    CLOSE_PAREN     reduce using rule 46 (condition -> expression GREATER_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 46 (condition -> expression GREATER_THAN_EQUAL expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 234

    (48) condition -> STRING EQUAL expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    DOUBLE_AMPERSAND reduce using rule 48 (condition -> STRING EQUAL expression .)
    DOUBLE_PIPE     reduce using rule 48 (condition -> STRING EQUAL expression .)
    CLOSE_PAREN     reduce using rule 48 (condition -> STRING EQUAL expression .)
    SEMICOLON       reduce using rule 48 (condition -> STRING EQUAL expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 235

    (63) while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 274
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 236

    (64) for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition . SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    SEMICOLON       shift and go to state 275


state 237

    (65) for_init -> INT_TYPE IDENTIFIER ASSIGN . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 276
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 238

    (67) assignment_no_semicolon -> IDENTIFIER ASSIGN expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       reduce using rule 67 (assignment_no_semicolon -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 239

    (83) switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE . case_list CLOSE_BRACE
    (84) case_list -> . case_statement
    (85) case_list -> . case_list case_statement
    (86) case_statement -> . CASE expression COLON statement_list BREAK SEMICOLON
    (87) case_statement -> . DEFAULT COLON statement_list BREAK SEMICOLON

    CASE            shift and go to state 279
    DEFAULT         shift and go to state 280

    case_list                      shift and go to state 277
    case_statement                 shift and go to state 278

state 240

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER . ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    ASSIGN          shift and go to state 281


state 241

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER . ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    ASSIGN          shift and go to state 282


state 242

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE . GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 283


state 243

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE . GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 284


state 244

    (110) class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .

    IDENTIFIER      reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    INT_TYPE        reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    CONSOLE         reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    IF              reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    WHILE           reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    FOR             reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    SWITCH          reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    LIST            reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    DICTIONARY      reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    CLASS           reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    PUBLIC          reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    VOID            reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    RETURN          reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    USING           reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    $end            reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    BREAK           reduce using rule 110 (class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)


state 245

    (114) class_body -> class_body class_member .

    CLOSE_BRACE     reduce using rule 114 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 114 (class_body -> class_body class_member .)
    STATIC          reduce using rule 114 (class_body -> class_body class_member .)


state 246

    (119) property_definition -> PUBLIC INT_TYPE . IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (122) method_definition -> PUBLIC INT_TYPE . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    IDENTIFIER      shift and go to state 285


state 247

    (120) property_definition -> PUBLIC STRING_TYPE . IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE

    IDENTIFIER      shift and go to state 286


state 248

    (121) method_definition -> PUBLIC VOID . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    IDENTIFIER      shift and go to state 287


state 249

    (106) main_method -> STATIC VOID . IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> STATIC VOID . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (108) main_method -> STATIC VOID . CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> STATIC VOID . CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> STATIC VOID . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> STATIC VOID . IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> STATIC VOID . CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> STATIC VOID . CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    IDENTIFIER      shift and go to state 288
    CLASS_NAME      shift and go to state 289


state 250

    (102) static_method -> STATIC INT_TYPE . IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> STATIC INT_TYPE . IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (104) static_method -> STATIC INT_TYPE . CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> STATIC INT_TYPE . CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    IDENTIFIER      shift and go to state 290
    CLASS_NAME      shift and go to state 291


state 251

    (111) class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .

    IDENTIFIER      reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    INT_TYPE        reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    CONSOLE         reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    IF              reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    WHILE           reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    FOR             reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    SWITCH          reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    LIST            reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    DICTIONARY      reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    CLASS           reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    PUBLIC          reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    VOID            reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    RETURN          reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    USING           reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    $end            reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)
    BREAK           reduce using rule 111 (class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE .)


state 252

    (112) class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body . CLOSE_BRACE
    (114) class_body -> class_body . class_member
    (115) class_member -> . property_definition
    (116) class_member -> . method_definition
    (117) class_member -> . main_method
    (118) class_member -> . static_method
    (119) property_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (120) property_definition -> . PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (121) method_definition -> . PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (122) method_definition -> . PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (106) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (108) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> . STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> . STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (102) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> . STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (104) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> . STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 292
    PUBLIC          shift and go to state 183
    STATIC          shift and go to state 184

    class_member                   shift and go to state 245
    property_definition            shift and go to state 179
    method_definition              shift and go to state 180
    main_method                    shift and go to state 181
    static_method                  shift and go to state 182

state 253

    (59) basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 293
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 254

    (72) param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 294


state 255

    (92) expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .

    SEMICOLON       reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    DOT             reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    EQUAL           reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    NOT_EQUAL       reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN       reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN    reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    DOUBLE_AMPERSAND reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    DOUBLE_PIPE     reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACE     reduce using rule 92 (expression -> expression OPEN_BRACKET expression CLOSE_BRACKET .)


state 256

    (97) expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET . OPEN_BRACE value_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 295


state 257

    (29) convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN . expression CLOSE_PAREN
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 296
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 258

    (55) array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression . SEMICOLON
    (82) dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression . SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 297
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 259

    (62) list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 298


state 260

    (39) multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 299


state 261

    (73) param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 300
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 262

    (75) parameter_list -> parameter_list COMMA parameter .

    CLOSE_PAREN     reduce using rule 75 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 75 (parameter_list -> parameter_list COMMA parameter .)


state 263

    (88) return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . RETURN expression SEMICOLON CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    RETURN          shift and go to state 301
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 264

    (40) multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       reduce using rule 40 (multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 40 (multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 265

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW . INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (97) expression -> NEW . INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE

    INT_TYPE        shift and go to state 302


state 266

    (94) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression . SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 303
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 267

    (90) return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . RETURN expression SEMICOLON CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    RETURN          shift and go to state 304
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 268

    (28) input_statement -> CONSOLE DOT READLINE . OPEN_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 305


state 269

    (89) return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . RETURN expression SEMICOLON CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    RETURN          shift and go to state 306
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 270

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW . STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON

    STRING_TYPE     shift and go to state 307


state 271

    (26) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 308


state 272

    (27) print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 309


state 273

    (56) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 310
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 274

    (63) while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 311
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 275

    (64) for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON . for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (68) for_update -> . IDENTIFIER INCREMENT
    (69) for_update -> . IDENTIFIER DECREMENT
    (70) for_update -> . INCREMENT IDENTIFIER
    (71) for_update -> . DECREMENT IDENTIFIER

    IDENTIFIER      shift and go to state 313
    INCREMENT       shift and go to state 314
    DECREMENT       shift and go to state 315

    for_update                     shift and go to state 312

state 276

    (65) for_init -> INT_TYPE IDENTIFIER ASSIGN expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       reduce using rule 65 (for_init -> INT_TYPE IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 277

    (83) switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list . CLOSE_BRACE
    (85) case_list -> case_list . case_statement
    (86) case_statement -> . CASE expression COLON statement_list BREAK SEMICOLON
    (87) case_statement -> . DEFAULT COLON statement_list BREAK SEMICOLON

    CLOSE_BRACE     shift and go to state 316
    CASE            shift and go to state 279
    DEFAULT         shift and go to state 280

    case_statement                 shift and go to state 317

state 278

    (84) case_list -> case_statement .

    CLOSE_BRACE     reduce using rule 84 (case_list -> case_statement .)
    CASE            reduce using rule 84 (case_list -> case_statement .)
    DEFAULT         reduce using rule 84 (case_list -> case_statement .)


state 279

    (86) case_statement -> CASE . expression COLON statement_list BREAK SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 318
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 280

    (87) case_statement -> DEFAULT . COLON statement_list BREAK SEMICOLON

    COLON           shift and go to state 319


state 281

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN . NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    NEW             shift and go to state 320


state 282

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN . NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    NEW             shift and go to state 321


state 283

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN . IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 322


state 284

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN . IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 323


state 285

    (119) property_definition -> PUBLIC INT_TYPE IDENTIFIER . OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
    (122) method_definition -> PUBLIC INT_TYPE IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 324
    OPEN_PAREN      shift and go to state 325


state 286

    (120) property_definition -> PUBLIC STRING_TYPE IDENTIFIER . OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE

    OPEN_BRACE      shift and go to state 326


state 287

    (121) method_definition -> PUBLIC VOID IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 327


state 288

    (106) main_method -> STATIC VOID IDENTIFIER . OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> STATIC VOID IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> STATIC VOID IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> STATIC VOID IDENTIFIER . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 328


state 289

    (108) main_method -> STATIC VOID CLASS_NAME . OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> STATIC VOID CLASS_NAME . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> STATIC VOID CLASS_NAME . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> STATIC VOID CLASS_NAME . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 329


state 290

    (102) static_method -> STATIC INT_TYPE IDENTIFIER . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> STATIC INT_TYPE IDENTIFIER . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 330


state 291

    (104) static_method -> STATIC INT_TYPE CLASS_NAME . OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> STATIC INT_TYPE CLASS_NAME . OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 331


state 292

    (112) class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .

    IDENTIFIER      reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    INT_TYPE        reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    CONSOLE         reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    IF              reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    WHILE           reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    FOR             reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    SWITCH          reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    LIST            reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    DICTIONARY      reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    CLASS           reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    PUBLIC          reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    VOID            reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    RETURN          reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    USING           reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    $end            reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)
    BREAK           reduce using rule 112 (class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE .)


state 293

    (59) basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 332
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 294

    (72) param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 333
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 295

    (97) expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE . value_list CLOSE_BRACE
    (95) value_list -> . expression
    (96) value_list -> . value_list COMMA expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    value_list                     shift and go to state 334
    expression                     shift and go to state 335
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 296

    (29) convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression . CLOSE_PAREN
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_PAREN     shift and go to state 336
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 297

    (55) array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .
    (82) dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for INT_TYPE resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for FLOAT_TYPE resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for STRING_TYPE resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for BOOL_TYPE resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for LIST resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for DICTIONARY resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for VOID resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for USING resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for CLASS_NAME resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    IF              reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    USING           reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CLASS_NAME      reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    $end            reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    CLOSE_BRACE     reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 55 (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .)

  ! IDENTIFIER      [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! INT_TYPE        [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! FLOAT_TYPE      [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! STRING_TYPE     [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! BOOL_TYPE       [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! CONSOLE         [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! IF              [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! WHILE           [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! FOR             [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! LIST            [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! DICTIONARY      [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! CLASS           [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! PUBLIC          [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! VOID            [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! RETURN          [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! USING           [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! CLASS_NAME      [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! $end            [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! CLOSE_BRACE     [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]
  ! BREAK           [ reduce using rule 82 (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON .) ]


state 298

    (62) list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .

    IDENTIFIER      reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    SWITCH          reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLASS           reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    USING           reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLASS_NAME      reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACE     reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BREAK           reduce using rule 62 (list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)


state 299

    (39) multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 337
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 300

    (73) param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 338
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 301

    (88) return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN . expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> RETURN . SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    SEMICOLON       shift and go to state 67
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 339
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 302

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE . OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (97) expression -> NEW INT_TYPE . OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE

    OPEN_BRACKET    shift and go to state 340


state 303

    (94) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_TYPE        reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT_TYPE      reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_TYPE     reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    CONSOLE         reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    LIST            reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    DICTIONARY      reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    PUBLIC          reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    USING           reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS_NAME      reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    CLOSE_BRACE     reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 94 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON .)


state 304

    (90) return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN . expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> RETURN . SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    SEMICOLON       shift and go to state 67
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 341
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 305

    (28) input_statement -> CONSOLE DOT READLINE OPEN_PAREN . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 342


state 306

    (89) return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN . expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> RETURN . SEMICOLON
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    SEMICOLON       shift and go to state 67
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 343
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 307

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE . OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON

    OPEN_BRACKET    shift and go to state 344


state 308

    (26) print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .

    IDENTIFIER      reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    SWITCH          reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLASS           reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    USING           reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLASS_NAME      reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACE     reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BREAK           reduce using rule 26 (print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)


state 309

    (27) print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .

    IDENTIFIER      reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    SWITCH          reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLASS           reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    USING           reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLASS_NAME      reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACE     reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)
    BREAK           reduce using rule 27 (print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON .)


state 310

    (56) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .
    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE . ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE . ELSE OPEN_BRACE statement_list CLOSE_BRACE

    IDENTIFIER      reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    SWITCH          reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS           reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    USING           reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    $end            reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BREAK           reduce using rule 56 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    ELSE            shift and go to state 345


state 311

    (63) while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    IDENTIFIER      reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    SWITCH          reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS           reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    USING           reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    $end            reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BREAK           reduce using rule 63 (while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 312

    (64) for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 346


state 313

    (68) for_update -> IDENTIFIER . INCREMENT
    (69) for_update -> IDENTIFIER . DECREMENT

    INCREMENT       shift and go to state 347
    DECREMENT       shift and go to state 348


state 314

    (70) for_update -> INCREMENT . IDENTIFIER

    IDENTIFIER      shift and go to state 349


state 315

    (71) for_update -> DECREMENT . IDENTIFIER

    IDENTIFIER      shift and go to state 350


state 316

    (83) switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .

    IDENTIFIER      reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    IF              reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    WHILE           reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    FOR             reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    SWITCH          reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    LIST            reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    CLASS           reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    VOID            reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    RETURN          reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    USING           reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    $end            reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)
    BREAK           reduce using rule 83 (switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE .)


state 317

    (85) case_list -> case_list case_statement .

    CLOSE_BRACE     reduce using rule 85 (case_list -> case_list case_statement .)
    CASE            reduce using rule 85 (case_list -> case_list case_statement .)
    DEFAULT         reduce using rule 85 (case_list -> case_list case_statement .)


state 318

    (86) case_statement -> CASE expression . COLON statement_list BREAK SEMICOLON
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    COLON           shift and go to state 351
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 319

    (87) case_statement -> DEFAULT COLON . statement_list BREAK SEMICOLON
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 352
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 320

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW . LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    LIST            shift and go to state 353


state 321

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW . LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    LIST            shift and go to state 354


state 322

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER . ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    ASSIGN          shift and go to state 355


state 323

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER . ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    ASSIGN          shift and go to state 356


state 324

    (119) property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE . GET SEMICOLON SET SEMICOLON CLOSE_BRACE

    GET             shift and go to state 357


state 325

    (122) method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 358


state 326

    (120) property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE . GET SEMICOLON SET SEMICOLON CLOSE_BRACE

    GET             shift and go to state 359


state 327

    (121) method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 360


state 328

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (107) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (99) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (74) parameter_list -> . parameter
    (75) parameter_list -> . parameter_list COMMA parameter
    (76) parameter -> . INT_TYPE IDENTIFIER
    (77) parameter -> . STRING_TYPE IDENTIFIER
    (78) parameter -> . FLOAT_TYPE IDENTIFIER

    STRING_TYPE     shift and go to state 361
    CLOSE_PAREN     shift and go to state 362
    INT_TYPE        shift and go to state 140
    FLOAT_TYPE      shift and go to state 145

    parameter_list                 shift and go to state 363
    parameter                      shift and go to state 143

state 329

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (109) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (101) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (74) parameter_list -> . parameter
    (75) parameter_list -> . parameter_list COMMA parameter
    (76) parameter -> . INT_TYPE IDENTIFIER
    (77) parameter -> . STRING_TYPE IDENTIFIER
    (78) parameter -> . FLOAT_TYPE IDENTIFIER

    STRING_TYPE     shift and go to state 364
    CLOSE_PAREN     shift and go to state 365
    INT_TYPE        shift and go to state 140
    FLOAT_TYPE      shift and go to state 145

    parameter_list                 shift and go to state 366
    parameter                      shift and go to state 143

state 330

    (102) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (103) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (74) parameter_list -> . parameter
    (75) parameter_list -> . parameter_list COMMA parameter
    (76) parameter -> . INT_TYPE IDENTIFIER
    (77) parameter -> . STRING_TYPE IDENTIFIER
    (78) parameter -> . FLOAT_TYPE IDENTIFIER

    CLOSE_PAREN     shift and go to state 367
    INT_TYPE        shift and go to state 140
    STRING_TYPE     shift and go to state 144
    FLOAT_TYPE      shift and go to state 145

    parameter_list                 shift and go to state 368
    parameter                      shift and go to state 143

state 331

    (104) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (105) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN . parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (74) parameter_list -> . parameter
    (75) parameter_list -> . parameter_list COMMA parameter
    (76) parameter -> . INT_TYPE IDENTIFIER
    (77) parameter -> . STRING_TYPE IDENTIFIER
    (78) parameter -> . FLOAT_TYPE IDENTIFIER

    CLOSE_PAREN     shift and go to state 369
    INT_TYPE        shift and go to state 140
    STRING_TYPE     shift and go to state 144
    FLOAT_TYPE      shift and go to state 145

    parameter_list                 shift and go to state 370
    parameter                      shift and go to state 143

state 332

    (59) basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    IDENTIFIER      reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    SWITCH          reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS           reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    USING           reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    $end            reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BREAK           reduce using rule 59 (basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 333

    (72) param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 371
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 334

    (97) expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list . CLOSE_BRACE
    (96) value_list -> value_list . COMMA expression

    CLOSE_BRACE     shift and go to state 372
    COMMA           shift and go to state 373


state 335

    (95) value_list -> expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_BRACE     reduce using rule 95 (value_list -> expression .)
    COMMA           reduce using rule 95 (value_list -> expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 336

    (29) convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN .

    SEMICOLON       reduce using rule 29 (convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN .)


state 337

    (39) multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       reduce using rule 39 (multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 39 (multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 338

    (73) param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    IDENTIFIER      reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    SWITCH          reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS           reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    USING           reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    $end            reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BREAK           reduce using rule 73 (param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 339

    (88) return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression . SEMICOLON CLOSE_BRACE
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 374
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 340

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET . INTEGER CLOSE_BRACKET SEMICOLON
    (97) expression -> NEW INT_TYPE OPEN_BRACKET . CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE

    INTEGER         shift and go to state 375
    CLOSE_BRACKET   shift and go to state 256


state 341

    (90) return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression . SEMICOLON CLOSE_BRACE
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 376
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 342

    (28) input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .

    SEMICOLON       reduce using rule 28 (input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN .)


state 343

    (89) return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression . SEMICOLON CLOSE_BRACE
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    SEMICOLON       shift and go to state 377
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 344

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET . INTEGER CLOSE_BRACKET SEMICOLON

    INTEGER         shift and go to state 378


state 345

    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE . OPEN_BRACE statement_list CLOSE_BRACE

    IF              shift and go to state 379
    OPEN_BRACE      shift and go to state 380


state 346

    (64) for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 381


state 347

    (68) for_update -> IDENTIFIER INCREMENT .

    CLOSE_PAREN     reduce using rule 68 (for_update -> IDENTIFIER INCREMENT .)


state 348

    (69) for_update -> IDENTIFIER DECREMENT .

    CLOSE_PAREN     reduce using rule 69 (for_update -> IDENTIFIER DECREMENT .)


state 349

    (70) for_update -> INCREMENT IDENTIFIER .

    CLOSE_PAREN     reduce using rule 70 (for_update -> INCREMENT IDENTIFIER .)


state 350

    (71) for_update -> DECREMENT IDENTIFIER .

    CLOSE_PAREN     reduce using rule 71 (for_update -> DECREMENT IDENTIFIER .)


state 351

    (86) case_statement -> CASE expression COLON . statement_list BREAK SEMICOLON
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 382
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 352

    (87) case_statement -> DEFAULT COLON statement_list . BREAK SEMICOLON
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    BREAK           shift and go to state 383
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 353

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST . LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    LESS_THAN       shift and go to state 384


state 354

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST . LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    LESS_THAN       shift and go to state 385


state 355

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN . NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    NEW             shift and go to state 386


state 356

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN . NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    NEW             shift and go to state 387


state 357

    (119) property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET . SEMICOLON SET SEMICOLON CLOSE_BRACE

    SEMICOLON       shift and go to state 388


state 358

    (122) method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 389


state 359

    (120) property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET . SEMICOLON SET SEMICOLON CLOSE_BRACE

    SEMICOLON       shift and go to state 390


state 360

    (121) method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 391


state 361

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE . OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (77) parameter -> STRING_TYPE . IDENTIFIER

    OPEN_BRACKET    shift and go to state 392
    IDENTIFIER      shift and go to state 210


state 362

    (107) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE
    (98) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 393


state 363

    (99) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (75) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 394
    COMMA           shift and go to state 208


state 364

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE . OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (77) parameter -> STRING_TYPE . IDENTIFIER

    OPEN_BRACKET    shift and go to state 395
    IDENTIFIER      shift and go to state 210


state 365

    (109) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE
    (100) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 396


state 366

    (101) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (75) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 397
    COMMA           shift and go to state 208


state 367

    (102) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 398


state 368

    (103) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (75) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 399
    COMMA           shift and go to state 208


state 369

    (104) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 400


state 370

    (105) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (75) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PAREN     shift and go to state 401
    COMMA           shift and go to state 208


state 371

    (72) param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    IDENTIFIER      reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    SWITCH          reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS           reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    USING           reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    $end            reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BREAK           reduce using rule 72 (param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 372

    (97) expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .

    SEMICOLON       reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    PLUS            reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    MINUS           reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    DOT             reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    CLOSE_BRACKET   reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    COMMA           reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    EQUAL           reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    NOT_EQUAL       reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    LESS_THAN       reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    GREATER_THAN    reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    LESS_THAN_EQUAL reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    DOUBLE_AMPERSAND reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    DOUBLE_PIPE     reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    COLON           reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 97 (expression -> NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE .)


state 373

    (96) value_list -> value_list COMMA . expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    STRING          shift and go to state 82
    OPEN_PAREN      shift and go to state 78

    expression                     shift and go to state 402
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 374

    (88) return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 403


state 375

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 404


state 376

    (90) return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 405


state 377

    (89) return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 406


state 378

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 407


state 379

    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF . OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_PAREN      shift and go to state 408


state 380

    (58) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 409
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 381

    (64) for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 410
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 382

    (86) case_statement -> CASE expression COLON statement_list . BREAK SEMICOLON
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    BREAK           shift and go to state 411
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 383

    (87) case_statement -> DEFAULT COLON statement_list BREAK . SEMICOLON

    SEMICOLON       shift and go to state 412


state 384

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN . INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    INT_TYPE        shift and go to state 413


state 385

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN . STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    STRING_TYPE     shift and go to state 414


state 386

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    DICTIONARY      shift and go to state 415


state 387

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    DICTIONARY      shift and go to state 416


state 388

    (119) property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON . SET SEMICOLON CLOSE_BRACE

    SET             shift and go to state 417


state 389

    (122) method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 418
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 390

    (120) property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON . SET SEMICOLON CLOSE_BRACE

    SET             shift and go to state 419


state 391

    (121) method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 420
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 392

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET . CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_BRACKET   shift and go to state 421


state 393

    (107) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (98) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 422
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 394

    (99) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 423


state 395

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET . CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_BRACKET   shift and go to state 424


state 396

    (109) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (100) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 425
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 397

    (101) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 426


state 398

    (102) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 427
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 399

    (103) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 428


state 400

    (104) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 429
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 401

    (105) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 430


state 402

    (96) value_list -> value_list COMMA expression .
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term
    (92) expression -> expression . OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> expression . DOT IDENTIFIER

    CLOSE_BRACE     reduce using rule 96 (value_list -> value_list COMMA expression .)
    COMMA           reduce using rule 96 (value_list -> value_list COMMA expression .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    OPEN_BRACKET    shift and go to state 126
    DOT             shift and go to state 127


state 403

    (88) return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .

    IDENTIFIER      reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    INT_TYPE        reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CONSOLE         reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    IF              reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    WHILE           reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    FOR             reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    SWITCH          reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    LIST            reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    DICTIONARY      reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLASS           reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    PUBLIC          reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    VOID            reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    RETURN          reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    USING           reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    $end            reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    BREAK           reduce using rule 88 (return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)


state 404

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 431


state 405

    (90) return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .

    IDENTIFIER      reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    INT_TYPE        reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CONSOLE         reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    IF              reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    WHILE           reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    FOR             reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    SWITCH          reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    LIST            reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    DICTIONARY      reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLASS           reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    PUBLIC          reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    VOID            reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    RETURN          reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    USING           reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    $end            reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    BREAK           reduce using rule 90 (return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)


state 406

    (89) return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .

    IDENTIFIER      reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    INT_TYPE        reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CONSOLE         reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    IF              reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    WHILE           reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    FOR             reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    SWITCH          reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    LIST            reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    DICTIONARY      reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLASS           reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    PUBLIC          reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    VOID            reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    RETURN          reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    USING           reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    $end            reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)
    BREAK           reduce using rule 89 (return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE .)


state 407

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 432


state 408

    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN . logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (49) logical_condition -> . condition
    (50) logical_condition -> . condition DOUBLE_AMPERSAND condition
    (51) logical_condition -> . condition DOUBLE_PIPE condition
    (41) condition -> . expression EQUAL expression
    (42) condition -> . expression NOT_EQUAL expression
    (43) condition -> . expression LESS_THAN expression
    (44) condition -> . expression GREATER_THAN expression
    (45) condition -> . expression LESS_THAN_EQUAL expression
    (46) condition -> . expression GREATER_THAN_EQUAL expression
    (47) condition -> . expression EQUAL STRING
    (48) condition -> . STRING EQUAL expression
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) expression -> . IDENTIFIER
    (8) expression -> . function_call
    (92) expression -> . expression OPEN_BRACKET expression CLOSE_BRACKET
    (93) expression -> . expression DOT IDENTIFIER
    (97) expression -> . NEW INT_TYPE OPEN_BRACKET CLOSE_BRACKET OPEN_BRACE value_list CLOSE_BRACE
    (9) term -> . term MULTIPLY factor
    (10) term -> . term DIVIDE factor
    (11) term -> . factor
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
    (12) factor -> . INTEGER
    (13) factor -> . FLOAT
    (14) factor -> . STRING
    (15) factor -> . IDENTIFIER
    (16) factor -> . OPEN_PAREN expression CLOSE_PAREN

    STRING          shift and go to state 104
    IDENTIFIER      shift and go to state 71
    NEW             shift and go to state 76
    CLASS_NAME      shift and go to state 37
    INTEGER         shift and go to state 80
    FLOAT           shift and go to state 81
    OPEN_PAREN      shift and go to state 78

    logical_condition              shift and go to state 433
    condition                      shift and go to state 102
    expression                     shift and go to state 103
    term                           shift and go to state 74
    function_call                  shift and go to state 75
    factor                         shift and go to state 79

state 409

    (58) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 434
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 410

    (64) for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 435
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 411

    (86) case_statement -> CASE expression COLON statement_list BREAK . SEMICOLON

    SEMICOLON       shift and go to state 436


state 412

    (87) case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON .

    CLOSE_BRACE     reduce using rule 87 (case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON .)
    CASE            reduce using rule 87 (case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON .)
    DEFAULT         reduce using rule 87 (case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON .)


state 413

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE . GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 437


state 414

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE . GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 438


state 415

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY . LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    LESS_THAN       shift and go to state 439


state 416

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY . LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    LESS_THAN       shift and go to state 440


state 417

    (119) property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET . SEMICOLON CLOSE_BRACE

    SEMICOLON       shift and go to state 441


state 418

    (122) method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 442
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 419

    (120) property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET . SEMICOLON CLOSE_BRACE

    SEMICOLON       shift and go to state 443


state 420

    (121) method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 444
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 421

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET . IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    IDENTIFIER      shift and go to state 445


state 422

    (107) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (98) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 446
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 423

    (99) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 447
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 424

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET . IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    IDENTIFIER      shift and go to state 448


state 425

    (109) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (100) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 449
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 426

    (101) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 450
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 427

    (102) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 451
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 428

    (103) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 452
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 429

    (104) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 453
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 430

    (105) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 454
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 431

    (52) array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .

    IDENTIFIER      reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    INT_TYPE        reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    FLOAT_TYPE      reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    STRING_TYPE     reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    BOOL_TYPE       reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    CONSOLE         reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    IF              reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    WHILE           reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    FOR             reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    SWITCH          reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    LIST            reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    DICTIONARY      reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    CLASS           reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    PUBLIC          reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    VOID            reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    RETURN          reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    USING           reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    CLASS_NAME      reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    $end            reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    BREAK           reduce using rule 52 (array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)


state 432

    (53) array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .

    IDENTIFIER      reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    INT_TYPE        reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    FLOAT_TYPE      reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    STRING_TYPE     reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    BOOL_TYPE       reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    CONSOLE         reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    IF              reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    WHILE           reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    FOR             reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    SWITCH          reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    LIST            reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    DICTIONARY      reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    CLASS           reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    PUBLIC          reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    VOID            reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    RETURN          reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    USING           reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    CLASS_NAME      reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    $end            reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)
    BREAK           reduce using rule 53 (array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON .)


state 433

    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 455


state 434

    (58) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .

    IDENTIFIER      reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    SWITCH          reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS           reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    USING           reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    $end            reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)
    BREAK           reduce using rule 58 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE .)


state 435

    (64) for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    IDENTIFIER      reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    SWITCH          reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS           reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    USING           reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    $end            reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BREAK           reduce using rule 64 (for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 436

    (86) case_statement -> CASE expression COLON statement_list BREAK SEMICOLON .

    CLOSE_BRACE     reduce using rule 86 (case_statement -> CASE expression COLON statement_list BREAK SEMICOLON .)
    CASE            reduce using rule 86 (case_statement -> CASE expression COLON statement_list BREAK SEMICOLON .)
    DEFAULT         reduce using rule 86 (case_statement -> CASE expression COLON statement_list BREAK SEMICOLON .)


state 437

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN . OPEN_PAREN CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 456


state 438

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN . OPEN_PAREN CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 457


state 439

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN . STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    STRING_TYPE     shift and go to state 458


state 440

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN . INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    INT_TYPE        shift and go to state 459


state 441

    (119) property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 460


state 442

    (122) method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 122 (method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 122 (method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 122 (method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 443

    (120) property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 461


state 444

    (121) method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 121 (method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 121 (method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 121 (method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 445

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 462


state 446

    (107) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .
    (98) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 98 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 98 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
  ! reduce/reduce conflict for STATIC resolved using rule 98 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 98 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 98 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 98 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)

  ! CLOSE_BRACE     [ reduce using rule 107 (main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .) ]
  ! PUBLIC          [ reduce using rule 107 (main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .) ]
  ! STATIC          [ reduce using rule 107 (main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .) ]


state 447

    (99) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 463
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 448

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER . CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE

    CLOSE_PAREN     shift and go to state 464


state 449

    (109) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .
    (100) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 100 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 100 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
  ! reduce/reduce conflict for STATIC resolved using rule 100 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 100 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 100 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 100 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)

  ! CLOSE_BRACE     [ reduce using rule 109 (main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .) ]
  ! PUBLIC          [ reduce using rule 109 (main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .) ]
  ! STATIC          [ reduce using rule 109 (main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .) ]


state 450

    (101) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 465
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 451

    (102) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 102 (static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 102 (static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 102 (static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 452

    (103) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 466
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 453

    (104) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 104 (static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 104 (static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 104 (static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 454

    (105) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 467
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 455

    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 468


state 456

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 469


state 457

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 470


state 458

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE . COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    COMMA           shift and go to state 471


state 459

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE . COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    COMMA           shift and go to state 472


state 460

    (119) property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 119 (property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE .)
    PUBLIC          reduce using rule 119 (property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE .)
    STATIC          reduce using rule 119 (property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE .)


state 461

    (120) property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 120 (property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE .)
    PUBLIC          reduce using rule 120 (property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE .)
    STATIC          reduce using rule 120 (property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE .)


state 462

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 473


state 463

    (99) static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 99 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 99 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 99 (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 464

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN . OPEN_BRACE statement_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 474


state 465

    (101) static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 101 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 101 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 101 (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 466

    (103) static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 103 (static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 103 (static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 103 (static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 467

    (105) static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 105 (static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 105 (static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 105 (static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 468

    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 475
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 469

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 476


state 470

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 477


state 471

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA . INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    INT_TYPE        shift and go to state 478


state 472

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA . STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    STRING_TYPE     shift and go to state 479


state 473

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 480
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 474

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE . statement_list CLOSE_BRACE
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement_list                 shift and go to state 481
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 475

    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 482
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 476

    (60) list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .

    IDENTIFIER      reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    SWITCH          reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLASS           reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    USING           reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLASS_NAME      reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACE     reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BREAK           reduce using rule 60 (list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)


state 477

    (61) list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .

    IDENTIFIER      reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    SWITCH          reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLASS           reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    USING           reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLASS_NAME      reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACE     reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BREAK           reduce using rule 61 (list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)


state 478

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE . GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 483


state 479

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE . GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 484


state 480

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 485
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 481

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list . CLOSE_BRACE
    (124) statement_list -> statement_list . statement
    (125) statement -> . assignment
    (126) statement -> . print_statement
    (127) statement -> . array_declaration
    (128) statement -> . if_statement
    (129) statement -> . while_statement
    (130) statement -> . for_statement
    (131) statement -> . switch_statement
    (132) statement -> . array_assignment
    (133) statement -> . list_declaration
    (134) statement -> . list_add
    (135) statement -> . dictionary_declaration
    (136) statement -> . dict_assignment
    (137) statement -> . class_definition
    (138) statement -> . basic_function
    (139) statement -> . param_function
    (140) statement -> . return_function
    (141) statement -> . return_statement
    (142) statement -> . using_statement
    (143) statement -> . function_call_statement
    (30) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (31) assignment -> . IDENTIFIER ASSIGN convert_statement SEMICOLON
    (32) assignment -> . INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (33) assignment -> . INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
    (34) assignment -> . INT_TYPE multiple_var_declaration SEMICOLON
    (35) assignment -> . FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (36) assignment -> . STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (37) assignment -> . STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
    (38) assignment -> . BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
    (26) print_statement -> . CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (27) print_statement -> . CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (52) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (53) array_declaration -> . STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
    (94) array_declaration -> . INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN expression SEMICOLON
    (56) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (57) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (58) if_statement -> . IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
    (63) while_statement -> . WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (64) for_statement -> . FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (83) switch_statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
    (55) array_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (60) list_declaration -> . LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (61) list_declaration -> . LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (62) list_add -> . IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
    (79) dictionary_declaration -> . DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (80) dictionary_declaration -> . DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
    (82) dict_assignment -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
    (110) class_definition -> . CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (111) class_definition -> . CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
    (112) class_definition -> . PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
    (59) basic_function -> . VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (72) param_function -> . VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (73) param_function -> . INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
    (88) return_function -> . INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (89) return_function -> . STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (90) return_function -> . FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
    (91) return_statement -> . RETURN SEMICOLON
    (17) using_statement -> . USING IDENTIFIER SEMICOLON
    (18) using_statement -> . USING CLASS_NAME SEMICOLON
    (23) function_call_statement -> . function_call SEMICOLON
    (19) function_call -> . IDENTIFIER OPEN_PAREN CLOSE_PAREN
    (20) function_call -> . IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
    (21) function_call -> . CLASS_NAME OPEN_PAREN CLOSE_PAREN
    (22) function_call -> . CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN

    CLOSE_BRACE     shift and go to state 486
    IDENTIFIER      shift and go to state 24
    INT_TYPE        shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    STRING_TYPE     shift and go to state 27
    BOOL_TYPE       shift and go to state 28
    CONSOLE         shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    SWITCH          shift and go to state 33
    LIST            shift and go to state 34
    DICTIONARY      shift and go to state 35
    CLASS           shift and go to state 36
    PUBLIC          shift and go to state 38
    VOID            shift and go to state 39
    RETURN          shift and go to state 40
    USING           shift and go to state 41
    CLASS_NAME      shift and go to state 37

    statement                      shift and go to state 43
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    array_declaration              shift and go to state 7
    if_statement                   shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    switch_statement               shift and go to state 11
    array_assignment               shift and go to state 12
    list_declaration               shift and go to state 13
    list_add                       shift and go to state 14
    dictionary_declaration         shift and go to state 15
    dict_assignment                shift and go to state 16
    class_definition               shift and go to state 17
    basic_function                 shift and go to state 18
    param_function                 shift and go to state 19
    return_function                shift and go to state 20
    return_statement               shift and go to state 21
    using_statement                shift and go to state 22
    function_call_statement        shift and go to state 23
    function_call                  shift and go to state 42

state 482

    (57) if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    IDENTIFIER      reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    INT_TYPE        reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FLOAT_TYPE      reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STRING_TYPE     reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BOOL_TYPE       reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CONSOLE         reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    IF              reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    WHILE           reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    FOR             reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    SWITCH          reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    LIST            reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    DICTIONARY      reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS           reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    VOID            reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    RETURN          reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    USING           reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLASS_NAME      reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    $end            reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    BREAK           reduce using rule 57 (if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 483

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN . OPEN_PAREN CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 487


state 484

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN . OPEN_PAREN CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 488


state 485

    (106) main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 106 (main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 106 (main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 106 (main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 486

    (108) main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .

    CLOSE_BRACE     reduce using rule 108 (main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    PUBLIC          reduce using rule 108 (main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)
    STATIC          reduce using rule 108 (main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE .)


state 487

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 489


state 488

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 490


state 489

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 491


state 490

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 492


state 491

    (79) dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .

    IDENTIFIER      reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    SWITCH          reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLASS           reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    USING           reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLASS_NAME      reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACE     reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BREAK           reduce using rule 79 (dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)


state 492

    (80) dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .

    IDENTIFIER      reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    INT_TYPE        reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FLOAT_TYPE      reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CONSOLE         reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    SWITCH          reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    LIST            reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    DICTIONARY      reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLASS           reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    VOID            reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    USING           reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLASS_NAME      reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACE     reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)
    BREAK           reduce using rule 80 (dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: reduce/reduce conflict in state 71 resolved using rule (expression -> IDENTIFIER)
WARNING: rejected rule (factor -> IDENTIFIER) in state 71
WARNING: reduce/reduce conflict in state 228 resolved using rule (factor -> STRING)
WARNING: rejected rule (condition -> expression EQUAL STRING) in state 228
WARNING: reduce/reduce conflict in state 297 resolved using rule (array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON)
WARNING: rejected rule (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON) in state 297
WARNING: reduce/reduce conflict in state 446 resolved using rule (static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE)
WARNING: rejected rule (main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE) in state 446
WARNING: reduce/reduce conflict in state 449 resolved using rule (static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE)
WARNING: rejected rule (main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE) in state 449
WARNING: Rule (condition -> expression EQUAL STRING) is never reduced
WARNING: Rule (dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON) is never reduced
WARNING: Rule (main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE) is never reduced
WARNING: Rule (main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE) is never reduced
