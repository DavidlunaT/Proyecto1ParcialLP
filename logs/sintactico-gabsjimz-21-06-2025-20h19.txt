Syntactic Analysis Log
User: gabsjimz
File: algoritmos/algoritmo3.cs
Date: 21-06-2025-20h19

=== SYNTACTIC ERRORS ===
[ERROR] Syntax error at token OPEN_BRACKET ('[') at line 5
[ERROR] Syntax error at token CLASS_NAME ('Length') at line 7
[ERROR] Syntax error at token CLOSE_BRACE ('}') at line 20
[ERROR] Syntax error at token CLASS_NAME ('Length') at line 33
[ERROR] Syntax error at token CLOSE_BRACE ('}') at line 36
[ERROR] Syntax error at token CLASS_NAME ('Length') at line 41
[ERROR] Syntax error at token CLOSE_BRACE ('}') at line 44

=== PARSER DEBUG INFO ===
Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ALIAS
    AMPERSAND
    AMPERSAND_ASSIGN
    ARROW
    AS
    ASCENDING
    ASYNC
    AWAIT
    BANG
    BASE
    BY
    BYTE
    CARET
    CARET_ASSIGN
    CATCH
    CHAR
    CHAR_LITERAL
    CHECKED
    CONST
    CONTINUE
    DECIMAL
    DELEGATE
    DESCENDING
    DIVIDE_ASSIGN
    DO
    DOUBLE
    DOUBLE_COLON
    DOUBLE_QUESTION
    DYNAMIC
    ENUM
    EQUALS
    EVENT
    EXPLICIT
    EXTERN
    FALSE
    FINALLY
    FIXED
    FOREACH
    FROM
    GLOBAL
    GOTO
    GROUP
    IMPLICIT
    IN
    INTERFACE
    INTERNAL
    INTO
    IS
    JOIN
    LAMBDA_ARROW
    LEFT_SHIFT
    LEFT_SHIFT_ASSIGN
    LET
    LOCK
    LONG
    MINUS_ASSIGN
    MULTIPLY_ASSIGN
    NAMEOF
    NAMESPACE
    NOTNULL
    NULL
    NULLABLE_OPERATOR
    OBJECT
    ON
    OPERATOR
    ORDERBY
    OUT
    OVERRIDE
    PARAMS
    PARTIAL
    PERCENT
    PERCENT_ASSIGN
    PIPE
    PIPE_ASSIGN
    PLUS_ASSIGN
    PRIVATE
    PROTECTED
    QUESTION
    READONLY
    REF
    REMOVE
    RIGHT_SHIFT
    RIGHT_SHIFT_ASSIGN
    SBYTE
    SEALED
    SELECT
    SHORT
    SIZEOF
    STACKALLOC
    STRUCT
    THIS
    THROW
    TILDE
    TRUE
    TRY
    TYPEOF
    UINT
    ULONG
    UNCHECKED
    UNMANAGED
    UNSAFE
    USHORT
    VALUE
    VAR
    VERBATIM_STRING
    VIRTUAL
    VOLATILE
    WHEN
    WHERE
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     program -> empty
Rule 3     empty -> <empty>
Rule 4     expression -> expression PLUS term
Rule 5     expression -> expression MINUS term
Rule 6     expression -> term
Rule 7     expression -> IDENTIFIER
Rule 8     expression -> function_call
Rule 9     term -> term MULTIPLY factor
Rule 10    term -> term DIVIDE factor
Rule 11    term -> factor
Rule 12    factor -> INTEGER
Rule 13    factor -> FLOAT
Rule 14    factor -> STRING
Rule 15    factor -> IDENTIFIER
Rule 16    factor -> OPEN_PAREN expression CLOSE_PAREN
Rule 17    using_statement -> USING IDENTIFIER SEMICOLON
Rule 18    using_statement -> USING CLASS_NAME SEMICOLON
Rule 19    function_call -> IDENTIFIER OPEN_PAREN CLOSE_PAREN
Rule 20    function_call -> IDENTIFIER OPEN_PAREN argument_list CLOSE_PAREN
Rule 21    function_call -> CLASS_NAME OPEN_PAREN CLOSE_PAREN
Rule 22    function_call -> CLASS_NAME OPEN_PAREN argument_list CLOSE_PAREN
Rule 23    function_call_statement -> function_call SEMICOLON
Rule 24    argument_list -> expression
Rule 25    argument_list -> argument_list COMMA expression
Rule 26    print_statement -> CONSOLE DOT WRITELINE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
Rule 27    print_statement -> CONSOLE DOT WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON
Rule 28    input_statement -> CONSOLE DOT READLINE OPEN_PAREN CLOSE_PAREN
Rule 29    convert_statement -> CONVERT DOT TOINT32 OPEN_PAREN expression CLOSE_PAREN
Rule 30    assignment -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 31    assignment -> IDENTIFIER ASSIGN convert_statement SEMICOLON
Rule 32    assignment -> INT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
Rule 33    assignment -> INT_TYPE IDENTIFIER ASSIGN convert_statement SEMICOLON
Rule 34    assignment -> INT_TYPE multiple_var_declaration SEMICOLON
Rule 35    assignment -> FLOAT_TYPE IDENTIFIER ASSIGN expression SEMICOLON
Rule 36    assignment -> STRING_TYPE IDENTIFIER ASSIGN expression SEMICOLON
Rule 37    assignment -> STRING_TYPE IDENTIFIER ASSIGN input_statement SEMICOLON
Rule 38    assignment -> BOOL_TYPE IDENTIFIER ASSIGN expression SEMICOLON
Rule 39    multiple_var_declaration -> IDENTIFIER ASSIGN expression COMMA IDENTIFIER ASSIGN expression
Rule 40    multiple_var_declaration -> multiple_var_declaration COMMA IDENTIFIER ASSIGN expression
Rule 41    condition -> expression EQUAL expression
Rule 42    condition -> expression NOT_EQUAL expression
Rule 43    condition -> expression LESS_THAN expression
Rule 44    condition -> expression GREATER_THAN expression
Rule 45    condition -> expression LESS_THAN_EQUAL expression
Rule 46    condition -> expression GREATER_THAN_EQUAL expression
Rule 47    condition -> expression EQUAL STRING
Rule 48    condition -> STRING EQUAL expression
Rule 49    logical_condition -> condition
Rule 50    logical_condition -> condition DOUBLE_AMPERSAND condition
Rule 51    logical_condition -> condition DOUBLE_PIPE condition
Rule 52    array_declaration -> INT_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW INT_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
Rule 53    array_declaration -> STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER ASSIGN NEW STRING_TYPE OPEN_BRACKET INTEGER CLOSE_BRACKET SEMICOLON
Rule 54    array_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 55    array_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
Rule 56    if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 57    if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 58    if_statement -> IF OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE ELSE OPEN_BRACE statement_list CLOSE_BRACE
Rule 59    basic_function -> VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 60    list_declaration -> LIST LESS_THAN INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 61    list_declaration -> LIST LESS_THAN STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW LIST LESS_THAN STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 62    list_add -> IDENTIFIER DOT ADD OPEN_PAREN expression CLOSE_PAREN SEMICOLON
Rule 63    while_statement -> WHILE OPEN_PAREN logical_condition CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 64    for_statement -> FOR OPEN_PAREN for_init SEMICOLON logical_condition SEMICOLON for_update CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 65    for_init -> INT_TYPE IDENTIFIER ASSIGN expression
Rule 66    for_init -> assignment_no_semicolon
Rule 67    assignment_no_semicolon -> IDENTIFIER ASSIGN expression
Rule 68    for_update -> IDENTIFIER INCREMENT
Rule 69    for_update -> IDENTIFIER DECREMENT
Rule 70    for_update -> INCREMENT IDENTIFIER
Rule 71    for_update -> DECREMENT IDENTIFIER
Rule 72    param_function -> VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 73    param_function -> INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 74    parameter_list -> parameter
Rule 75    parameter_list -> parameter_list COMMA parameter
Rule 76    parameter -> INT_TYPE IDENTIFIER
Rule 77    parameter -> STRING_TYPE IDENTIFIER
Rule 78    parameter -> FLOAT_TYPE IDENTIFIER
Rule 79    dictionary_declaration -> DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN STRING_TYPE COMMA INT_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 80    dictionary_declaration -> DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN IDENTIFIER ASSIGN NEW DICTIONARY LESS_THAN INT_TYPE COMMA STRING_TYPE GREATER_THAN OPEN_PAREN CLOSE_PAREN SEMICOLON
Rule 81    dictionary_access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 82    dict_assignment -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression SEMICOLON
Rule 83    switch_statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BRACE case_list CLOSE_BRACE
Rule 84    case_list -> case_statement
Rule 85    case_list -> case_list case_statement
Rule 86    case_statement -> CASE expression COLON statement_list BREAK SEMICOLON
Rule 87    case_statement -> DEFAULT COLON statement_list BREAK SEMICOLON
Rule 88    return_function -> INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
Rule 89    return_function -> STRING_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
Rule 90    return_function -> FLOAT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list RETURN expression SEMICOLON CLOSE_BRACE
Rule 91    return_statement -> RETURN SEMICOLON
Rule 92    expression -> expression OPEN_BRACKET expression CLOSE_BRACKET
Rule 93    expression -> expression DOT IDENTIFIER
Rule 94    static_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 95    static_method -> STATIC VOID IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 96    static_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 97    static_method -> STATIC VOID CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 98    static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 99    static_method -> STATIC INT_TYPE IDENTIFIER OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 100   static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 101   static_method -> STATIC INT_TYPE CLASS_NAME OPEN_PAREN parameter_list CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 102   main_method -> STATIC VOID IDENTIFIER OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 103   main_method -> STATIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 104   main_method -> STATIC VOID CLASS_NAME OPEN_PAREN STRING_TYPE OPEN_BRACKET CLOSE_BRACKET IDENTIFIER CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 105   main_method -> STATIC VOID CLASS_NAME OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 106   class_definition -> CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
Rule 107   class_definition -> CLASS IDENTIFIER OPEN_BRACE class_body CLOSE_BRACE
Rule 108   class_definition -> PUBLIC CLASS CLASS_NAME OPEN_BRACE class_body CLOSE_BRACE
Rule 109   class_body -> class_member
Rule 110   class_body -> class_body class_member
Rule 111   class_member -> property_definition
Rule 112   class_member -> method_definition
Rule 113   class_member -> main_method
Rule 114   class_member -> static_method
Rule 115   property_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
Rule 116   property_definition -> PUBLIC STRING_TYPE IDENTIFIER OPEN_BRACE GET SEMICOLON SET SEMICOLON CLOSE_BRACE
Rule 117   method_definition -> PUBLIC VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 118   method_definition -> PUBLIC INT_TYPE IDENTIFIER OPEN_PAREN CLOSE_PAREN OPEN_BRACE statement_list CLOSE_BRACE
Rule 119   statement_list -> statement
Rule 120   statement_list -> statement_list statement
Rule 121   statement -> assignment
Rule 122   statement -> print_statement
Rule 123   statement -> if_statement
Rule 124   statement -> while_statement
Rule 125   statement -> for_statement
Rule 126   statement -> switch_statement
Rule 127   statement -> array_declaration
Rule 128   statement -> array_assignment
Rule 129   statement -> list_declaration
Rule 130   statement -> list_add
Rule 131   statement -> dictionary_declaration
Rule 132   statement -> dict_assignment
Rule 133   statement -> class_definition
Rule 134   statement -> basic_function
Rule 135   statement -> param_function
Rule 136   statement -> return_function
Rule 137   statement -> return_statement
Rule 138   statement -> using_statement
Rule 139   statement -> function_call_statement

Terminals, with rules where they appear

ABSTRACT             : 
ADD                  : 62
ALIAS                : 
AMPERSAND            : 
AMPERSAND_ASSIGN     : 
ARROW                : 
AS                   : 
ASCENDING            : 
ASSIGN               : 30 31 32 33 35 36 37 38 39 39 40 52 53 55 60 61 65 67 79 80 82
ASYNC                : 
AWAIT                : 
BANG                 : 
BASE                 : 
BOOL_TYPE            : 38
BREAK                : 86 87
BY                   : 
BYTE                 : 
CARET                : 
CARET_ASSIGN         : 
CASE                 : 86
CATCH                : 
CHAR                 : 
CHAR_LITERAL         : 
CHECKED              : 
CLASS                : 106 107 108
CLOSE_BRACE          : 56 57 57 58 58 59 63 64 72 73 83 88 89 90 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 115 116 117 118
CLOSE_BRACKET        : 52 52 53 53 54 55 81 82 92 102 104
CLOSE_PAREN          : 16 19 20 21 22 26 27 28 29 56 57 57 58 59 60 61 62 63 64 72 73 79 80 83 88 89 90 94 95 96 97 98 99 100 101 102 103 104 105 117 118
COLON                : 86 87
COMMA                : 25 39 40 75 79 79 80 80
CONSOLE              : 26 27 28
CONST                : 
CONTINUE             : 
CONVERT              : 29
DECIMAL              : 
DECREMENT            : 69 71
DEFAULT              : 87
DELEGATE             : 
DESCENDING           : 
DICTIONARY           : 79 79 80 80
DIVIDE               : 10
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 26 27 28 29 62 93
DOUBLE               : 
DOUBLE_AMPERSAND     : 50
DOUBLE_COLON         : 
DOUBLE_PIPE          : 51
DOUBLE_QUESTION      : 
DYNAMIC              : 
ELSE                 : 57 58
ENUM                 : 
EQUAL                : 41 47 48
EQUALS               : 
EVENT                : 
EXPLICIT             : 
EXTERN               : 
FALSE                : 
FINALLY              : 
FIXED                : 
FLOAT                : 13
FLOAT_TYPE           : 35 78 90
FOR                  : 64
FOREACH              : 
FROM                 : 
GET                  : 115 116
GLOBAL               : 
GOTO                 : 
GREATER_THAN         : 44 60 60 61 61 79 79 80 80
GREATER_THAN_EQUAL   : 46
GROUP                : 
IDENTIFIER           : 7 15 17 19 20 30 31 32 33 35 36 37 38 39 39 40 52 53 54 55 59 60 61 62 65 67 68 69 70 71 72 73 76 77 78 79 80 81 82 88 89 90 93 94 95 98 99 102 102 103 104 107 115 116 117 118
IF                   : 56 57 57 58
IMPLICIT             : 
IN                   : 
INCREMENT            : 68 70
INTEGER              : 12 52 53
INTERFACE            : 
INTERNAL             : 
INTO                 : 
INT_TYPE             : 32 33 34 52 52 60 60 65 73 76 79 79 80 80 88 98 99 100 101 115 118
IS                   : 
JOIN                 : 
LAMBDA_ARROW         : 
LEFT_SHIFT           : 
LEFT_SHIFT_ASSIGN    : 
LESS_THAN            : 43 60 60 61 61 79 79 80 80
LESS_THAN_EQUAL      : 45
LET                  : 
LIST                 : 60 60 61 61
LOCK                 : 
LONG                 : 
MINUS                : 5
MINUS_ASSIGN         : 
MULTIPLY             : 9
MULTIPLY_ASSIGN      : 
NAMEOF               : 
NAMESPACE            : 
NEW                  : 52 53 60 61 79 80
NOTNULL              : 
NOT_EQUAL            : 42
NULL                 : 
NULLABLE_OPERATOR    : 
OBJECT               : 
ON                   : 
OPEN_BRACE           : 56 57 57 58 58 59 63 64 72 73 83 88 89 90 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 115 116 117 118
OPEN_BRACKET         : 52 52 53 53 54 55 81 82 92 102 104
OPEN_PAREN           : 16 19 20 21 22 26 27 28 29 56 57 57 58 59 60 61 62 63 64 72 73 79 80 83 88 89 90 94 95 96 97 98 99 100 101 102 103 104 105 117 118
OPERATOR             : 
ORDERBY              : 
OUT                  : 
OVERRIDE             : 
PARAMS               : 
PARTIAL              : 
PERCENT              : 
PERCENT_ASSIGN       : 
PIPE                 : 
PIPE_ASSIGN          : 
PLUS                 : 4
PLUS_ASSIGN          : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 108 115 116 117 118
QUESTION             : 
READLINE             : 28
READONLY             : 
REF                  : 
REMOVE               : 
RETURN               : 88 89 90 91
RIGHT_SHIFT          : 
RIGHT_SHIFT_ASSIGN   : 
SBYTE                : 
SEALED               : 
SELECT               : 
SEMICOLON            : 17 18 23 26 27 30 31 32 33 34 35 36 37 38 52 53 55 60 61 62 64 64 79 80 82 86 87 88 89 90 91 115 115 116 116
SET                  : 115 116
SHORT                : 
SIZEOF               : 
STACKALLOC           : 
STATIC               : 94 95 96 97 98 99 100 101 102 103 104 105
STRING               : 14 47 48
STRING_TYPE          : 36 37 53 53 61 61 77 79 79 80 80 89 102 104 116
STRUCT               : 
SWITCH               : 83
THIS                 : 
THROW                : 
TILDE                : 
TOINT32              : 29
TRUE                 : 
TRY                  : 
TYPEOF               : 
UINT                 : 
ULONG                : 
UNCHECKED            : 
UNMANAGED            : 
UNSAFE               : 
USHORT               : 
USING                : 17 18
VALUE                : 
VAR                  : 
VERBATIM_STRING      : 
VIRTUAL              : 
VOID                 : 59 72 94 95 96 97 102 103 104 105 117
VOLATILE             : 
WHEN                 : 
WHERE                : 
WHILE                : 63
WRITE                : 27
WRITELINE            : 26
YIELD                : 
error                : 

Nonterminals, with rules where they appear

CLASS_NAME           : 18 21 22 96 97 100 101 104 105 106 108
argument_list        : 20 22 25
array_access         : 
array_assignment     : 128
array_declaration    : 127
assignment           : 121
assignment_no_semicolon : 66
basic_function       : 134
case_list            : 83 85
case_statement       : 84 85
class_body           : 106 107 108 110
class_definition     : 133
class_member         : 109 110
condition            : 49 50 50 51 51
convert_statement    : 31 33
dict_assignment      : 132
dictionary_access    : 
dictionary_declaration : 131
empty                : 2
expression           : 4 5 16 24 25 26 27 29 30 32 35 36 38 39 39 40 41 41 42 42 43 43 44 44 45 45 46 46 47 48 54 55 55 62 65 67 81 82 82 83 86 88 89 90 92 92 93
factor               : 9 10 11
for_init             : 64
for_statement        : 125
for_update           : 64
function_call        : 8 23
function_call_statement : 139
if_statement         : 123
input_statement      : 37
list_add             : 130
list_declaration     : 129
logical_condition    : 56 57 57 58 63 64
main_method          : 113
method_definition    : 112
multiple_var_declaration : 34 40
param_function       : 135
parameter            : 74 75
parameter_list       : 72 73 75 95 97 99 101
print_statement      : 122
program              : 0
property_definition  : 111
return_function      : 136
return_statement     : 137
statement            : 119 120
statement_list       : 1 56 57 57 58 58 59 63 64 72 73 86 87 88 89 90 94 95 96 97 98 99 100 101 102 103 104 105 117 118 120
static_method        : 114
switch_statement     : 126
term                 : 4 5 6 9 10
using_statement      : 138
while_statement      : 124

